
DIO_Boody.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003eca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003a  00800060  00003eca  00003f5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  0080009a  0080009a  00003f98  2**0
                  ALLOC
  3 .stab         00003fcc  00000000  00000000  00003f98  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001560  00000000  00000000  00007f64  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000094c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00009604  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00009774  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000b3bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000c2a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000d058  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000d1b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000d445  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000dc13  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 2f 07 	jmp	0xe5e	; 0xe5e <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 74 06 	jmp	0xce8	; 0xce8 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ec       	ldi	r30, 0xCA	; 202
      68:	fe e3       	ldi	r31, 0x3E	; 62
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 39       	cpi	r26, 0x9A	; 154
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e9       	ldi	r26, 0x9A	; 154
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3a       	cpi	r26, 0xA9	; 169
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <main>
      8a:	0c 94 63 1f 	jmp	0x3ec6	; 0x3ec6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 2c 1f 	jmp	0x3e58	; 0x3e58 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e8       	ldi	r26, 0x82	; 130
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 48 1f 	jmp	0x3e90	; 0x3e90 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 38 1f 	jmp	0x3e70	; 0x3e70 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 54 1f 	jmp	0x3ea8	; 0x3ea8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 38 1f 	jmp	0x3e70	; 0x3e70 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 54 1f 	jmp	0x3ea8	; 0x3ea8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 2c 1f 	jmp	0x3e58	; 0x3e58 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	82 e8       	ldi	r24, 0x82	; 130
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 48 1f 	jmp	0x3e90	; 0x3e90 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 38 1f 	jmp	0x3e70	; 0x3e70 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 54 1f 	jmp	0x3ea8	; 0x3ea8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 38 1f 	jmp	0x3e70	; 0x3e70 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 54 1f 	jmp	0x3ea8	; 0x3ea8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 38 1f 	jmp	0x3e70	; 0x3e70 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 54 1f 	jmp	0x3ea8	; 0x3ea8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 3c 1f 	jmp	0x3e78	; 0x3e78 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 58 1f 	jmp	0x3eb0	; 0x3eb0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <M_TIMER0_void_Timer0Int>:
u8 MTimer0_u8RemTicks=0;
void (*CallBack) (void);
///***************** FUNCTIONS **********//
/// M_TIMER0_void_Timer0Int is a function to initialize Timer0///
void M_TIMER0_void_Timer0Int(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	///TIMER0 in NORMAL MODE
#if TIMER0_MODE == NORMAL_MODE
	/// To Enable NORMAL_MODE clear the two bits (WGM00,WGM01) in TCCR0_REG
	  ClrBit(TCCR0_REG ,WGM00 );
     b4e:	a3 e5       	ldi	r26, 0x53	; 83
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e3 e5       	ldi	r30, 0x53	; 83
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8f 7b       	andi	r24, 0xBF	; 191
     b5a:	8c 93       	st	X, r24
	  ClrBit(TCCR0_REG ,WGM01 );
     b5c:	a3 e5       	ldi	r26, 0x53	; 83
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e3 e5       	ldi	r30, 0x53	; 83
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	87 7f       	andi	r24, 0xF7	; 247
     b68:	8c 93       	st	X, r24
   /// To enable TIMER0 Interrupt
   // Set TOIEO in TIMSK_REG
	  SetBit(TIMSK_REG , TOIE0);
     b6a:	a9 e5       	ldi	r26, 0x59	; 89
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e9 e5       	ldi	r30, 0x59	; 89
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	81 60       	ori	r24, 0x01	; 1
     b76:	8c 93       	st	X, r24
#endif //// end if for  TIMER0_MODE

}
     b78:	cf 91       	pop	r28
     b7a:	df 91       	pop	r29
     b7c:	08 95       	ret

00000b7e <M_TIMER0_U8_Timer0SetTime>:
///M_TIMER0_U8_Timer0SetTime function to set time
void M_TIMER0_U8_Timer0SetTime(u32 Loacl_u8DesierdTime_ms)
{
     b7e:	df 93       	push	r29
     b80:	cf 93       	push	r28
     b82:	cd b7       	in	r28, 0x3d	; 61
     b84:	de b7       	in	r29, 0x3e	; 62
     b86:	2c 97       	sbiw	r28, 0x0c	; 12
     b88:	0f b6       	in	r0, 0x3f	; 63
     b8a:	f8 94       	cli
     b8c:	de bf       	out	0x3e, r29	; 62
     b8e:	0f be       	out	0x3f, r0	; 63
     b90:	cd bf       	out	0x3d, r28	; 61
     b92:	69 87       	std	Y+9, r22	; 0x09
     b94:	7a 87       	std	Y+10, r23	; 0x0a
     b96:	8b 87       	std	Y+11, r24	; 0x0b
     b98:	9c 87       	std	Y+12, r25	; 0x0c

	/// time of the tick  time
    u32 Local_u32TickTime = TIMER0_PRESCALER / FOSC ;  /// results will be in micro sec
     b9a:	80 e4       	ldi	r24, 0x40	; 64
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	a0 e0       	ldi	r26, 0x00	; 0
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	8d 83       	std	Y+5, r24	; 0x05
     ba4:	9e 83       	std	Y+6, r25	; 0x06
     ba6:	af 83       	std	Y+7, r26	; 0x07
     ba8:	b8 87       	std	Y+8, r27	; 0x08
    /// the number of the total ticks
    u32 Local_u32TotalTicks =  (Loacl_u8DesierdTime_ms *1000) / Local_u32TickTime;
     baa:	89 85       	ldd	r24, Y+9	; 0x09
     bac:	9a 85       	ldd	r25, Y+10	; 0x0a
     bae:	ab 85       	ldd	r26, Y+11	; 0x0b
     bb0:	bc 85       	ldd	r27, Y+12	; 0x0c
     bb2:	28 ee       	ldi	r18, 0xE8	; 232
     bb4:	33 e0       	ldi	r19, 0x03	; 3
     bb6:	40 e0       	ldi	r20, 0x00	; 0
     bb8:	50 e0       	ldi	r21, 0x00	; 0
     bba:	bc 01       	movw	r22, r24
     bbc:	cd 01       	movw	r24, r26
     bbe:	0e 94 c4 1e 	call	0x3d88	; 0x3d88 <__mulsi3>
     bc2:	dc 01       	movw	r26, r24
     bc4:	cb 01       	movw	r24, r22
     bc6:	2d 81       	ldd	r18, Y+5	; 0x05
     bc8:	3e 81       	ldd	r19, Y+6	; 0x06
     bca:	4f 81       	ldd	r20, Y+7	; 0x07
     bcc:	58 85       	ldd	r21, Y+8	; 0x08
     bce:	bc 01       	movw	r22, r24
     bd0:	cd 01       	movw	r24, r26
     bd2:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <__udivmodsi4>
     bd6:	da 01       	movw	r26, r20
     bd8:	c9 01       	movw	r24, r18
     bda:	89 83       	std	Y+1, r24	; 0x01
     bdc:	9a 83       	std	Y+2, r25	; 0x02
     bde:	ab 83       	std	Y+3, r26	; 0x03
     be0:	bc 83       	std	Y+4, r27	; 0x04
    /// the number of over flow
    MTimer0_u32NumOfOV = Local_u32TotalTicks / 256;
     be2:	89 81       	ldd	r24, Y+1	; 0x01
     be4:	9a 81       	ldd	r25, Y+2	; 0x02
     be6:	ab 81       	ldd	r26, Y+3	; 0x03
     be8:	bc 81       	ldd	r27, Y+4	; 0x04
     bea:	89 2f       	mov	r24, r25
     bec:	9a 2f       	mov	r25, r26
     bee:	ab 2f       	mov	r26, r27
     bf0:	bb 27       	eor	r27, r27
     bf2:	80 93 9a 00 	sts	0x009A, r24
     bf6:	90 93 9b 00 	sts	0x009B, r25
     bfa:	a0 93 9c 00 	sts	0x009C, r26
     bfe:	b0 93 9d 00 	sts	0x009D, r27
    /// the number of the reminded ticks
    MTimer0_u8RemTicks = Local_u32TotalTicks %256 ;
     c02:	89 81       	ldd	r24, Y+1	; 0x01
     c04:	80 93 9e 00 	sts	0x009E, r24
    //// If there is a reminded ticks
     if(MTimer0_u8RemTicks != 0)
     c08:	80 91 9e 00 	lds	r24, 0x009E
     c0c:	88 23       	and	r24, r24
     c0e:	c9 f0       	breq	.+50     	; 0xc42 <M_TIMER0_U8_Timer0SetTime+0xc4>
     {
    	 //// TCNT0_REG will start from the reminded ticks number
    	 TCNT0_REG = 256 - MTimer0_u8RemTicks;
     c10:	e2 e5       	ldi	r30, 0x52	; 82
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 91 9e 00 	lds	r24, 0x009E
     c18:	81 95       	neg	r24
     c1a:	80 83       	st	Z, r24
    	 MTimer0_u32NumOfOV++;
     c1c:	80 91 9a 00 	lds	r24, 0x009A
     c20:	90 91 9b 00 	lds	r25, 0x009B
     c24:	a0 91 9c 00 	lds	r26, 0x009C
     c28:	b0 91 9d 00 	lds	r27, 0x009D
     c2c:	01 96       	adiw	r24, 0x01	; 1
     c2e:	a1 1d       	adc	r26, r1
     c30:	b1 1d       	adc	r27, r1
     c32:	80 93 9a 00 	sts	0x009A, r24
     c36:	90 93 9b 00 	sts	0x009B, r25
     c3a:	a0 93 9c 00 	sts	0x009C, r26
     c3e:	b0 93 9d 00 	sts	0x009D, r27
     }

}
     c42:	2c 96       	adiw	r28, 0x0c	; 12
     c44:	0f b6       	in	r0, 0x3f	; 63
     c46:	f8 94       	cli
     c48:	de bf       	out	0x3e, r29	; 62
     c4a:	0f be       	out	0x3f, r0	; 63
     c4c:	cd bf       	out	0x3d, r28	; 61
     c4e:	cf 91       	pop	r28
     c50:	df 91       	pop	r29
     c52:	08 95       	ret

00000c54 <M_TIMER0_void_Timer0Start>:
/// M_TIMER0_void_Timer0Start to let Timer0 start

void M_TIMER0_void_Timer0Start(void)
{
     c54:	df 93       	push	r29
     c56:	cf 93       	push	r28
     c58:	cd b7       	in	r28, 0x3d	; 61
     c5a:	de b7       	in	r29, 0x3e	; 62
	/// Selecting prescaler
#if  TIMER0_PRESCALER == 1024       /// 1024 mode
     /// set   CS02 in TCCR0_REG
        SetBit(TCCR0_REG , CS02);
     c5c:	a3 e5       	ldi	r26, 0x53	; 83
     c5e:	b0 e0       	ldi	r27, 0x00	; 0
     c60:	e3 e5       	ldi	r30, 0x53	; 83
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	80 81       	ld	r24, Z
     c66:	84 60       	ori	r24, 0x04	; 4
     c68:	8c 93       	st	X, r24
     /// clear CS01 in TCCR0_REG
        ClrBit(TCCR0_REG , CS01);
     c6a:	a3 e5       	ldi	r26, 0x53	; 83
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	e3 e5       	ldi	r30, 0x53	; 83
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 81       	ld	r24, Z
     c74:	8d 7f       	andi	r24, 0xFD	; 253
     c76:	8c 93       	st	X, r24
     /// set   CS00 in TCCR0_REG
        SetBit(TCCR0_REG , CS00);
     c78:	a3 e5       	ldi	r26, 0x53	; 83
     c7a:	b0 e0       	ldi	r27, 0x00	; 0
     c7c:	e3 e5       	ldi	r30, 0x53	; 83
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	80 81       	ld	r24, Z
     c82:	81 60       	ori	r24, 0x01	; 1
     c84:	8c 93       	st	X, r24
        SetBit(TCCR0_REG , CS01);
	/// clear CS00 in TCCR0_REG
        ClrBit(TCCR0_REG , CS00);
#endif //// end if for  PRESCALER

}
     c86:	cf 91       	pop	r28
     c88:	df 91       	pop	r29
     c8a:	08 95       	ret

00000c8c <M_TIMER0_void_Timer0Stop>:
///M_TIMER0_void_Timer0Stop to let Timer0 stop
void M_TIMER0_void_Timer0Stop(void)
{
     c8c:	df 93       	push	r29
     c8e:	cf 93       	push	r28
     c90:	cd b7       	in	r28, 0x3d	; 61
     c92:	de b7       	in	r29, 0x3e	; 62
	///clear the three bits (CS00 , CS01 ,CS02 )
	ClrBit(TCCR0_REG , CS00);
     c94:	a3 e5       	ldi	r26, 0x53	; 83
     c96:	b0 e0       	ldi	r27, 0x00	; 0
     c98:	e3 e5       	ldi	r30, 0x53	; 83
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	80 81       	ld	r24, Z
     c9e:	8e 7f       	andi	r24, 0xFE	; 254
     ca0:	8c 93       	st	X, r24
	ClrBit(TCCR0_REG , CS01);
     ca2:	a3 e5       	ldi	r26, 0x53	; 83
     ca4:	b0 e0       	ldi	r27, 0x00	; 0
     ca6:	e3 e5       	ldi	r30, 0x53	; 83
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	8d 7f       	andi	r24, 0xFD	; 253
     cae:	8c 93       	st	X, r24
	ClrBit(TCCR0_REG , CS02);
     cb0:	a3 e5       	ldi	r26, 0x53	; 83
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	e3 e5       	ldi	r30, 0x53	; 83
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	80 81       	ld	r24, Z
     cba:	8b 7f       	andi	r24, 0xFB	; 251
     cbc:	8c 93       	st	X, r24
}
     cbe:	cf 91       	pop	r28
     cc0:	df 91       	pop	r29
     cc2:	08 95       	ret

00000cc4 <M_TIMER0_void_Timer0SetCallBack>:
/// M_TIMER0_void_Timer0SetCallBack to set callback function
void M_TIMER0_void_Timer0SetCallBack(void (*Local_Ptr)(void))
{
     cc4:	df 93       	push	r29
     cc6:	cf 93       	push	r28
     cc8:	00 d0       	rcall	.+0      	; 0xcca <M_TIMER0_void_Timer0SetCallBack+0x6>
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
     cce:	9a 83       	std	Y+2, r25	; 0x02
     cd0:	89 83       	std	Y+1, r24	; 0x01
	CallBack = Local_Ptr;
     cd2:	89 81       	ldd	r24, Y+1	; 0x01
     cd4:	9a 81       	ldd	r25, Y+2	; 0x02
     cd6:	90 93 a6 00 	sts	0x00A6, r25
     cda:	80 93 a5 00 	sts	0x00A5, r24

}
     cde:	0f 90       	pop	r0
     ce0:	0f 90       	pop	r0
     ce2:	cf 91       	pop	r28
     ce4:	df 91       	pop	r29
     ce6:	08 95       	ret

00000ce8 <__vector_9>:

ISR(TIMER0_OVF_vect)
{
     ce8:	1f 92       	push	r1
     cea:	0f 92       	push	r0
     cec:	0f b6       	in	r0, 0x3f	; 63
     cee:	0f 92       	push	r0
     cf0:	11 24       	eor	r1, r1
     cf2:	2f 93       	push	r18
     cf4:	3f 93       	push	r19
     cf6:	4f 93       	push	r20
     cf8:	5f 93       	push	r21
     cfa:	6f 93       	push	r22
     cfc:	7f 93       	push	r23
     cfe:	8f 93       	push	r24
     d00:	9f 93       	push	r25
     d02:	af 93       	push	r26
     d04:	bf 93       	push	r27
     d06:	ef 93       	push	r30
     d08:	ff 93       	push	r31
     d0a:	df 93       	push	r29
     d0c:	cf 93       	push	r28
     d0e:	cd b7       	in	r28, 0x3d	; 61
     d10:	de b7       	in	r29, 0x3e	; 62
	static u32 Local_u32Conter =0;
	    Local_u32Conter ++;
     d12:	80 91 9f 00 	lds	r24, 0x009F
     d16:	90 91 a0 00 	lds	r25, 0x00A0
     d1a:	a0 91 a1 00 	lds	r26, 0x00A1
     d1e:	b0 91 a2 00 	lds	r27, 0x00A2
     d22:	01 96       	adiw	r24, 0x01	; 1
     d24:	a1 1d       	adc	r26, r1
     d26:	b1 1d       	adc	r27, r1
     d28:	80 93 9f 00 	sts	0x009F, r24
     d2c:	90 93 a0 00 	sts	0x00A0, r25
     d30:	a0 93 a1 00 	sts	0x00A1, r26
     d34:	b0 93 a2 00 	sts	0x00A2, r27
	  if(Local_u32Conter ==  MTimer0_u32NumOfOV)
     d38:	20 91 9f 00 	lds	r18, 0x009F
     d3c:	30 91 a0 00 	lds	r19, 0x00A0
     d40:	40 91 a1 00 	lds	r20, 0x00A1
     d44:	50 91 a2 00 	lds	r21, 0x00A2
     d48:	80 91 9a 00 	lds	r24, 0x009A
     d4c:	90 91 9b 00 	lds	r25, 0x009B
     d50:	a0 91 9c 00 	lds	r26, 0x009C
     d54:	b0 91 9d 00 	lds	r27, 0x009D
     d58:	28 17       	cp	r18, r24
     d5a:	39 07       	cpc	r19, r25
     d5c:	4a 07       	cpc	r20, r26
     d5e:	5b 07       	cpc	r21, r27
     d60:	99 f4       	brne	.+38     	; 0xd88 <__vector_9+0xa0>
	  {
           CallBack();
     d62:	e0 91 a5 00 	lds	r30, 0x00A5
     d66:	f0 91 a6 00 	lds	r31, 0x00A6
     d6a:	09 95       	icall
		  Local_u32Conter =0;
     d6c:	10 92 9f 00 	sts	0x009F, r1
     d70:	10 92 a0 00 	sts	0x00A0, r1
     d74:	10 92 a1 00 	sts	0x00A1, r1
     d78:	10 92 a2 00 	sts	0x00A2, r1
		  TCNT0_REG = 256 - MTimer0_u8RemTicks;
     d7c:	e2 e5       	ldi	r30, 0x52	; 82
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 91 9e 00 	lds	r24, 0x009E
     d84:	81 95       	neg	r24
     d86:	80 83       	st	Z, r24
	  }
}
     d88:	cf 91       	pop	r28
     d8a:	df 91       	pop	r29
     d8c:	ff 91       	pop	r31
     d8e:	ef 91       	pop	r30
     d90:	bf 91       	pop	r27
     d92:	af 91       	pop	r26
     d94:	9f 91       	pop	r25
     d96:	8f 91       	pop	r24
     d98:	7f 91       	pop	r23
     d9a:	6f 91       	pop	r22
     d9c:	5f 91       	pop	r21
     d9e:	4f 91       	pop	r20
     da0:	3f 91       	pop	r19
     da2:	2f 91       	pop	r18
     da4:	0f 90       	pop	r0
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	0f 90       	pop	r0
     daa:	1f 90       	pop	r1
     dac:	18 95       	reti

00000dae <M_GIE_void_GIE_EN>:
#include "GIE_Int.h"

/// *************** Functions  ************//
/// M_GIE_void_GIEEn function to Enable general interrupt
void M_GIE_void_GIE_EN (void)
{
     dae:	df 93       	push	r29
     db0:	cf 93       	push	r28
     db2:	cd b7       	in	r28, 0x3d	; 61
     db4:	de b7       	in	r29, 0x3e	; 62
	///set I_BIT in SREG_REG
	SetBit(SREG_REG,I_BIT);
     db6:	af e5       	ldi	r26, 0x5F	; 95
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	ef e5       	ldi	r30, 0x5F	; 95
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	80 68       	ori	r24, 0x80	; 128
     dc2:	8c 93       	st	X, r24
}
     dc4:	cf 91       	pop	r28
     dc6:	df 91       	pop	r29
     dc8:	08 95       	ret

00000dca <M_GIE_void_GIE_DIS>:
/// M_GIE_void_GIEDIS function to Disable general interrupt
void M_GIE_void_GIE_DIS (void)
{
     dca:	df 93       	push	r29
     dcc:	cf 93       	push	r28
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
	///clear I_BIT in SREG_REG
	ClrBit(SREG_REG,I_BIT);
     dd2:	af e5       	ldi	r26, 0x5F	; 95
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	ef e5       	ldi	r30, 0x5F	; 95
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	8f 77       	andi	r24, 0x7F	; 127
     dde:	8c 93       	st	X, r24
}
     de0:	cf 91       	pop	r28
     de2:	df 91       	pop	r29
     de4:	08 95       	ret

00000de6 <M_EXTI_IN0_void_EXTI_INT0EN>:

void (*EXTI_INT0_CallBack)(void);
/// **************Functions********//
///************** M_EXTI_IN0_void_EXTI_INT0EN Function to Enable INT0 ********//
void M_EXTI_IN0_void_EXTI_INT0EN(void)
{
     de6:	df 93       	push	r29
     de8:	cf 93       	push	r28
     dea:	cd b7       	in	r28, 0x3d	; 61
     dec:	de b7       	in	r29, 0x3e	; 62
    ///Enable internal interrupt for INT0
        SetBit(GICR_REG,INT0);
     dee:	ab e5       	ldi	r26, 0x5B	; 91
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	eb e5       	ldi	r30, 0x5B	; 91
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	80 64       	ori	r24, 0x40	; 64
     dfa:	8c 93       	st	X, r24
////  Interrupt 0 (INT0) Sense Control
/// Interrupt Request on Falling_Edge
#if SENSE_CONTROL   == Falling_Edge
	/// Set bit ISC01  on MCUCR_REG
	SetBit(MCUCR_REG ,ISC01);
     dfc:	a5 e5       	ldi	r26, 0x55	; 85
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	e5 e5       	ldi	r30, 0x55	; 85
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	82 60       	ori	r24, 0x02	; 2
     e08:	8c 93       	st	X, r24
	/// Clear bit ISC00  on MCUCR_REG
	ClrBit(MCUCR_REG ,ISC00);
     e0a:	a5 e5       	ldi	r26, 0x55	; 85
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e5 e5       	ldi	r30, 0x55	; 85
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	8e 7f       	andi	r24, 0xFE	; 254
     e16:	8c 93       	st	X, r24
	/// Set bit ISC01  on MCUCR_REG
	ClrBit(MCUCR_REG ,ISC01);
	/// Clear bit ISC00  on MCUCR_REG
	ClrBit(MCUCR_REG ,ISC00);
#endif
}
     e18:	cf 91       	pop	r28
     e1a:	df 91       	pop	r29
     e1c:	08 95       	ret

00000e1e <M_EXTI_IN0_void_EXTI_INT0DIS>:
///************** M_EXTI_IN0_void_EXTI_INT0EN Function to Disable INT0 ********//
void M_EXTI_IN0_void_EXTI_INT0DIS()
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
	///Disable internal interrupt
	    ClrBit(GICR_REG,INT0);
     e26:	ab e5       	ldi	r26, 0x5B	; 91
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	eb e5       	ldi	r30, 0x5B	; 91
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	8f 7b       	andi	r24, 0xBF	; 191
     e32:	8c 93       	st	X, r24
}
     e34:	cf 91       	pop	r28
     e36:	df 91       	pop	r29
     e38:	08 95       	ret

00000e3a <M_EXTI_INT0_void_Set_CallBack>:
///************** M_EXTI_INT0_void_Set_CallBack Function ********//
void M_EXTI_INT0_void_Set_CallBack (void (*local_ptr)(void))
{
     e3a:	df 93       	push	r29
     e3c:	cf 93       	push	r28
     e3e:	00 d0       	rcall	.+0      	; 0xe40 <M_EXTI_INT0_void_Set_CallBack+0x6>
     e40:	cd b7       	in	r28, 0x3d	; 61
     e42:	de b7       	in	r29, 0x3e	; 62
     e44:	9a 83       	std	Y+2, r25	; 0x02
     e46:	89 83       	std	Y+1, r24	; 0x01
	EXTI_INT0_CallBack = local_ptr;
     e48:	89 81       	ldd	r24, Y+1	; 0x01
     e4a:	9a 81       	ldd	r25, Y+2	; 0x02
     e4c:	90 93 a8 00 	sts	0x00A8, r25
     e50:	80 93 a7 00 	sts	0x00A7, r24

}
     e54:	0f 90       	pop	r0
     e56:	0f 90       	pop	r0
     e58:	cf 91       	pop	r28
     e5a:	df 91       	pop	r29
     e5c:	08 95       	ret

00000e5e <__vector_1>:

ISR(INT0_vect)
{
     e5e:	1f 92       	push	r1
     e60:	0f 92       	push	r0
     e62:	0f b6       	in	r0, 0x3f	; 63
     e64:	0f 92       	push	r0
     e66:	11 24       	eor	r1, r1
     e68:	2f 93       	push	r18
     e6a:	3f 93       	push	r19
     e6c:	4f 93       	push	r20
     e6e:	5f 93       	push	r21
     e70:	6f 93       	push	r22
     e72:	7f 93       	push	r23
     e74:	8f 93       	push	r24
     e76:	9f 93       	push	r25
     e78:	af 93       	push	r26
     e7a:	bf 93       	push	r27
     e7c:	ef 93       	push	r30
     e7e:	ff 93       	push	r31
     e80:	df 93       	push	r29
     e82:	cf 93       	push	r28
     e84:	cd b7       	in	r28, 0x3d	; 61
     e86:	de b7       	in	r29, 0x3e	; 62
	EXTI_INT0_CallBack();
     e88:	e0 91 a7 00 	lds	r30, 0x00A7
     e8c:	f0 91 a8 00 	lds	r31, 0x00A8
     e90:	09 95       	icall
}
     e92:	cf 91       	pop	r28
     e94:	df 91       	pop	r29
     e96:	ff 91       	pop	r31
     e98:	ef 91       	pop	r30
     e9a:	bf 91       	pop	r27
     e9c:	af 91       	pop	r26
     e9e:	9f 91       	pop	r25
     ea0:	8f 91       	pop	r24
     ea2:	7f 91       	pop	r23
     ea4:	6f 91       	pop	r22
     ea6:	5f 91       	pop	r21
     ea8:	4f 91       	pop	r20
     eaa:	3f 91       	pop	r19
     eac:	2f 91       	pop	r18
     eae:	0f 90       	pop	r0
     eb0:	0f be       	out	0x3f, r0	; 63
     eb2:	0f 90       	pop	r0
     eb4:	1f 90       	pop	r1
     eb6:	18 95       	reti

00000eb8 <M_DIO_void_SetPinDirection>:
 */
#include "DIO_Int.h"

///  M_DIO_void_SetPinDirection takes 3 arguments PORT , PIN & DIRECTION
void M_DIO_void_SetPinDirection (u8 port , u8 pin , u8 direction)
{
     eb8:	df 93       	push	r29
     eba:	cf 93       	push	r28
     ebc:	cd b7       	in	r28, 0x3d	; 61
     ebe:	de b7       	in	r29, 0x3e	; 62
     ec0:	29 97       	sbiw	r28, 0x09	; 9
     ec2:	0f b6       	in	r0, 0x3f	; 63
     ec4:	f8 94       	cli
     ec6:	de bf       	out	0x3e, r29	; 62
     ec8:	0f be       	out	0x3f, r0	; 63
     eca:	cd bf       	out	0x3d, r28	; 61
     ecc:	89 83       	std	Y+1, r24	; 0x01
     ece:	6a 83       	std	Y+2, r22	; 0x02
     ed0:	4b 83       	std	Y+3, r20	; 0x03
	//// SWITCH too determine the Direction of Pin
	switch (direction)
     ed2:	8b 81       	ldd	r24, Y+3	; 0x03
     ed4:	28 2f       	mov	r18, r24
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	39 87       	std	Y+9, r19	; 0x09
     eda:	28 87       	std	Y+8, r18	; 0x08
     edc:	88 85       	ldd	r24, Y+8	; 0x08
     ede:	99 85       	ldd	r25, Y+9	; 0x09
     ee0:	00 97       	sbiw	r24, 0x00	; 0
     ee2:	39 f0       	breq	.+14     	; 0xef2 <M_DIO_void_SetPinDirection+0x3a>
     ee4:	28 85       	ldd	r18, Y+8	; 0x08
     ee6:	39 85       	ldd	r19, Y+9	; 0x09
     ee8:	21 30       	cpi	r18, 0x01	; 1
     eea:	31 05       	cpc	r19, r1
     eec:	09 f4       	brne	.+2      	; 0xef0 <M_DIO_void_SetPinDirection+0x38>
     eee:	76 c0       	rjmp	.+236    	; 0xfdc <M_DIO_void_SetPinDirection+0x124>
     ef0:	e4 c0       	rjmp	.+456    	; 0x10ba <M_DIO_void_SetPinDirection+0x202>
		{
	 /// case  INPUT means that the Direction of Pin  = 0
		 case INPUT :
			 //// SWITCH too determine the Port of the Pin
			 switch (port)
     ef2:	89 81       	ldd	r24, Y+1	; 0x01
     ef4:	28 2f       	mov	r18, r24
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	3f 83       	std	Y+7, r19	; 0x07
     efa:	2e 83       	std	Y+6, r18	; 0x06
     efc:	8e 81       	ldd	r24, Y+6	; 0x06
     efe:	9f 81       	ldd	r25, Y+7	; 0x07
     f00:	82 30       	cpi	r24, 0x02	; 2
     f02:	91 05       	cpc	r25, r1
     f04:	61 f1       	breq	.+88     	; 0xf5e <M_DIO_void_SetPinDirection+0xa6>
     f06:	2e 81       	ldd	r18, Y+6	; 0x06
     f08:	3f 81       	ldd	r19, Y+7	; 0x07
     f0a:	23 30       	cpi	r18, 0x03	; 3
     f0c:	31 05       	cpc	r19, r1
     f0e:	34 f4       	brge	.+12     	; 0xf1c <M_DIO_void_SetPinDirection+0x64>
     f10:	8e 81       	ldd	r24, Y+6	; 0x06
     f12:	9f 81       	ldd	r25, Y+7	; 0x07
     f14:	81 30       	cpi	r24, 0x01	; 1
     f16:	91 05       	cpc	r25, r1
     f18:	69 f0       	breq	.+26     	; 0xf34 <M_DIO_void_SetPinDirection+0x7c>
     f1a:	cf c0       	rjmp	.+414    	; 0x10ba <M_DIO_void_SetPinDirection+0x202>
     f1c:	2e 81       	ldd	r18, Y+6	; 0x06
     f1e:	3f 81       	ldd	r19, Y+7	; 0x07
     f20:	23 30       	cpi	r18, 0x03	; 3
     f22:	31 05       	cpc	r19, r1
     f24:	89 f1       	breq	.+98     	; 0xf88 <M_DIO_void_SetPinDirection+0xd0>
     f26:	8e 81       	ldd	r24, Y+6	; 0x06
     f28:	9f 81       	ldd	r25, Y+7	; 0x07
     f2a:	84 30       	cpi	r24, 0x04	; 4
     f2c:	91 05       	cpc	r25, r1
     f2e:	09 f4       	brne	.+2      	; 0xf32 <M_DIO_void_SetPinDirection+0x7a>
     f30:	40 c0       	rjmp	.+128    	; 0xfb2 <M_DIO_void_SetPinDirection+0xfa>
     f32:	c3 c0       	rjmp	.+390    	; 0x10ba <M_DIO_void_SetPinDirection+0x202>
			 	{
			 	case PORTA_ID :                        /// Port A
			 		ClrBit(DDRA,pin);                  /// clear pin value set it to 0
     f34:	aa e3       	ldi	r26, 0x3A	; 58
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	ea e3       	ldi	r30, 0x3A	; 58
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	48 2f       	mov	r20, r24
     f40:	8a 81       	ldd	r24, Y+2	; 0x02
     f42:	28 2f       	mov	r18, r24
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	02 2e       	mov	r0, r18
     f4c:	02 c0       	rjmp	.+4      	; 0xf52 <M_DIO_void_SetPinDirection+0x9a>
     f4e:	88 0f       	add	r24, r24
     f50:	99 1f       	adc	r25, r25
     f52:	0a 94       	dec	r0
     f54:	e2 f7       	brpl	.-8      	; 0xf4e <M_DIO_void_SetPinDirection+0x96>
     f56:	80 95       	com	r24
     f58:	84 23       	and	r24, r20
     f5a:	8c 93       	st	X, r24
     f5c:	ae c0       	rjmp	.+348    	; 0x10ba <M_DIO_void_SetPinDirection+0x202>
				break ;
			 	case PORTB_ID :                        /// Port B
			 		ClrBit(DDRB,pin);                 /// clear pin value set it to 0
     f5e:	a7 e3       	ldi	r26, 0x37	; 55
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	e7 e3       	ldi	r30, 0x37	; 55
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	48 2f       	mov	r20, r24
     f6a:	8a 81       	ldd	r24, Y+2	; 0x02
     f6c:	28 2f       	mov	r18, r24
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	02 2e       	mov	r0, r18
     f76:	02 c0       	rjmp	.+4      	; 0xf7c <M_DIO_void_SetPinDirection+0xc4>
     f78:	88 0f       	add	r24, r24
     f7a:	99 1f       	adc	r25, r25
     f7c:	0a 94       	dec	r0
     f7e:	e2 f7       	brpl	.-8      	; 0xf78 <M_DIO_void_SetPinDirection+0xc0>
     f80:	80 95       	com	r24
     f82:	84 23       	and	r24, r20
     f84:	8c 93       	st	X, r24
     f86:	99 c0       	rjmp	.+306    	; 0x10ba <M_DIO_void_SetPinDirection+0x202>
			 	break ;
			 	case PORTC_ID :                       /// Port C
			 		ClrBit(DDRC,pin);                /// clear pin value set it to 0
     f88:	a4 e3       	ldi	r26, 0x34	; 52
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	e4 e3       	ldi	r30, 0x34	; 52
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	48 2f       	mov	r20, r24
     f94:	8a 81       	ldd	r24, Y+2	; 0x02
     f96:	28 2f       	mov	r18, r24
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	02 2e       	mov	r0, r18
     fa0:	02 c0       	rjmp	.+4      	; 0xfa6 <M_DIO_void_SetPinDirection+0xee>
     fa2:	88 0f       	add	r24, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	0a 94       	dec	r0
     fa8:	e2 f7       	brpl	.-8      	; 0xfa2 <M_DIO_void_SetPinDirection+0xea>
     faa:	80 95       	com	r24
     fac:	84 23       	and	r24, r20
     fae:	8c 93       	st	X, r24
     fb0:	84 c0       	rjmp	.+264    	; 0x10ba <M_DIO_void_SetPinDirection+0x202>
			 	break ;
			 	case PORTD_ID :                       /// Port D
			 		ClrBit(DDRD,pin);                /// clear pin value set it to 0
     fb2:	a1 e3       	ldi	r26, 0x31	; 49
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e1 e3       	ldi	r30, 0x31	; 49
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	48 2f       	mov	r20, r24
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	02 2e       	mov	r0, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <M_DIO_void_SetPinDirection+0x118>
     fcc:	88 0f       	add	r24, r24
     fce:	99 1f       	adc	r25, r25
     fd0:	0a 94       	dec	r0
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <M_DIO_void_SetPinDirection+0x114>
     fd4:	80 95       	com	r24
     fd6:	84 23       	and	r24, r20
     fd8:	8c 93       	st	X, r24
     fda:	6f c0       	rjmp	.+222    	; 0x10ba <M_DIO_void_SetPinDirection+0x202>
		break;        /////// break case INPUT

		/// case  INPUT means that the Direction of Pin = 1
		 case OUTPUT :
			 //// SWITCH too determine the Port of the Pin
			 switch (port)
     fdc:	89 81       	ldd	r24, Y+1	; 0x01
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	3d 83       	std	Y+5, r19	; 0x05
     fe4:	2c 83       	std	Y+4, r18	; 0x04
     fe6:	8c 81       	ldd	r24, Y+4	; 0x04
     fe8:	9d 81       	ldd	r25, Y+5	; 0x05
     fea:	82 30       	cpi	r24, 0x02	; 2
     fec:	91 05       	cpc	r25, r1
     fee:	51 f1       	breq	.+84     	; 0x1044 <M_DIO_void_SetPinDirection+0x18c>
     ff0:	2c 81       	ldd	r18, Y+4	; 0x04
     ff2:	3d 81       	ldd	r19, Y+5	; 0x05
     ff4:	23 30       	cpi	r18, 0x03	; 3
     ff6:	31 05       	cpc	r19, r1
     ff8:	34 f4       	brge	.+12     	; 0x1006 <M_DIO_void_SetPinDirection+0x14e>
     ffa:	8c 81       	ldd	r24, Y+4	; 0x04
     ffc:	9d 81       	ldd	r25, Y+5	; 0x05
     ffe:	81 30       	cpi	r24, 0x01	; 1
    1000:	91 05       	cpc	r25, r1
    1002:	61 f0       	breq	.+24     	; 0x101c <M_DIO_void_SetPinDirection+0x164>
    1004:	5a c0       	rjmp	.+180    	; 0x10ba <M_DIO_void_SetPinDirection+0x202>
    1006:	2c 81       	ldd	r18, Y+4	; 0x04
    1008:	3d 81       	ldd	r19, Y+5	; 0x05
    100a:	23 30       	cpi	r18, 0x03	; 3
    100c:	31 05       	cpc	r19, r1
    100e:	71 f1       	breq	.+92     	; 0x106c <M_DIO_void_SetPinDirection+0x1b4>
    1010:	8c 81       	ldd	r24, Y+4	; 0x04
    1012:	9d 81       	ldd	r25, Y+5	; 0x05
    1014:	84 30       	cpi	r24, 0x04	; 4
    1016:	91 05       	cpc	r25, r1
    1018:	e9 f1       	breq	.+122    	; 0x1094 <M_DIO_void_SetPinDirection+0x1dc>
    101a:	4f c0       	rjmp	.+158    	; 0x10ba <M_DIO_void_SetPinDirection+0x202>
			 	{
			 	case PORTA_ID :                   /// Port A
			 		SetBit(DDRA,pin);             /// SET pin value set it to 1
    101c:	aa e3       	ldi	r26, 0x3A	; 58
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	ea e3       	ldi	r30, 0x3A	; 58
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	48 2f       	mov	r20, r24
    1028:	8a 81       	ldd	r24, Y+2	; 0x02
    102a:	28 2f       	mov	r18, r24
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	02 2e       	mov	r0, r18
    1034:	02 c0       	rjmp	.+4      	; 0x103a <M_DIO_void_SetPinDirection+0x182>
    1036:	88 0f       	add	r24, r24
    1038:	99 1f       	adc	r25, r25
    103a:	0a 94       	dec	r0
    103c:	e2 f7       	brpl	.-8      	; 0x1036 <M_DIO_void_SetPinDirection+0x17e>
    103e:	84 2b       	or	r24, r20
    1040:	8c 93       	st	X, r24
    1042:	3b c0       	rjmp	.+118    	; 0x10ba <M_DIO_void_SetPinDirection+0x202>
			 	break ;       /////// break case PORTA_ID

			 	case PORTB_ID :                  /// Port B
			 		SetBit(DDRB,pin);           /// SET pin value set it to 1
    1044:	a7 e3       	ldi	r26, 0x37	; 55
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	e7 e3       	ldi	r30, 0x37	; 55
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	48 2f       	mov	r20, r24
    1050:	8a 81       	ldd	r24, Y+2	; 0x02
    1052:	28 2f       	mov	r18, r24
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	02 2e       	mov	r0, r18
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <M_DIO_void_SetPinDirection+0x1aa>
    105e:	88 0f       	add	r24, r24
    1060:	99 1f       	adc	r25, r25
    1062:	0a 94       	dec	r0
    1064:	e2 f7       	brpl	.-8      	; 0x105e <M_DIO_void_SetPinDirection+0x1a6>
    1066:	84 2b       	or	r24, r20
    1068:	8c 93       	st	X, r24
    106a:	27 c0       	rjmp	.+78     	; 0x10ba <M_DIO_void_SetPinDirection+0x202>
			 	break ;       /////// break case PORTB_ID

			 	case PORTC_ID :                  /// Port C
			 		SetBit(DDRC,pin);            /// SET pin value set it to 1
    106c:	a4 e3       	ldi	r26, 0x34	; 52
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	e4 e3       	ldi	r30, 0x34	; 52
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	48 2f       	mov	r20, r24
    1078:	8a 81       	ldd	r24, Y+2	; 0x02
    107a:	28 2f       	mov	r18, r24
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	02 2e       	mov	r0, r18
    1084:	02 c0       	rjmp	.+4      	; 0x108a <M_DIO_void_SetPinDirection+0x1d2>
    1086:	88 0f       	add	r24, r24
    1088:	99 1f       	adc	r25, r25
    108a:	0a 94       	dec	r0
    108c:	e2 f7       	brpl	.-8      	; 0x1086 <M_DIO_void_SetPinDirection+0x1ce>
    108e:	84 2b       	or	r24, r20
    1090:	8c 93       	st	X, r24
    1092:	13 c0       	rjmp	.+38     	; 0x10ba <M_DIO_void_SetPinDirection+0x202>
			 	break ;        /////// break case PORTC_ID

			 	case PORTD_ID :                  /// Port D
			 		SetBit(DDRD,pin);           /// SET pin value set it to 1
    1094:	a1 e3       	ldi	r26, 0x31	; 49
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	e1 e3       	ldi	r30, 0x31	; 49
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	48 2f       	mov	r20, r24
    10a0:	8a 81       	ldd	r24, Y+2	; 0x02
    10a2:	28 2f       	mov	r18, r24
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	02 2e       	mov	r0, r18
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <M_DIO_void_SetPinDirection+0x1fa>
    10ae:	88 0f       	add	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	0a 94       	dec	r0
    10b4:	e2 f7       	brpl	.-8      	; 0x10ae <M_DIO_void_SetPinDirection+0x1f6>
    10b6:	84 2b       	or	r24, r20
    10b8:	8c 93       	st	X, r24

		 default:       /*  Do nothing */        break;
		       ///* default of switch (direction) */
		}

}
    10ba:	29 96       	adiw	r28, 0x09	; 9
    10bc:	0f b6       	in	r0, 0x3f	; 63
    10be:	f8 94       	cli
    10c0:	de bf       	out	0x3e, r29	; 62
    10c2:	0f be       	out	0x3f, r0	; 63
    10c4:	cd bf       	out	0x3d, r28	; 61
    10c6:	cf 91       	pop	r28
    10c8:	df 91       	pop	r29
    10ca:	08 95       	ret

000010cc <M_DIO_void_SetPinValue>:



void M_DIO_void_SetPinValue(u8 port , u8 pin , u8 value)
{
    10cc:	df 93       	push	r29
    10ce:	cf 93       	push	r28
    10d0:	cd b7       	in	r28, 0x3d	; 61
    10d2:	de b7       	in	r29, 0x3e	; 62
    10d4:	29 97       	sbiw	r28, 0x09	; 9
    10d6:	0f b6       	in	r0, 0x3f	; 63
    10d8:	f8 94       	cli
    10da:	de bf       	out	0x3e, r29	; 62
    10dc:	0f be       	out	0x3f, r0	; 63
    10de:	cd bf       	out	0x3d, r28	; 61
    10e0:	89 83       	std	Y+1, r24	; 0x01
    10e2:	6a 83       	std	Y+2, r22	; 0x02
    10e4:	4b 83       	std	Y+3, r20	; 0x03
	  /// SWITCH too determine the Value of the Pin
		switch (value)
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	28 2f       	mov	r18, r24
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	39 87       	std	Y+9, r19	; 0x09
    10ee:	28 87       	std	Y+8, r18	; 0x08
    10f0:	88 85       	ldd	r24, Y+8	; 0x08
    10f2:	99 85       	ldd	r25, Y+9	; 0x09
    10f4:	00 97       	sbiw	r24, 0x00	; 0
    10f6:	39 f0       	breq	.+14     	; 0x1106 <M_DIO_void_SetPinValue+0x3a>
    10f8:	28 85       	ldd	r18, Y+8	; 0x08
    10fa:	39 85       	ldd	r19, Y+9	; 0x09
    10fc:	21 30       	cpi	r18, 0x01	; 1
    10fe:	31 05       	cpc	r19, r1
    1100:	09 f4       	brne	.+2      	; 0x1104 <M_DIO_void_SetPinValue+0x38>
    1102:	76 c0       	rjmp	.+236    	; 0x11f0 <M_DIO_void_SetPinValue+0x124>
    1104:	e4 c0       	rjmp	.+456    	; 0x12ce <M_DIO_void_SetPinValue+0x202>
		{
		   /// case  LOW means that the Value of Pin = 0
          case LOW :
        	  //// SWITCH too determine the Port of the Pin
			       switch (port)
    1106:	89 81       	ldd	r24, Y+1	; 0x01
    1108:	28 2f       	mov	r18, r24
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	3f 83       	std	Y+7, r19	; 0x07
    110e:	2e 83       	std	Y+6, r18	; 0x06
    1110:	8e 81       	ldd	r24, Y+6	; 0x06
    1112:	9f 81       	ldd	r25, Y+7	; 0x07
    1114:	82 30       	cpi	r24, 0x02	; 2
    1116:	91 05       	cpc	r25, r1
    1118:	61 f1       	breq	.+88     	; 0x1172 <M_DIO_void_SetPinValue+0xa6>
    111a:	2e 81       	ldd	r18, Y+6	; 0x06
    111c:	3f 81       	ldd	r19, Y+7	; 0x07
    111e:	23 30       	cpi	r18, 0x03	; 3
    1120:	31 05       	cpc	r19, r1
    1122:	34 f4       	brge	.+12     	; 0x1130 <M_DIO_void_SetPinValue+0x64>
    1124:	8e 81       	ldd	r24, Y+6	; 0x06
    1126:	9f 81       	ldd	r25, Y+7	; 0x07
    1128:	81 30       	cpi	r24, 0x01	; 1
    112a:	91 05       	cpc	r25, r1
    112c:	69 f0       	breq	.+26     	; 0x1148 <M_DIO_void_SetPinValue+0x7c>
    112e:	cf c0       	rjmp	.+414    	; 0x12ce <M_DIO_void_SetPinValue+0x202>
    1130:	2e 81       	ldd	r18, Y+6	; 0x06
    1132:	3f 81       	ldd	r19, Y+7	; 0x07
    1134:	23 30       	cpi	r18, 0x03	; 3
    1136:	31 05       	cpc	r19, r1
    1138:	89 f1       	breq	.+98     	; 0x119c <M_DIO_void_SetPinValue+0xd0>
    113a:	8e 81       	ldd	r24, Y+6	; 0x06
    113c:	9f 81       	ldd	r25, Y+7	; 0x07
    113e:	84 30       	cpi	r24, 0x04	; 4
    1140:	91 05       	cpc	r25, r1
    1142:	09 f4       	brne	.+2      	; 0x1146 <M_DIO_void_SetPinValue+0x7a>
    1144:	40 c0       	rjmp	.+128    	; 0x11c6 <M_DIO_void_SetPinValue+0xfa>
    1146:	c3 c0       	rjmp	.+390    	; 0x12ce <M_DIO_void_SetPinValue+0x202>
			       	{
			       	case PORTA_ID :                  /// Port A
			       		ClrBit(PORTA,pin);          ///  clear pin value set it to 0
    1148:	ab e3       	ldi	r26, 0x3B	; 59
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	eb e3       	ldi	r30, 0x3B	; 59
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	48 2f       	mov	r20, r24
    1154:	8a 81       	ldd	r24, Y+2	; 0x02
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	02 2e       	mov	r0, r18
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <M_DIO_void_SetPinValue+0x9a>
    1162:	88 0f       	add	r24, r24
    1164:	99 1f       	adc	r25, r25
    1166:	0a 94       	dec	r0
    1168:	e2 f7       	brpl	.-8      	; 0x1162 <M_DIO_void_SetPinValue+0x96>
    116a:	80 95       	com	r24
    116c:	84 23       	and	r24, r20
    116e:	8c 93       	st	X, r24
    1170:	ae c0       	rjmp	.+348    	; 0x12ce <M_DIO_void_SetPinValue+0x202>
			       	break ;             /////// break case PORTA_ID

			       	case PORTB_ID :                 /// Port B
			       		ClrBit(PORTB,pin);          /// clear pin value set it to 0
    1172:	a8 e3       	ldi	r26, 0x38	; 56
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	e8 e3       	ldi	r30, 0x38	; 56
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	48 2f       	mov	r20, r24
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	02 2e       	mov	r0, r18
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <M_DIO_void_SetPinValue+0xc4>
    118c:	88 0f       	add	r24, r24
    118e:	99 1f       	adc	r25, r25
    1190:	0a 94       	dec	r0
    1192:	e2 f7       	brpl	.-8      	; 0x118c <M_DIO_void_SetPinValue+0xc0>
    1194:	80 95       	com	r24
    1196:	84 23       	and	r24, r20
    1198:	8c 93       	st	X, r24
    119a:	99 c0       	rjmp	.+306    	; 0x12ce <M_DIO_void_SetPinValue+0x202>
			       	break ;          /////// break case PORTB_ID

			       	case PORTC_ID :                 /// Port C
			       		ClrBit(PORTC,pin);          /// clear pin value set it to 0
    119c:	a5 e3       	ldi	r26, 0x35	; 53
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	e5 e3       	ldi	r30, 0x35	; 53
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	48 2f       	mov	r20, r24
    11a8:	8a 81       	ldd	r24, Y+2	; 0x02
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	02 2e       	mov	r0, r18
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <M_DIO_void_SetPinValue+0xee>
    11b6:	88 0f       	add	r24, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	0a 94       	dec	r0
    11bc:	e2 f7       	brpl	.-8      	; 0x11b6 <M_DIO_void_SetPinValue+0xea>
    11be:	80 95       	com	r24
    11c0:	84 23       	and	r24, r20
    11c2:	8c 93       	st	X, r24
    11c4:	84 c0       	rjmp	.+264    	; 0x12ce <M_DIO_void_SetPinValue+0x202>
			       	break ;         /////// break case PORTC_ID

			       	case PORTD_ID :                 /// Port D
			       		ClrBit(PORTD,pin);         /// clear pin value set it to 0
    11c6:	a2 e3       	ldi	r26, 0x32	; 50
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	e2 e3       	ldi	r30, 0x32	; 50
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	48 2f       	mov	r20, r24
    11d2:	8a 81       	ldd	r24, Y+2	; 0x02
    11d4:	28 2f       	mov	r18, r24
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	02 2e       	mov	r0, r18
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <M_DIO_void_SetPinValue+0x118>
    11e0:	88 0f       	add	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	0a 94       	dec	r0
    11e6:	e2 f7       	brpl	.-8      	; 0x11e0 <M_DIO_void_SetPinValue+0x114>
    11e8:	80 95       	com	r24
    11ea:	84 23       	and	r24, r20
    11ec:	8c 93       	st	X, r24
    11ee:	6f c0       	rjmp	.+222    	; 0x12ce <M_DIO_void_SetPinValue+0x202>
		 break;   /////// break case LOW

		 /// case  HIGH means that the Value of Pin = 1
		 case HIGH :
			 //// SWITCH too determine the Port of the Pin
			        switch (port)
    11f0:	89 81       	ldd	r24, Y+1	; 0x01
    11f2:	28 2f       	mov	r18, r24
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	3d 83       	std	Y+5, r19	; 0x05
    11f8:	2c 83       	std	Y+4, r18	; 0x04
    11fa:	8c 81       	ldd	r24, Y+4	; 0x04
    11fc:	9d 81       	ldd	r25, Y+5	; 0x05
    11fe:	82 30       	cpi	r24, 0x02	; 2
    1200:	91 05       	cpc	r25, r1
    1202:	51 f1       	breq	.+84     	; 0x1258 <M_DIO_void_SetPinValue+0x18c>
    1204:	2c 81       	ldd	r18, Y+4	; 0x04
    1206:	3d 81       	ldd	r19, Y+5	; 0x05
    1208:	23 30       	cpi	r18, 0x03	; 3
    120a:	31 05       	cpc	r19, r1
    120c:	34 f4       	brge	.+12     	; 0x121a <M_DIO_void_SetPinValue+0x14e>
    120e:	8c 81       	ldd	r24, Y+4	; 0x04
    1210:	9d 81       	ldd	r25, Y+5	; 0x05
    1212:	81 30       	cpi	r24, 0x01	; 1
    1214:	91 05       	cpc	r25, r1
    1216:	61 f0       	breq	.+24     	; 0x1230 <M_DIO_void_SetPinValue+0x164>
    1218:	5a c0       	rjmp	.+180    	; 0x12ce <M_DIO_void_SetPinValue+0x202>
    121a:	2c 81       	ldd	r18, Y+4	; 0x04
    121c:	3d 81       	ldd	r19, Y+5	; 0x05
    121e:	23 30       	cpi	r18, 0x03	; 3
    1220:	31 05       	cpc	r19, r1
    1222:	71 f1       	breq	.+92     	; 0x1280 <M_DIO_void_SetPinValue+0x1b4>
    1224:	8c 81       	ldd	r24, Y+4	; 0x04
    1226:	9d 81       	ldd	r25, Y+5	; 0x05
    1228:	84 30       	cpi	r24, 0x04	; 4
    122a:	91 05       	cpc	r25, r1
    122c:	e9 f1       	breq	.+122    	; 0x12a8 <M_DIO_void_SetPinValue+0x1dc>
    122e:	4f c0       	rjmp	.+158    	; 0x12ce <M_DIO_void_SetPinValue+0x202>
			        	{
			        	case PORTA_ID :                /// Port A
			        		SetBit(PORTA,pin);         /// SET pin value set it to 1
    1230:	ab e3       	ldi	r26, 0x3B	; 59
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	eb e3       	ldi	r30, 0x3B	; 59
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	48 2f       	mov	r20, r24
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	28 2f       	mov	r18, r24
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	02 2e       	mov	r0, r18
    1248:	02 c0       	rjmp	.+4      	; 0x124e <M_DIO_void_SetPinValue+0x182>
    124a:	88 0f       	add	r24, r24
    124c:	99 1f       	adc	r25, r25
    124e:	0a 94       	dec	r0
    1250:	e2 f7       	brpl	.-8      	; 0x124a <M_DIO_void_SetPinValue+0x17e>
    1252:	84 2b       	or	r24, r20
    1254:	8c 93       	st	X, r24
    1256:	3b c0       	rjmp	.+118    	; 0x12ce <M_DIO_void_SetPinValue+0x202>
			        	break ;             /////// break case PORTA_ID

			        	case PORTB_ID :                 /// Port B
			        		SetBit(PORTB,pin);         /// SET pin value set it to 1
    1258:	a8 e3       	ldi	r26, 0x38	; 56
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	e8 e3       	ldi	r30, 0x38	; 56
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	48 2f       	mov	r20, r24
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	02 2e       	mov	r0, r18
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <M_DIO_void_SetPinValue+0x1aa>
    1272:	88 0f       	add	r24, r24
    1274:	99 1f       	adc	r25, r25
    1276:	0a 94       	dec	r0
    1278:	e2 f7       	brpl	.-8      	; 0x1272 <M_DIO_void_SetPinValue+0x1a6>
    127a:	84 2b       	or	r24, r20
    127c:	8c 93       	st	X, r24
    127e:	27 c0       	rjmp	.+78     	; 0x12ce <M_DIO_void_SetPinValue+0x202>
			        	break ;          /////// break case PORTB_ID

			        	case PORTC_ID :                /// Port C
			        		SetBit(PORTC,pin);        /// SET pin value set it to 1
    1280:	a5 e3       	ldi	r26, 0x35	; 53
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	e5 e3       	ldi	r30, 0x35	; 53
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	48 2f       	mov	r20, r24
    128c:	8a 81       	ldd	r24, Y+2	; 0x02
    128e:	28 2f       	mov	r18, r24
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	02 2e       	mov	r0, r18
    1298:	02 c0       	rjmp	.+4      	; 0x129e <M_DIO_void_SetPinValue+0x1d2>
    129a:	88 0f       	add	r24, r24
    129c:	99 1f       	adc	r25, r25
    129e:	0a 94       	dec	r0
    12a0:	e2 f7       	brpl	.-8      	; 0x129a <M_DIO_void_SetPinValue+0x1ce>
    12a2:	84 2b       	or	r24, r20
    12a4:	8c 93       	st	X, r24
    12a6:	13 c0       	rjmp	.+38     	; 0x12ce <M_DIO_void_SetPinValue+0x202>
			        	break ;        /////// break case PORTC_ID

			        	case PORTD_ID :               /// Port D
			        		SetBit(PORTD,pin);        /// SET pin value set it to 1
    12a8:	a2 e3       	ldi	r26, 0x32	; 50
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	e2 e3       	ldi	r30, 0x32	; 50
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	48 2f       	mov	r20, r24
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	28 2f       	mov	r18, r24
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	02 2e       	mov	r0, r18
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <M_DIO_void_SetPinValue+0x1fa>
    12c2:	88 0f       	add	r24, r24
    12c4:	99 1f       	adc	r25, r25
    12c6:	0a 94       	dec	r0
    12c8:	e2 f7       	brpl	.-8      	; 0x12c2 <M_DIO_void_SetPinValue+0x1f6>
    12ca:	84 2b       	or	r24, r20
    12cc:	8c 93       	st	X, r24
		break;         /////// break case HIGH

		default:   /*  Do nothing */       break;
		///* default of switch (value) */
		}
}
    12ce:	29 96       	adiw	r28, 0x09	; 9
    12d0:	0f b6       	in	r0, 0x3f	; 63
    12d2:	f8 94       	cli
    12d4:	de bf       	out	0x3e, r29	; 62
    12d6:	0f be       	out	0x3f, r0	; 63
    12d8:	cd bf       	out	0x3d, r28	; 61
    12da:	cf 91       	pop	r28
    12dc:	df 91       	pop	r29
    12de:	08 95       	ret

000012e0 <M_DIO_void_PinTog>:
    //// Toggle Pin function //////
void M_DIO_void_PinTog(u8 port , u8 pin)
{
    12e0:	df 93       	push	r29
    12e2:	cf 93       	push	r28
    12e4:	00 d0       	rcall	.+0      	; 0x12e6 <M_DIO_void_PinTog+0x6>
    12e6:	00 d0       	rcall	.+0      	; 0x12e8 <M_DIO_void_PinTog+0x8>
    12e8:	cd b7       	in	r28, 0x3d	; 61
    12ea:	de b7       	in	r29, 0x3e	; 62
    12ec:	89 83       	std	Y+1, r24	; 0x01
    12ee:	6a 83       	std	Y+2, r22	; 0x02
	//// SWITCH too determine the Port of the Pin
	switch (port)
    12f0:	89 81       	ldd	r24, Y+1	; 0x01
    12f2:	28 2f       	mov	r18, r24
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	3c 83       	std	Y+4, r19	; 0x04
    12f8:	2b 83       	std	Y+3, r18	; 0x03
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	9c 81       	ldd	r25, Y+4	; 0x04
    12fe:	82 30       	cpi	r24, 0x02	; 2
    1300:	91 05       	cpc	r25, r1
    1302:	51 f1       	breq	.+84     	; 0x1358 <M_DIO_void_PinTog+0x78>
    1304:	2b 81       	ldd	r18, Y+3	; 0x03
    1306:	3c 81       	ldd	r19, Y+4	; 0x04
    1308:	23 30       	cpi	r18, 0x03	; 3
    130a:	31 05       	cpc	r19, r1
    130c:	34 f4       	brge	.+12     	; 0x131a <M_DIO_void_PinTog+0x3a>
    130e:	8b 81       	ldd	r24, Y+3	; 0x03
    1310:	9c 81       	ldd	r25, Y+4	; 0x04
    1312:	81 30       	cpi	r24, 0x01	; 1
    1314:	91 05       	cpc	r25, r1
    1316:	61 f0       	breq	.+24     	; 0x1330 <M_DIO_void_PinTog+0x50>
    1318:	5a c0       	rjmp	.+180    	; 0x13ce <M_DIO_void_PinTog+0xee>
    131a:	2b 81       	ldd	r18, Y+3	; 0x03
    131c:	3c 81       	ldd	r19, Y+4	; 0x04
    131e:	23 30       	cpi	r18, 0x03	; 3
    1320:	31 05       	cpc	r19, r1
    1322:	71 f1       	breq	.+92     	; 0x1380 <M_DIO_void_PinTog+0xa0>
    1324:	8b 81       	ldd	r24, Y+3	; 0x03
    1326:	9c 81       	ldd	r25, Y+4	; 0x04
    1328:	84 30       	cpi	r24, 0x04	; 4
    132a:	91 05       	cpc	r25, r1
    132c:	e9 f1       	breq	.+122    	; 0x13a8 <M_DIO_void_PinTog+0xc8>
    132e:	4f c0       	rjmp	.+158    	; 0x13ce <M_DIO_void_PinTog+0xee>
		{

		  case PORTA_ID :                           /// Port A
			  TogBit(PORTA,pin);                    /// Toggle pin value
    1330:	ab e3       	ldi	r26, 0x3B	; 59
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	eb e3       	ldi	r30, 0x3B	; 59
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	48 2f       	mov	r20, r24
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	02 2e       	mov	r0, r18
    1348:	02 c0       	rjmp	.+4      	; 0x134e <M_DIO_void_PinTog+0x6e>
    134a:	88 0f       	add	r24, r24
    134c:	99 1f       	adc	r25, r25
    134e:	0a 94       	dec	r0
    1350:	e2 f7       	brpl	.-8      	; 0x134a <M_DIO_void_PinTog+0x6a>
    1352:	84 27       	eor	r24, r20
    1354:	8c 93       	st	X, r24
    1356:	3b c0       	rjmp	.+118    	; 0x13ce <M_DIO_void_PinTog+0xee>
		  break ;                       //// break case PORTA_ID

		  case PORTB_ID :                            /// Port B
			  TogBit(PORTB,pin);                     /// Toggle pin value
    1358:	a8 e3       	ldi	r26, 0x38	; 56
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	e8 e3       	ldi	r30, 0x38	; 56
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	48 2f       	mov	r20, r24
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	28 2f       	mov	r18, r24
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	02 2e       	mov	r0, r18
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <M_DIO_void_PinTog+0x96>
    1372:	88 0f       	add	r24, r24
    1374:	99 1f       	adc	r25, r25
    1376:	0a 94       	dec	r0
    1378:	e2 f7       	brpl	.-8      	; 0x1372 <M_DIO_void_PinTog+0x92>
    137a:	84 27       	eor	r24, r20
    137c:	8c 93       	st	X, r24
    137e:	27 c0       	rjmp	.+78     	; 0x13ce <M_DIO_void_PinTog+0xee>
		  break ;                      /// / break case PORTB_ID

		  case PORTC_ID :                           /// Port C
			  TogBit(PORTC,pin);                   /// Toggle pin value
    1380:	a5 e3       	ldi	r26, 0x35	; 53
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	e5 e3       	ldi	r30, 0x35	; 53
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	48 2f       	mov	r20, r24
    138c:	8a 81       	ldd	r24, Y+2	; 0x02
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	02 2e       	mov	r0, r18
    1398:	02 c0       	rjmp	.+4      	; 0x139e <M_DIO_void_PinTog+0xbe>
    139a:	88 0f       	add	r24, r24
    139c:	99 1f       	adc	r25, r25
    139e:	0a 94       	dec	r0
    13a0:	e2 f7       	brpl	.-8      	; 0x139a <M_DIO_void_PinTog+0xba>
    13a2:	84 27       	eor	r24, r20
    13a4:	8c 93       	st	X, r24
    13a6:	13 c0       	rjmp	.+38     	; 0x13ce <M_DIO_void_PinTog+0xee>
		  break ;                       ///break case PORTC_ID

		  case PORTD_ID :                          /// Port D
			  TogBit(PORTD,pin);                    /// Toggle pin value
    13a8:	a2 e3       	ldi	r26, 0x32	; 50
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	e2 e3       	ldi	r30, 0x32	; 50
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	48 2f       	mov	r20, r24
    13b4:	8a 81       	ldd	r24, Y+2	; 0x02
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	02 2e       	mov	r0, r18
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <M_DIO_void_PinTog+0xe6>
    13c2:	88 0f       	add	r24, r24
    13c4:	99 1f       	adc	r25, r25
    13c6:	0a 94       	dec	r0
    13c8:	e2 f7       	brpl	.-8      	; 0x13c2 <M_DIO_void_PinTog+0xe2>
    13ca:	84 27       	eor	r24, r20
    13cc:	8c 93       	st	X, r24
		  break ;                       ///break case PORTD_ID

		  default :       /*  Do nothing */      break;
		  ///* default of switch (port) */
		}
}
    13ce:	0f 90       	pop	r0
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	0f 90       	pop	r0
    13d6:	cf 91       	pop	r28
    13d8:	df 91       	pop	r29
    13da:	08 95       	ret

000013dc <M_DIO_U8_PinRead>:
u8 M_DIO_U8_PinRead(u8 port , u8 pin)
{
    13dc:	df 93       	push	r29
    13de:	cf 93       	push	r28
    13e0:	00 d0       	rcall	.+0      	; 0x13e2 <M_DIO_U8_PinRead+0x6>
    13e2:	00 d0       	rcall	.+0      	; 0x13e4 <M_DIO_U8_PinRead+0x8>
    13e4:	0f 92       	push	r0
    13e6:	cd b7       	in	r28, 0x3d	; 61
    13e8:	de b7       	in	r29, 0x3e	; 62
    13ea:	8a 83       	std	Y+2, r24	; 0x02
    13ec:	6b 83       	std	Y+3, r22	; 0x03
	/// local variable
	u8 local_u8_PinValue = 0;
    13ee:	19 82       	std	Y+1, r1	; 0x01
	//// SWITCH too determine the Port of the Pin
		switch (port)
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	28 2f       	mov	r18, r24
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	3d 83       	std	Y+5, r19	; 0x05
    13f8:	2c 83       	std	Y+4, r18	; 0x04
    13fa:	4c 81       	ldd	r20, Y+4	; 0x04
    13fc:	5d 81       	ldd	r21, Y+5	; 0x05
    13fe:	42 30       	cpi	r20, 0x02	; 2
    1400:	51 05       	cpc	r21, r1
    1402:	41 f1       	breq	.+80     	; 0x1454 <M_DIO_U8_PinRead+0x78>
    1404:	8c 81       	ldd	r24, Y+4	; 0x04
    1406:	9d 81       	ldd	r25, Y+5	; 0x05
    1408:	83 30       	cpi	r24, 0x03	; 3
    140a:	91 05       	cpc	r25, r1
    140c:	34 f4       	brge	.+12     	; 0x141a <M_DIO_U8_PinRead+0x3e>
    140e:	2c 81       	ldd	r18, Y+4	; 0x04
    1410:	3d 81       	ldd	r19, Y+5	; 0x05
    1412:	21 30       	cpi	r18, 0x01	; 1
    1414:	31 05       	cpc	r19, r1
    1416:	61 f0       	breq	.+24     	; 0x1430 <M_DIO_U8_PinRead+0x54>
    1418:	52 c0       	rjmp	.+164    	; 0x14be <M_DIO_U8_PinRead+0xe2>
    141a:	4c 81       	ldd	r20, Y+4	; 0x04
    141c:	5d 81       	ldd	r21, Y+5	; 0x05
    141e:	43 30       	cpi	r20, 0x03	; 3
    1420:	51 05       	cpc	r21, r1
    1422:	51 f1       	breq	.+84     	; 0x1478 <M_DIO_U8_PinRead+0x9c>
    1424:	8c 81       	ldd	r24, Y+4	; 0x04
    1426:	9d 81       	ldd	r25, Y+5	; 0x05
    1428:	84 30       	cpi	r24, 0x04	; 4
    142a:	91 05       	cpc	r25, r1
    142c:	b9 f1       	breq	.+110    	; 0x149c <M_DIO_U8_PinRead+0xc0>
    142e:	47 c0       	rjmp	.+142    	; 0x14be <M_DIO_U8_PinRead+0xe2>
			{

			  case PORTA_ID :                           /// Port A
				  local_u8_PinValue = GetBit(PINA,pin);                    /// Read pin value
    1430:	e9 e3       	ldi	r30, 0x39	; 57
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	28 2f       	mov	r18, r24
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	88 2f       	mov	r24, r24
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	a9 01       	movw	r20, r18
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <M_DIO_U8_PinRead+0x6c>
    1444:	55 95       	asr	r21
    1446:	47 95       	ror	r20
    1448:	8a 95       	dec	r24
    144a:	e2 f7       	brpl	.-8      	; 0x1444 <M_DIO_U8_PinRead+0x68>
    144c:	ca 01       	movw	r24, r20
    144e:	81 70       	andi	r24, 0x01	; 1
    1450:	89 83       	std	Y+1, r24	; 0x01
    1452:	35 c0       	rjmp	.+106    	; 0x14be <M_DIO_U8_PinRead+0xe2>
			  break ;                       //// break case PORTA_ID

			  case PORTB_ID :                            /// Port B
				  local_u8_PinValue = GetBit(PINB,pin);                     /// Read pin value
    1454:	e6 e3       	ldi	r30, 0x36	; 54
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	28 2f       	mov	r18, r24
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	8b 81       	ldd	r24, Y+3	; 0x03
    1460:	88 2f       	mov	r24, r24
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	a9 01       	movw	r20, r18
    1466:	02 c0       	rjmp	.+4      	; 0x146c <M_DIO_U8_PinRead+0x90>
    1468:	55 95       	asr	r21
    146a:	47 95       	ror	r20
    146c:	8a 95       	dec	r24
    146e:	e2 f7       	brpl	.-8      	; 0x1468 <M_DIO_U8_PinRead+0x8c>
    1470:	ca 01       	movw	r24, r20
    1472:	81 70       	andi	r24, 0x01	; 1
    1474:	89 83       	std	Y+1, r24	; 0x01
    1476:	23 c0       	rjmp	.+70     	; 0x14be <M_DIO_U8_PinRead+0xe2>
			  break ;                      /// / break case PORTB_ID

			  case PORTC_ID :                           /// Port C
				  local_u8_PinValue = GetBit(PINC,pin);                   /// Read pin value
    1478:	e3 e3       	ldi	r30, 0x33	; 51
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	28 2f       	mov	r18, r24
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	8b 81       	ldd	r24, Y+3	; 0x03
    1484:	88 2f       	mov	r24, r24
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	a9 01       	movw	r20, r18
    148a:	02 c0       	rjmp	.+4      	; 0x1490 <M_DIO_U8_PinRead+0xb4>
    148c:	55 95       	asr	r21
    148e:	47 95       	ror	r20
    1490:	8a 95       	dec	r24
    1492:	e2 f7       	brpl	.-8      	; 0x148c <M_DIO_U8_PinRead+0xb0>
    1494:	ca 01       	movw	r24, r20
    1496:	81 70       	andi	r24, 0x01	; 1
    1498:	89 83       	std	Y+1, r24	; 0x01
    149a:	11 c0       	rjmp	.+34     	; 0x14be <M_DIO_U8_PinRead+0xe2>
			  break ;                       ///break case PORTC_ID

			  case PORTD_ID :                          /// Port D
				  local_u8_PinValue = GetBit(PIND,pin);                    /// Read pin value
    149c:	e0 e3       	ldi	r30, 0x30	; 48
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	28 2f       	mov	r18, r24
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	8b 81       	ldd	r24, Y+3	; 0x03
    14a8:	88 2f       	mov	r24, r24
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	a9 01       	movw	r20, r18
    14ae:	02 c0       	rjmp	.+4      	; 0x14b4 <M_DIO_U8_PinRead+0xd8>
    14b0:	55 95       	asr	r21
    14b2:	47 95       	ror	r20
    14b4:	8a 95       	dec	r24
    14b6:	e2 f7       	brpl	.-8      	; 0x14b0 <M_DIO_U8_PinRead+0xd4>
    14b8:	ca 01       	movw	r24, r20
    14ba:	81 70       	andi	r24, 0x01	; 1
    14bc:	89 83       	std	Y+1, r24	; 0x01
			  break ;                       ///break case PORTD_ID

			  default :       /*  Do nothing */      break;
			  ///* default of switch (port) */
			}
   return local_u8_PinValue;
    14be:	89 81       	ldd	r24, Y+1	; 0x01
}
    14c0:	0f 90       	pop	r0
    14c2:	0f 90       	pop	r0
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	0f 90       	pop	r0
    14ca:	cf 91       	pop	r28
    14cc:	df 91       	pop	r29
    14ce:	08 95       	ret

000014d0 <M_ADC_void_AdcInt>:


u16 x =0;

void M_ADC_void_AdcInt(void)
{
    14d0:	df 93       	push	r29
    14d2:	cf 93       	push	r28
    14d4:	cd b7       	in	r28, 0x3d	; 61
    14d6:	de b7       	in	r29, 0x3e	; 62
#if V_REF == AVCC
	/// Selecting voltage reference to AVCC
	// set REFS0 bit in ADMUX_REG
	SetBit(ADMUX_REG, REFS0);
    14d8:	a7 e2       	ldi	r26, 0x27	; 39
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e7 e2       	ldi	r30, 0x27	; 39
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	80 64       	ori	r24, 0x40	; 64
    14e4:	8c 93       	st	X, r24
	// clear REFS0 bit in ADMUX_REG
	ClrBit(ADMUX_REG ,REFS1);
    14e6:	a7 e2       	ldi	r26, 0x27	; 39
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	e7 e2       	ldi	r30, 0x27	; 39
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	8f 77       	andi	r24, 0x7F	; 127
    14f2:	8c 93       	st	X, r24
	// set REFS0 bit in ADMUX_REG
	SetBit(ADMUX_REG ,REFS1);
#endif
	/// selecting Adjustment  Result
	// Clear ADLAR bit on ADMUX_REG to select right adjust result
	ClrBit(ADMUX_REG , ADLAR);
    14f4:	a7 e2       	ldi	r26, 0x27	; 39
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	e7 e2       	ldi	r30, 0x27	; 39
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	8f 7d       	andi	r24, 0xDF	; 223
    1500:	8c 93       	st	X, r24
	/// selecting  channel
	// clear the four bit (MUX4 MUX3 MUX2 MUX1 MUX0 ) to select ADC0
	ClrBit(ADMUX_REG , MUX0);
    1502:	a7 e2       	ldi	r26, 0x27	; 39
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	e7 e2       	ldi	r30, 0x27	; 39
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	8e 7f       	andi	r24, 0xFE	; 254
    150e:	8c 93       	st	X, r24
	ClrBit(ADMUX_REG , MUX1);
    1510:	a7 e2       	ldi	r26, 0x27	; 39
    1512:	b0 e0       	ldi	r27, 0x00	; 0
    1514:	e7 e2       	ldi	r30, 0x27	; 39
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	8d 7f       	andi	r24, 0xFD	; 253
    151c:	8c 93       	st	X, r24
	ClrBit(ADMUX_REG , MUX2);
    151e:	a7 e2       	ldi	r26, 0x27	; 39
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	e7 e2       	ldi	r30, 0x27	; 39
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	8b 7f       	andi	r24, 0xFB	; 251
    152a:	8c 93       	st	X, r24
	ClrBit(ADMUX_REG , MUX3);
    152c:	a7 e2       	ldi	r26, 0x27	; 39
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	e7 e2       	ldi	r30, 0x27	; 39
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	87 7f       	andi	r24, 0xF7	; 247
    1538:	8c 93       	st	X, r24
	ClrBit(ADMUX_REG , MUX4);
    153a:	a7 e2       	ldi	r26, 0x27	; 39
    153c:	b0 e0       	ldi	r27, 0x00	; 0
    153e:	e7 e2       	ldi	r30, 0x27	; 39
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	8f 7e       	andi	r24, 0xEF	; 239
    1546:	8c 93       	st	X, r24

	//// select  Prescaler
	// To select 128 as devision factor C the three bit (ADPS2 ADPS1 ADPS0 ) on  ADCSRA_REG to
	SetBit(ADCSRA_REG , ADPS0 );
    1548:	a6 e2       	ldi	r26, 0x26	; 38
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	e6 e2       	ldi	r30, 0x26	; 38
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	81 60       	ori	r24, 0x01	; 1
    1554:	8c 93       	st	X, r24
	SetBit(ADCSRA_REG , ADPS1 );
    1556:	a6 e2       	ldi	r26, 0x26	; 38
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	e6 e2       	ldi	r30, 0x26	; 38
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	82 60       	ori	r24, 0x02	; 2
    1562:	8c 93       	st	X, r24
	SetBit(ADCSRA_REG , ADPS1 );
    1564:	a6 e2       	ldi	r26, 0x26	; 38
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	e6 e2       	ldi	r30, 0x26	; 38
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	82 60       	ori	r24, 0x02	; 2
    1570:	8c 93       	st	X, r24

	/// To Enable Auto Trigger mode -> free running mode
	// set ADATE bit in  ADCSRA_REG
	 SetBit(ADCSRA_REG , ADATE );
    1572:	a6 e2       	ldi	r26, 0x26	; 38
    1574:	b0 e0       	ldi	r27, 0x00	; 0
    1576:	e6 e2       	ldi	r30, 0x26	; 38
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	80 62       	ori	r24, 0x20	; 32
    157e:	8c 93       	st	X, r24
	 ClrBit(SFIOR_REG , ADTS2 );
    1580:	a0 e5       	ldi	r26, 0x50	; 80
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	e0 e5       	ldi	r30, 0x50	; 80
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	8f 77       	andi	r24, 0x7F	; 127
    158c:	8c 93       	st	X, r24
	 ClrBit(SFIOR_REG , ADTS1 );
    158e:	a0 e5       	ldi	r26, 0x50	; 80
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	e0 e5       	ldi	r30, 0x50	; 80
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	8f 7b       	andi	r24, 0xBF	; 191
    159a:	8c 93       	st	X, r24
	 ClrBit(SFIOR_REG , ADTS0 );
    159c:	a0 e5       	ldi	r26, 0x50	; 80
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	e0 e5       	ldi	r30, 0x50	; 80
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	8f 7d       	andi	r24, 0xDF	; 223
    15a8:	8c 93       	st	X, r24

	///Enable the ADC circuit
	//set bit ADEN on ADCSRA_REG
	SetBit(ADCSRA_REG , ADEN );
    15aa:	a6 e2       	ldi	r26, 0x26	; 38
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	e6 e2       	ldi	r30, 0x26	; 38
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	80 68       	ori	r24, 0x80	; 128
    15b6:	8c 93       	st	X, r24
	SetBit(ADCSRA_REG ,ADSC );     //// to start conversion
    M_GIE_void_GIE_EN();          //// to enable  general interrupt
	SetBit(ADCSRA_REG ,ADIE );   //// to enable  ADC interrupt

#endif
}
    15b8:	cf 91       	pop	r28
    15ba:	df 91       	pop	r29
    15bc:	08 95       	ret

000015be <M_ADC_u16_AdcRead>:
#if  ADC_MODE ==  ADC_POL
u16 M_ADC_u16_AdcRead(void)
{
    15be:	df 93       	push	r29
    15c0:	cf 93       	push	r28
    15c2:	cd b7       	in	r28, 0x3d	; 61
    15c4:	de b7       	in	r29, 0x3e	; 62
	//u16 Local_u16_value = 0;
	////////to start conversion
	//set ADSC bit in  ADCSRA_REG
	SetBit(ADCSRA_REG ,ADSC );
    15c6:	a6 e2       	ldi	r26, 0x26	; 38
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	e6 e2       	ldi	r30, 0x26	; 38
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	80 64       	ori	r24, 0x40	; 64
    15d2:	8c 93       	st	X, r24

   /// check  ADC Interrupt Flag to see if conversion completed or not
  	while(GetBit(ADCSRA_REG, ADIF) == 0);
    15d4:	e6 e2       	ldi	r30, 0x26	; 38
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	82 95       	swap	r24
    15dc:	8f 70       	andi	r24, 0x0F	; 15
    15de:	88 2f       	mov	r24, r24
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	81 70       	andi	r24, 0x01	; 1
    15e4:	90 70       	andi	r25, 0x00	; 0
    15e6:	00 97       	sbiw	r24, 0x00	; 0
    15e8:	a9 f3       	breq	.-22     	; 0x15d4 <M_ADC_u16_AdcRead+0x16>
	return ADC_REG ;
    15ea:	e4 e2       	ldi	r30, 0x24	; 36
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	91 81       	ldd	r25, Z+1	; 0x01
}
    15f2:	cf 91       	pop	r28
    15f4:	df 91       	pop	r29
    15f6:	08 95       	ret

000015f8 <H_TEMPSENSOR_void_TempSensorInt>:
 *      Author: AbdelRahman Atef
 */
#include "DIO_Int.h"
#include "TEMPSENSOR_Int.h"
void H_TEMPSENSOR_void_TempSensorInt(void)
{
    15f8:	df 93       	push	r29
    15fa:	cf 93       	push	r28
    15fc:	cd b7       	in	r28, 0x3d	; 61
    15fe:	de b7       	in	r29, 0x3e	; 62
     M_DIO_void_SetPinDirection(PORTA_ID, PIN0, INPUT);
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	60 e0       	ldi	r22, 0x00	; 0
    1604:	40 e0       	ldi	r20, 0x00	; 0
    1606:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <M_DIO_void_SetPinDirection>
}
    160a:	cf 91       	pop	r28
    160c:	df 91       	pop	r29
    160e:	08 95       	ret

00001610 <H_TEMPSENSOR_void_TempSensorRead>:
u8 H_TEMPSENSOR_void_TempSensorRead(void)
{
    1610:	df 93       	push	r29
    1612:	cf 93       	push	r28
    1614:	00 d0       	rcall	.+0      	; 0x1616 <H_TEMPSENSOR_void_TempSensorRead+0x6>
    1616:	cd b7       	in	r28, 0x3d	; 61
    1618:	de b7       	in	r29, 0x3e	; 62
  u8 local_u8_AdcReading=0;
    161a:	1a 82       	std	Y+2, r1	; 0x02
  local_u8_AdcReading = M_ADC_u16_AdcRead();
    161c:	0e 94 df 0a 	call	0x15be	; 0x15be <M_ADC_u16_AdcRead>
    1620:	8a 83       	std	Y+2, r24	; 0x02
  u8 Temp =	  (((u32)local_u8_AdcReading * 500 )/1023);
    1622:	8a 81       	ldd	r24, Y+2	; 0x02
    1624:	88 2f       	mov	r24, r24
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	a0 e0       	ldi	r26, 0x00	; 0
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	24 ef       	ldi	r18, 0xF4	; 244
    162e:	31 e0       	ldi	r19, 0x01	; 1
    1630:	40 e0       	ldi	r20, 0x00	; 0
    1632:	50 e0       	ldi	r21, 0x00	; 0
    1634:	bc 01       	movw	r22, r24
    1636:	cd 01       	movw	r24, r26
    1638:	0e 94 c4 1e 	call	0x3d88	; 0x3d88 <__mulsi3>
    163c:	dc 01       	movw	r26, r24
    163e:	cb 01       	movw	r24, r22
    1640:	2f ef       	ldi	r18, 0xFF	; 255
    1642:	33 e0       	ldi	r19, 0x03	; 3
    1644:	40 e0       	ldi	r20, 0x00	; 0
    1646:	50 e0       	ldi	r21, 0x00	; 0
    1648:	bc 01       	movw	r22, r24
    164a:	cd 01       	movw	r24, r26
    164c:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <__udivmodsi4>
    1650:	da 01       	movw	r26, r20
    1652:	c9 01       	movw	r24, r18
    1654:	89 83       	std	Y+1, r24	; 0x01
  return Temp;
    1656:	89 81       	ldd	r24, Y+1	; 0x01
}
    1658:	0f 90       	pop	r0
    165a:	0f 90       	pop	r0
    165c:	cf 91       	pop	r28
    165e:	df 91       	pop	r29
    1660:	08 95       	ret

00001662 <H_SSD_Void_SsdInt>:

#include "SSD_int.h"

///******************_Initialization Function to Set Pins direction_***********///
void H_SSD_Void_SsdInt(void)
{
    1662:	df 93       	push	r29
    1664:	cf 93       	push	r28
    1666:	cd b7       	in	r28, 0x3d	; 61
    1668:	de b7       	in	r29, 0x3e	; 62
	///******_Setting SSEG_LED_A_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_LED_A_PORT, SSEG_LED_A_PIN, OUTPUT);
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	60 e0       	ldi	r22, 0x00	; 0
    166e:	41 e0       	ldi	r20, 0x01	; 1
    1670:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <M_DIO_void_SetPinDirection>
	///******_Setting SSEG_LED_B_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_LED_B_PORT, SSEG_LED_B_PIN, OUTPUT);
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	61 e0       	ldi	r22, 0x01	; 1
    1678:	41 e0       	ldi	r20, 0x01	; 1
    167a:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <M_DIO_void_SetPinDirection>
	///******_Setting SSEG_LED_C_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_LED_C_PORT, SSEG_LED_C_PIN, OUTPUT);
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	62 e0       	ldi	r22, 0x02	; 2
    1682:	41 e0       	ldi	r20, 0x01	; 1
    1684:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <M_DIO_void_SetPinDirection>
	///******_Setting SSEG_LED_D_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_LED_D_PORT, SSEG_LED_D_PIN, OUTPUT);
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	63 e0       	ldi	r22, 0x03	; 3
    168c:	41 e0       	ldi	r20, 0x01	; 1
    168e:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <M_DIO_void_SetPinDirection>
	///******_Setting SSEG_LED_E_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_LED_E_PORT, SSEG_LED_E_PIN, OUTPUT);
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	64 e0       	ldi	r22, 0x04	; 4
    1696:	41 e0       	ldi	r20, 0x01	; 1
    1698:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <M_DIO_void_SetPinDirection>
	///******_Setting SSEG_LED_F_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_LED_F_PORT, SSEG_LED_F_PIN, OUTPUT);
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	65 e0       	ldi	r22, 0x05	; 5
    16a0:	41 e0       	ldi	r20, 0x01	; 1
    16a2:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <M_DIO_void_SetPinDirection>
	///******_Setting SSEG_LED_G_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_LED_G_PORT, SSEG_LED_G_PIN, OUTPUT);
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	66 e0       	ldi	r22, 0x06	; 6
    16aa:	41 e0       	ldi	r20, 0x01	; 1
    16ac:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <M_DIO_void_SetPinDirection>

	///******_Setting SSEG_DOT_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_DOT_PORT  , SSEG_DOT_PIN  , OUTPUT);
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	67 e0       	ldi	r22, 0x07	; 7
    16b4:	41 e0       	ldi	r20, 0x01	; 1
    16b6:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <M_DIO_void_SetPinDirection>


	///******_Setting SSEG_EN1_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_EN1_PORT  , SSEG_EN1_PIN   , OUTPUT);
    16ba:	83 e0       	ldi	r24, 0x03	; 3
    16bc:	66 e0       	ldi	r22, 0x06	; 6
    16be:	41 e0       	ldi	r20, 0x01	; 1
    16c0:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <M_DIO_void_SetPinDirection>
	///******_Setting SSEG_EN2_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_EN2_PORT  , SSEG_EN2_PIN   , OUTPUT);
    16c4:	83 e0       	ldi	r24, 0x03	; 3
    16c6:	67 e0       	ldi	r22, 0x07	; 7
    16c8:	41 e0       	ldi	r20, 0x01	; 1
    16ca:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <M_DIO_void_SetPinDirection>


}
    16ce:	cf 91       	pop	r28
    16d0:	df 91       	pop	r29
    16d2:	08 95       	ret

000016d4 <H_SSD_Void_SsdDisplay>:

void H_SSD_Void_SsdDisplay(u8 Local_u8_Num)
{
    16d4:	df 93       	push	r29
    16d6:	cf 93       	push	r28
    16d8:	cd b7       	in	r28, 0x3d	; 61
    16da:	de b7       	in	r29, 0x3e	; 62
    16dc:	a4 97       	sbiw	r28, 0x24	; 36
    16de:	0f b6       	in	r0, 0x3f	; 63
    16e0:	f8 94       	cli
    16e2:	de bf       	out	0x3e, r29	; 62
    16e4:	0f be       	out	0x3f, r0	; 63
    16e6:	cd bf       	out	0x3d, r28	; 61
    16e8:	88 a3       	std	Y+32, r24	; 0x20
  ///***** Local_u8_Units is a local variable to get Units number *******//
	 u8 Local_u8_Units = Local_u8_Num %10;
    16ea:	88 a1       	ldd	r24, Y+32	; 0x20
    16ec:	9a e0       	ldi	r25, 0x0A	; 10
    16ee:	69 2f       	mov	r22, r25
    16f0:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <__udivmodqi4>
    16f4:	89 2f       	mov	r24, r25
    16f6:	8f 8f       	std	Y+31, r24	; 0x1f
 ///***** Local_u8_Tens is a local variable to get Tens number *******//
	 u8 Local_u8_Tens  = Local_u8_Num / 10;
    16f8:	88 a1       	ldd	r24, Y+32	; 0x20
    16fa:	9a e0       	ldi	r25, 0x0A	; 10
    16fc:	69 2f       	mov	r22, r25
    16fe:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <__udivmodqi4>
    1702:	8e 8f       	std	Y+30, r24	; 0x1e
	 u8 Local_U8_Conter ;
	 ///*******for loop to Repeat  the number displayed  to be able to see it*******///
	 for (Local_U8_Conter=0;Local_U8_Conter<200;Local_U8_Conter++)
    1704:	1d 8e       	std	Y+29, r1	; 0x1d
    1706:	77 c4       	rjmp	.+2286   	; 0x1ff6 <H_SSD_Void_SsdDisplay+0x922>
	 	{
///********* switch case to Display the Units number ***********//
	 switch (Local_u8_Units)
    1708:	8f 8d       	ldd	r24, Y+31	; 0x1f
    170a:	28 2f       	mov	r18, r24
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	3c a3       	std	Y+36, r19	; 0x24
    1710:	2b a3       	std	Y+35, r18	; 0x23
    1712:	8b a1       	ldd	r24, Y+35	; 0x23
    1714:	9c a1       	ldd	r25, Y+36	; 0x24
    1716:	84 30       	cpi	r24, 0x04	; 4
    1718:	91 05       	cpc	r25, r1
    171a:	09 f4       	brne	.+2      	; 0x171e <H_SSD_Void_SsdDisplay+0x4a>
    171c:	d7 c0       	rjmp	.+430    	; 0x18cc <H_SSD_Void_SsdDisplay+0x1f8>
    171e:	2b a1       	ldd	r18, Y+35	; 0x23
    1720:	3c a1       	ldd	r19, Y+36	; 0x24
    1722:	25 30       	cpi	r18, 0x05	; 5
    1724:	31 05       	cpc	r19, r1
    1726:	ec f4       	brge	.+58     	; 0x1762 <H_SSD_Void_SsdDisplay+0x8e>
    1728:	8b a1       	ldd	r24, Y+35	; 0x23
    172a:	9c a1       	ldd	r25, Y+36	; 0x24
    172c:	81 30       	cpi	r24, 0x01	; 1
    172e:	91 05       	cpc	r25, r1
    1730:	09 f4       	brne	.+2      	; 0x1734 <H_SSD_Void_SsdDisplay+0x60>
    1732:	60 c0       	rjmp	.+192    	; 0x17f4 <H_SSD_Void_SsdDisplay+0x120>
    1734:	2b a1       	ldd	r18, Y+35	; 0x23
    1736:	3c a1       	ldd	r19, Y+36	; 0x24
    1738:	22 30       	cpi	r18, 0x02	; 2
    173a:	31 05       	cpc	r19, r1
    173c:	2c f4       	brge	.+10     	; 0x1748 <H_SSD_Void_SsdDisplay+0x74>
    173e:	8b a1       	ldd	r24, Y+35	; 0x23
    1740:	9c a1       	ldd	r25, Y+36	; 0x24
    1742:	00 97       	sbiw	r24, 0x00	; 0
    1744:	99 f1       	breq	.+102    	; 0x17ac <H_SSD_Void_SsdDisplay+0xd8>
    1746:	99 c1       	rjmp	.+818    	; 0x1a7a <H_SSD_Void_SsdDisplay+0x3a6>
    1748:	2b a1       	ldd	r18, Y+35	; 0x23
    174a:	3c a1       	ldd	r19, Y+36	; 0x24
    174c:	22 30       	cpi	r18, 0x02	; 2
    174e:	31 05       	cpc	r19, r1
    1750:	09 f4       	brne	.+2      	; 0x1754 <H_SSD_Void_SsdDisplay+0x80>
    1752:	74 c0       	rjmp	.+232    	; 0x183c <H_SSD_Void_SsdDisplay+0x168>
    1754:	8b a1       	ldd	r24, Y+35	; 0x23
    1756:	9c a1       	ldd	r25, Y+36	; 0x24
    1758:	83 30       	cpi	r24, 0x03	; 3
    175a:	91 05       	cpc	r25, r1
    175c:	09 f4       	brne	.+2      	; 0x1760 <H_SSD_Void_SsdDisplay+0x8c>
    175e:	92 c0       	rjmp	.+292    	; 0x1884 <H_SSD_Void_SsdDisplay+0x1b0>
    1760:	8c c1       	rjmp	.+792    	; 0x1a7a <H_SSD_Void_SsdDisplay+0x3a6>
    1762:	2b a1       	ldd	r18, Y+35	; 0x23
    1764:	3c a1       	ldd	r19, Y+36	; 0x24
    1766:	27 30       	cpi	r18, 0x07	; 7
    1768:	31 05       	cpc	r19, r1
    176a:	09 f4       	brne	.+2      	; 0x176e <H_SSD_Void_SsdDisplay+0x9a>
    176c:	1b c1       	rjmp	.+566    	; 0x19a4 <H_SSD_Void_SsdDisplay+0x2d0>
    176e:	8b a1       	ldd	r24, Y+35	; 0x23
    1770:	9c a1       	ldd	r25, Y+36	; 0x24
    1772:	88 30       	cpi	r24, 0x08	; 8
    1774:	91 05       	cpc	r25, r1
    1776:	6c f4       	brge	.+26     	; 0x1792 <H_SSD_Void_SsdDisplay+0xbe>
    1778:	2b a1       	ldd	r18, Y+35	; 0x23
    177a:	3c a1       	ldd	r19, Y+36	; 0x24
    177c:	25 30       	cpi	r18, 0x05	; 5
    177e:	31 05       	cpc	r19, r1
    1780:	09 f4       	brne	.+2      	; 0x1784 <H_SSD_Void_SsdDisplay+0xb0>
    1782:	c8 c0       	rjmp	.+400    	; 0x1914 <H_SSD_Void_SsdDisplay+0x240>
    1784:	8b a1       	ldd	r24, Y+35	; 0x23
    1786:	9c a1       	ldd	r25, Y+36	; 0x24
    1788:	86 30       	cpi	r24, 0x06	; 6
    178a:	91 05       	cpc	r25, r1
    178c:	09 f4       	brne	.+2      	; 0x1790 <H_SSD_Void_SsdDisplay+0xbc>
    178e:	e6 c0       	rjmp	.+460    	; 0x195c <H_SSD_Void_SsdDisplay+0x288>
    1790:	74 c1       	rjmp	.+744    	; 0x1a7a <H_SSD_Void_SsdDisplay+0x3a6>
    1792:	2b a1       	ldd	r18, Y+35	; 0x23
    1794:	3c a1       	ldd	r19, Y+36	; 0x24
    1796:	28 30       	cpi	r18, 0x08	; 8
    1798:	31 05       	cpc	r19, r1
    179a:	09 f4       	brne	.+2      	; 0x179e <H_SSD_Void_SsdDisplay+0xca>
    179c:	27 c1       	rjmp	.+590    	; 0x19ec <H_SSD_Void_SsdDisplay+0x318>
    179e:	8b a1       	ldd	r24, Y+35	; 0x23
    17a0:	9c a1       	ldd	r25, Y+36	; 0x24
    17a2:	89 30       	cpi	r24, 0x09	; 9
    17a4:	91 05       	cpc	r25, r1
    17a6:	09 f4       	brne	.+2      	; 0x17aa <H_SSD_Void_SsdDisplay+0xd6>
    17a8:	45 c1       	rjmp	.+650    	; 0x1a34 <H_SSD_Void_SsdDisplay+0x360>
    17aa:	67 c1       	rjmp	.+718    	; 0x1a7a <H_SSD_Void_SsdDisplay+0x3a6>
	 {
	 ///**case number is 0 turn on all SSD_LEDs_ and turn off  SSD_LED_G
	  case   0:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	60 e0       	ldi	r22, 0x00	; 0
    17b0:	41 e0       	ldi	r20, 0x01	; 1
    17b2:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	61 e0       	ldi	r22, 0x01	; 1
    17ba:	41 e0       	ldi	r20, 0x01	; 1
    17bc:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	62 e0       	ldi	r22, 0x02	; 2
    17c4:	41 e0       	ldi	r20, 0x01	; 1
    17c6:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	63 e0       	ldi	r22, 0x03	; 3
    17ce:	41 e0       	ldi	r20, 0x01	; 1
    17d0:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN , HIGH);
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	64 e0       	ldi	r22, 0x04	; 4
    17d8:	41 e0       	ldi	r20, 0x01	; 1
    17da:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	65 e0       	ldi	r22, 0x05	; 5
    17e2:	41 e0       	ldi	r20, 0x01	; 1
    17e4:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN ,  LOW);
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	66 e0       	ldi	r22, 0x06	; 6
    17ec:	40 e0       	ldi	r20, 0x00	; 0
    17ee:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
    17f2:	43 c1       	rjmp	.+646    	; 0x1a7a <H_SSD_Void_SsdDisplay+0x3a6>
	  break;
	  ///**case number is 1 turn on  SSD_LED_B and SSD_LED_C****//
	  case   1:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN ,  LOW);
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	60 e0       	ldi	r22, 0x00	; 0
    17f8:	40 e0       	ldi	r20, 0x00	; 0
    17fa:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	61 e0       	ldi	r22, 0x01	; 1
    1802:	41 e0       	ldi	r20, 0x01	; 1
    1804:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	62 e0       	ldi	r22, 0x02	; 2
    180c:	41 e0       	ldi	r20, 0x01	; 1
    180e:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN ,  LOW);
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	63 e0       	ldi	r22, 0x03	; 3
    1816:	40 e0       	ldi	r20, 0x00	; 0
    1818:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	64 e0       	ldi	r22, 0x04	; 4
    1820:	40 e0       	ldi	r20, 0x00	; 0
    1822:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN ,  LOW);
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	65 e0       	ldi	r22, 0x05	; 5
    182a:	40 e0       	ldi	r20, 0x00	; 0
    182c:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN ,  LOW);
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	66 e0       	ldi	r22, 0x06	; 6
    1834:	40 e0       	ldi	r20, 0x00	; 0
    1836:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
    183a:	1f c1       	rjmp	.+574    	; 0x1a7a <H_SSD_Void_SsdDisplay+0x3a6>
	  break;
    ///**case number is 2 turn on all LEDs_ and turn off LED_C & LED_F**//
	  case   2:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	60 e0       	ldi	r22, 0x00	; 0
    1840:	41 e0       	ldi	r20, 0x01	; 1
    1842:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	61 e0       	ldi	r22, 0x01	; 1
    184a:	41 e0       	ldi	r20, 0x01	; 1
    184c:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN ,  LOW);
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	62 e0       	ldi	r22, 0x02	; 2
    1854:	40 e0       	ldi	r20, 0x00	; 0
    1856:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	63 e0       	ldi	r22, 0x03	; 3
    185e:	41 e0       	ldi	r20, 0x01	; 1
    1860:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN , HIGH);
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	64 e0       	ldi	r22, 0x04	; 4
    1868:	41 e0       	ldi	r20, 0x01	; 1
    186a:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN ,  LOW);
    186e:	81 e0       	ldi	r24, 0x01	; 1
    1870:	65 e0       	ldi	r22, 0x05	; 5
    1872:	40 e0       	ldi	r20, 0x00	; 0
    1874:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	66 e0       	ldi	r22, 0x06	; 6
    187c:	41 e0       	ldi	r20, 0x01	; 1
    187e:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
    1882:	fb c0       	rjmp	.+502    	; 0x1a7a <H_SSD_Void_SsdDisplay+0x3a6>
	  break;
	///**case number is 3 turn on all LEDs_ and turn off LED_E & LED_F**//
	  case   3:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	60 e0       	ldi	r22, 0x00	; 0
    1888:	41 e0       	ldi	r20, 0x01	; 1
    188a:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	61 e0       	ldi	r22, 0x01	; 1
    1892:	41 e0       	ldi	r20, 0x01	; 1
    1894:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	62 e0       	ldi	r22, 0x02	; 2
    189c:	41 e0       	ldi	r20, 0x01	; 1
    189e:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    18a2:	81 e0       	ldi	r24, 0x01	; 1
    18a4:	63 e0       	ldi	r22, 0x03	; 3
    18a6:	41 e0       	ldi	r20, 0x01	; 1
    18a8:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	64 e0       	ldi	r22, 0x04	; 4
    18b0:	40 e0       	ldi	r20, 0x00	; 0
    18b2:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN ,  LOW);
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	65 e0       	ldi	r22, 0x05	; 5
    18ba:	40 e0       	ldi	r20, 0x00	; 0
    18bc:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	66 e0       	ldi	r22, 0x06	; 6
    18c4:	41 e0       	ldi	r20, 0x01	; 1
    18c6:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
    18ca:	d7 c0       	rjmp	.+430    	; 0x1a7a <H_SSD_Void_SsdDisplay+0x3a6>
	  break;
  ///**case number is 4 turn on all LEDs_ and turn off LED_A,LED_D& LED_E**//
	  case   4:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN ,  LOW);
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	60 e0       	ldi	r22, 0x00	; 0
    18d0:	40 e0       	ldi	r20, 0x00	; 0
    18d2:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	61 e0       	ldi	r22, 0x01	; 1
    18da:	41 e0       	ldi	r20, 0x01	; 1
    18dc:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	62 e0       	ldi	r22, 0x02	; 2
    18e4:	41 e0       	ldi	r20, 0x01	; 1
    18e6:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN ,  LOW);
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	63 e0       	ldi	r22, 0x03	; 3
    18ee:	40 e0       	ldi	r20, 0x00	; 0
    18f0:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	64 e0       	ldi	r22, 0x04	; 4
    18f8:	40 e0       	ldi	r20, 0x00	; 0
    18fa:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	65 e0       	ldi	r22, 0x05	; 5
    1902:	41 e0       	ldi	r20, 0x01	; 1
    1904:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	66 e0       	ldi	r22, 0x06	; 6
    190c:	41 e0       	ldi	r20, 0x01	; 1
    190e:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
    1912:	b3 c0       	rjmp	.+358    	; 0x1a7a <H_SSD_Void_SsdDisplay+0x3a6>
	  break;
 ///**case number is 5 turn on all LEDs_ and turn off LED_B & LED_E**//
	  case   5:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	60 e0       	ldi	r22, 0x00	; 0
    1918:	41 e0       	ldi	r20, 0x01	; 1
    191a:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN ,  LOW);
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	61 e0       	ldi	r22, 0x01	; 1
    1922:	40 e0       	ldi	r20, 0x00	; 0
    1924:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	62 e0       	ldi	r22, 0x02	; 2
    192c:	41 e0       	ldi	r20, 0x01	; 1
    192e:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	63 e0       	ldi	r22, 0x03	; 3
    1936:	41 e0       	ldi	r20, 0x01	; 1
    1938:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	64 e0       	ldi	r22, 0x04	; 4
    1940:	40 e0       	ldi	r20, 0x00	; 0
    1942:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    1946:	81 e0       	ldi	r24, 0x01	; 1
    1948:	65 e0       	ldi	r22, 0x05	; 5
    194a:	41 e0       	ldi	r20, 0x01	; 1
    194c:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	66 e0       	ldi	r22, 0x06	; 6
    1954:	41 e0       	ldi	r20, 0x01	; 1
    1956:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
    195a:	8f c0       	rjmp	.+286    	; 0x1a7a <H_SSD_Void_SsdDisplay+0x3a6>
	  break;
 ///**case number is 6 turn on all LEDs_ and turn off LED_F**//
	  case   6:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	60 e0       	ldi	r22, 0x00	; 0
    1960:	41 e0       	ldi	r20, 0x01	; 1
    1962:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	61 e0       	ldi	r22, 0x01	; 1
    196a:	41 e0       	ldi	r20, 0x01	; 1
    196c:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	62 e0       	ldi	r22, 0x02	; 2
    1974:	41 e0       	ldi	r20, 0x01	; 1
    1976:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	63 e0       	ldi	r22, 0x03	; 3
    197e:	41 e0       	ldi	r20, 0x01	; 1
    1980:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN , HIGH);
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	64 e0       	ldi	r22, 0x04	; 4
    1988:	41 e0       	ldi	r20, 0x01	; 1
    198a:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN ,  LOW);
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	65 e0       	ldi	r22, 0x05	; 5
    1992:	40 e0       	ldi	r20, 0x00	; 0
    1994:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	66 e0       	ldi	r22, 0x06	; 6
    199c:	41 e0       	ldi	r20, 0x01	; 1
    199e:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
    19a2:	6b c0       	rjmp	.+214    	; 0x1a7a <H_SSD_Void_SsdDisplay+0x3a6>
	  break;
 ///**case number is 7 turn on all LEDs_ and turn off LED_D,LED_E& LED_G**//
	  case   7:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	60 e0       	ldi	r22, 0x00	; 0
    19a8:	41 e0       	ldi	r20, 0x01	; 1
    19aa:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	61 e0       	ldi	r22, 0x01	; 1
    19b2:	41 e0       	ldi	r20, 0x01	; 1
    19b4:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	62 e0       	ldi	r22, 0x02	; 2
    19bc:	41 e0       	ldi	r20, 0x01	; 1
    19be:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN ,  LOW);
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	63 e0       	ldi	r22, 0x03	; 3
    19c6:	40 e0       	ldi	r20, 0x00	; 0
    19c8:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	64 e0       	ldi	r22, 0x04	; 4
    19d0:	40 e0       	ldi	r20, 0x00	; 0
    19d2:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	65 e0       	ldi	r22, 0x05	; 5
    19da:	41 e0       	ldi	r20, 0x01	; 1
    19dc:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN ,  LOW);
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	66 e0       	ldi	r22, 0x06	; 6
    19e4:	40 e0       	ldi	r20, 0x00	; 0
    19e6:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
    19ea:	47 c0       	rjmp	.+142    	; 0x1a7a <H_SSD_Void_SsdDisplay+0x3a6>
	  break;
 ///**case number is 8 turn on all LEDs_ ****************************//
	  case   8:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	60 e0       	ldi	r22, 0x00	; 0
    19f0:	41 e0       	ldi	r20, 0x01	; 1
    19f2:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	61 e0       	ldi	r22, 0x01	; 1
    19fa:	41 e0       	ldi	r20, 0x01	; 1
    19fc:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	62 e0       	ldi	r22, 0x02	; 2
    1a04:	41 e0       	ldi	r20, 0x01	; 1
    1a06:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	63 e0       	ldi	r22, 0x03	; 3
    1a0e:	41 e0       	ldi	r20, 0x01	; 1
    1a10:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN , HIGH);
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	64 e0       	ldi	r22, 0x04	; 4
    1a18:	41 e0       	ldi	r20, 0x01	; 1
    1a1a:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	65 e0       	ldi	r22, 0x05	; 5
    1a22:	41 e0       	ldi	r20, 0x01	; 1
    1a24:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	66 e0       	ldi	r22, 0x06	; 6
    1a2c:	41 e0       	ldi	r20, 0x01	; 1
    1a2e:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
    1a32:	23 c0       	rjmp	.+70     	; 0x1a7a <H_SSD_Void_SsdDisplay+0x3a6>
	  break;
  ///**case number is 9 turn on all LEDs_ and turn off  LED_E**//
	  case   9:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	60 e0       	ldi	r22, 0x00	; 0
    1a38:	41 e0       	ldi	r20, 0x01	; 1
    1a3a:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	61 e0       	ldi	r22, 0x01	; 1
    1a42:	41 e0       	ldi	r20, 0x01	; 1
    1a44:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	62 e0       	ldi	r22, 0x02	; 2
    1a4c:	41 e0       	ldi	r20, 0x01	; 1
    1a4e:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	63 e0       	ldi	r22, 0x03	; 3
    1a56:	41 e0       	ldi	r20, 0x01	; 1
    1a58:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	64 e0       	ldi	r22, 0x04	; 4
    1a60:	40 e0       	ldi	r20, 0x00	; 0
    1a62:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	65 e0       	ldi	r22, 0x05	; 5
    1a6a:	41 e0       	ldi	r20, 0x01	; 1
    1a6c:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	66 e0       	ldi	r22, 0x06	; 6
    1a74:	41 e0       	ldi	r20, 0x01	; 1
    1a76:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
  * To get units Numbers displayed on
  * Enable the SSEG_EN1_PIN = SetBit LOW
  * and
  * Disable the SSEG_EN2_PIN = SetBit HIGH
  */
	 M_DIO_void_SetPinValue(SSEG_EN1_PORT, SSEG_EN1_PIN,  LOW);
    1a7a:	83 e0       	ldi	r24, 0x03	; 3
    1a7c:	66 e0       	ldi	r22, 0x06	; 6
    1a7e:	40 e0       	ldi	r20, 0x00	; 0
    1a80:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
	 M_DIO_void_SetPinValue(SSEG_EN2_PORT, SSEG_EN2_PIN, HIGH);
    1a84:	83 e0       	ldi	r24, 0x03	; 3
    1a86:	67 e0       	ldi	r22, 0x07	; 7
    1a88:	41 e0       	ldi	r20, 0x01	; 1
    1a8a:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
    1a8e:	80 e0       	ldi	r24, 0x00	; 0
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	a0 e8       	ldi	r26, 0x80	; 128
    1a94:	bf e3       	ldi	r27, 0x3F	; 63
    1a96:	89 8f       	std	Y+25, r24	; 0x19
    1a98:	9a 8f       	std	Y+26, r25	; 0x1a
    1a9a:	ab 8f       	std	Y+27, r26	; 0x1b
    1a9c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a9e:	69 8d       	ldd	r22, Y+25	; 0x19
    1aa0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1aa2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1aa4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	4a e7       	ldi	r20, 0x7A	; 122
    1aac:	53 e4       	ldi	r21, 0x43	; 67
    1aae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab2:	dc 01       	movw	r26, r24
    1ab4:	cb 01       	movw	r24, r22
    1ab6:	8d 8b       	std	Y+21, r24	; 0x15
    1ab8:	9e 8b       	std	Y+22, r25	; 0x16
    1aba:	af 8b       	std	Y+23, r26	; 0x17
    1abc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1abe:	6d 89       	ldd	r22, Y+21	; 0x15
    1ac0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ac2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ac4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	40 e8       	ldi	r20, 0x80	; 128
    1acc:	5f e3       	ldi	r21, 0x3F	; 63
    1ace:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ad2:	88 23       	and	r24, r24
    1ad4:	2c f4       	brge	.+10     	; 0x1ae0 <H_SSD_Void_SsdDisplay+0x40c>
		__ticks = 1;
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	9c 8b       	std	Y+20, r25	; 0x14
    1adc:	8b 8b       	std	Y+19, r24	; 0x13
    1ade:	3f c0       	rjmp	.+126    	; 0x1b5e <H_SSD_Void_SsdDisplay+0x48a>
	else if (__tmp > 65535)
    1ae0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ae2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ae4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ae6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	3f ef       	ldi	r19, 0xFF	; 255
    1aec:	4f e7       	ldi	r20, 0x7F	; 127
    1aee:	57 e4       	ldi	r21, 0x47	; 71
    1af0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1af4:	18 16       	cp	r1, r24
    1af6:	4c f5       	brge	.+82     	; 0x1b4a <H_SSD_Void_SsdDisplay+0x476>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af8:	69 8d       	ldd	r22, Y+25	; 0x19
    1afa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1afc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1afe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	40 e2       	ldi	r20, 0x20	; 32
    1b06:	51 e4       	ldi	r21, 0x41	; 65
    1b08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	cb 01       	movw	r24, r22
    1b10:	bc 01       	movw	r22, r24
    1b12:	cd 01       	movw	r24, r26
    1b14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b18:	dc 01       	movw	r26, r24
    1b1a:	cb 01       	movw	r24, r22
    1b1c:	9c 8b       	std	Y+20, r25	; 0x14
    1b1e:	8b 8b       	std	Y+19, r24	; 0x13
    1b20:	0f c0       	rjmp	.+30     	; 0x1b40 <H_SSD_Void_SsdDisplay+0x46c>
    1b22:	89 e1       	ldi	r24, 0x19	; 25
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	9a 8b       	std	Y+18, r25	; 0x12
    1b28:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b2a:	89 89       	ldd	r24, Y+17	; 0x11
    1b2c:	9a 89       	ldd	r25, Y+18	; 0x12
    1b2e:	01 97       	sbiw	r24, 0x01	; 1
    1b30:	f1 f7       	brne	.-4      	; 0x1b2e <H_SSD_Void_SsdDisplay+0x45a>
    1b32:	9a 8b       	std	Y+18, r25	; 0x12
    1b34:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b36:	8b 89       	ldd	r24, Y+19	; 0x13
    1b38:	9c 89       	ldd	r25, Y+20	; 0x14
    1b3a:	01 97       	sbiw	r24, 0x01	; 1
    1b3c:	9c 8b       	std	Y+20, r25	; 0x14
    1b3e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b40:	8b 89       	ldd	r24, Y+19	; 0x13
    1b42:	9c 89       	ldd	r25, Y+20	; 0x14
    1b44:	00 97       	sbiw	r24, 0x00	; 0
    1b46:	69 f7       	brne	.-38     	; 0x1b22 <H_SSD_Void_SsdDisplay+0x44e>
    1b48:	14 c0       	rjmp	.+40     	; 0x1b72 <H_SSD_Void_SsdDisplay+0x49e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b4a:	6d 89       	ldd	r22, Y+21	; 0x15
    1b4c:	7e 89       	ldd	r23, Y+22	; 0x16
    1b4e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b50:	98 8d       	ldd	r25, Y+24	; 0x18
    1b52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b56:	dc 01       	movw	r26, r24
    1b58:	cb 01       	movw	r24, r22
    1b5a:	9c 8b       	std	Y+20, r25	; 0x14
    1b5c:	8b 8b       	std	Y+19, r24	; 0x13
    1b5e:	8b 89       	ldd	r24, Y+19	; 0x13
    1b60:	9c 89       	ldd	r25, Y+20	; 0x14
    1b62:	98 8b       	std	Y+16, r25	; 0x10
    1b64:	8f 87       	std	Y+15, r24	; 0x0f
    1b66:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b68:	98 89       	ldd	r25, Y+16	; 0x10
    1b6a:	01 97       	sbiw	r24, 0x01	; 1
    1b6c:	f1 f7       	brne	.-4      	; 0x1b6a <H_SSD_Void_SsdDisplay+0x496>
    1b6e:	98 8b       	std	Y+16, r25	; 0x10
    1b70:	8f 87       	std	Y+15, r24	; 0x0f
	 	 	         _delay_ms(SSD_DELAY_TIME); ///delay for one mile second
	 M_DIO_void_SetPinValue(SSEG_EN1_PORT, SSEG_EN1_PIN,  HIGH);
    1b72:	83 e0       	ldi	r24, 0x03	; 3
    1b74:	66 e0       	ldi	r22, 0x06	; 6
    1b76:	41 e0       	ldi	r20, 0x01	; 1
    1b78:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>



///********* switch case to Display the Tens number ***********//
	 switch (Local_u8_Tens)
    1b7c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b7e:	28 2f       	mov	r18, r24
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	3a a3       	std	Y+34, r19	; 0x22
    1b84:	29 a3       	std	Y+33, r18	; 0x21
    1b86:	89 a1       	ldd	r24, Y+33	; 0x21
    1b88:	9a a1       	ldd	r25, Y+34	; 0x22
    1b8a:	84 30       	cpi	r24, 0x04	; 4
    1b8c:	91 05       	cpc	r25, r1
    1b8e:	09 f4       	brne	.+2      	; 0x1b92 <H_SSD_Void_SsdDisplay+0x4be>
    1b90:	d7 c0       	rjmp	.+430    	; 0x1d40 <H_SSD_Void_SsdDisplay+0x66c>
    1b92:	29 a1       	ldd	r18, Y+33	; 0x21
    1b94:	3a a1       	ldd	r19, Y+34	; 0x22
    1b96:	25 30       	cpi	r18, 0x05	; 5
    1b98:	31 05       	cpc	r19, r1
    1b9a:	ec f4       	brge	.+58     	; 0x1bd6 <H_SSD_Void_SsdDisplay+0x502>
    1b9c:	89 a1       	ldd	r24, Y+33	; 0x21
    1b9e:	9a a1       	ldd	r25, Y+34	; 0x22
    1ba0:	81 30       	cpi	r24, 0x01	; 1
    1ba2:	91 05       	cpc	r25, r1
    1ba4:	09 f4       	brne	.+2      	; 0x1ba8 <H_SSD_Void_SsdDisplay+0x4d4>
    1ba6:	60 c0       	rjmp	.+192    	; 0x1c68 <H_SSD_Void_SsdDisplay+0x594>
    1ba8:	29 a1       	ldd	r18, Y+33	; 0x21
    1baa:	3a a1       	ldd	r19, Y+34	; 0x22
    1bac:	22 30       	cpi	r18, 0x02	; 2
    1bae:	31 05       	cpc	r19, r1
    1bb0:	2c f4       	brge	.+10     	; 0x1bbc <H_SSD_Void_SsdDisplay+0x4e8>
    1bb2:	89 a1       	ldd	r24, Y+33	; 0x21
    1bb4:	9a a1       	ldd	r25, Y+34	; 0x22
    1bb6:	00 97       	sbiw	r24, 0x00	; 0
    1bb8:	99 f1       	breq	.+102    	; 0x1c20 <H_SSD_Void_SsdDisplay+0x54c>
    1bba:	99 c1       	rjmp	.+818    	; 0x1eee <H_SSD_Void_SsdDisplay+0x81a>
    1bbc:	29 a1       	ldd	r18, Y+33	; 0x21
    1bbe:	3a a1       	ldd	r19, Y+34	; 0x22
    1bc0:	22 30       	cpi	r18, 0x02	; 2
    1bc2:	31 05       	cpc	r19, r1
    1bc4:	09 f4       	brne	.+2      	; 0x1bc8 <H_SSD_Void_SsdDisplay+0x4f4>
    1bc6:	74 c0       	rjmp	.+232    	; 0x1cb0 <H_SSD_Void_SsdDisplay+0x5dc>
    1bc8:	89 a1       	ldd	r24, Y+33	; 0x21
    1bca:	9a a1       	ldd	r25, Y+34	; 0x22
    1bcc:	83 30       	cpi	r24, 0x03	; 3
    1bce:	91 05       	cpc	r25, r1
    1bd0:	09 f4       	brne	.+2      	; 0x1bd4 <H_SSD_Void_SsdDisplay+0x500>
    1bd2:	92 c0       	rjmp	.+292    	; 0x1cf8 <H_SSD_Void_SsdDisplay+0x624>
    1bd4:	8c c1       	rjmp	.+792    	; 0x1eee <H_SSD_Void_SsdDisplay+0x81a>
    1bd6:	29 a1       	ldd	r18, Y+33	; 0x21
    1bd8:	3a a1       	ldd	r19, Y+34	; 0x22
    1bda:	27 30       	cpi	r18, 0x07	; 7
    1bdc:	31 05       	cpc	r19, r1
    1bde:	09 f4       	brne	.+2      	; 0x1be2 <H_SSD_Void_SsdDisplay+0x50e>
    1be0:	1b c1       	rjmp	.+566    	; 0x1e18 <H_SSD_Void_SsdDisplay+0x744>
    1be2:	89 a1       	ldd	r24, Y+33	; 0x21
    1be4:	9a a1       	ldd	r25, Y+34	; 0x22
    1be6:	88 30       	cpi	r24, 0x08	; 8
    1be8:	91 05       	cpc	r25, r1
    1bea:	6c f4       	brge	.+26     	; 0x1c06 <H_SSD_Void_SsdDisplay+0x532>
    1bec:	29 a1       	ldd	r18, Y+33	; 0x21
    1bee:	3a a1       	ldd	r19, Y+34	; 0x22
    1bf0:	25 30       	cpi	r18, 0x05	; 5
    1bf2:	31 05       	cpc	r19, r1
    1bf4:	09 f4       	brne	.+2      	; 0x1bf8 <H_SSD_Void_SsdDisplay+0x524>
    1bf6:	c8 c0       	rjmp	.+400    	; 0x1d88 <H_SSD_Void_SsdDisplay+0x6b4>
    1bf8:	89 a1       	ldd	r24, Y+33	; 0x21
    1bfa:	9a a1       	ldd	r25, Y+34	; 0x22
    1bfc:	86 30       	cpi	r24, 0x06	; 6
    1bfe:	91 05       	cpc	r25, r1
    1c00:	09 f4       	brne	.+2      	; 0x1c04 <H_SSD_Void_SsdDisplay+0x530>
    1c02:	e6 c0       	rjmp	.+460    	; 0x1dd0 <H_SSD_Void_SsdDisplay+0x6fc>
    1c04:	74 c1       	rjmp	.+744    	; 0x1eee <H_SSD_Void_SsdDisplay+0x81a>
    1c06:	29 a1       	ldd	r18, Y+33	; 0x21
    1c08:	3a a1       	ldd	r19, Y+34	; 0x22
    1c0a:	28 30       	cpi	r18, 0x08	; 8
    1c0c:	31 05       	cpc	r19, r1
    1c0e:	09 f4       	brne	.+2      	; 0x1c12 <H_SSD_Void_SsdDisplay+0x53e>
    1c10:	27 c1       	rjmp	.+590    	; 0x1e60 <H_SSD_Void_SsdDisplay+0x78c>
    1c12:	89 a1       	ldd	r24, Y+33	; 0x21
    1c14:	9a a1       	ldd	r25, Y+34	; 0x22
    1c16:	89 30       	cpi	r24, 0x09	; 9
    1c18:	91 05       	cpc	r25, r1
    1c1a:	09 f4       	brne	.+2      	; 0x1c1e <H_SSD_Void_SsdDisplay+0x54a>
    1c1c:	45 c1       	rjmp	.+650    	; 0x1ea8 <H_SSD_Void_SsdDisplay+0x7d4>
    1c1e:	67 c1       	rjmp	.+718    	; 0x1eee <H_SSD_Void_SsdDisplay+0x81a>
	 {

	 ///**case number is 0 turn on all SSD_LEDs_ and turn off  SSD_LED_G
	  case   0:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	60 e0       	ldi	r22, 0x00	; 0
    1c24:	41 e0       	ldi	r20, 0x01	; 1
    1c26:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	61 e0       	ldi	r22, 0x01	; 1
    1c2e:	41 e0       	ldi	r20, 0x01	; 1
    1c30:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	62 e0       	ldi	r22, 0x02	; 2
    1c38:	41 e0       	ldi	r20, 0x01	; 1
    1c3a:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	63 e0       	ldi	r22, 0x03	; 3
    1c42:	41 e0       	ldi	r20, 0x01	; 1
    1c44:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN , HIGH);
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	64 e0       	ldi	r22, 0x04	; 4
    1c4c:	41 e0       	ldi	r20, 0x01	; 1
    1c4e:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	65 e0       	ldi	r22, 0x05	; 5
    1c56:	41 e0       	ldi	r20, 0x01	; 1
    1c58:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN ,  LOW);
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	66 e0       	ldi	r22, 0x06	; 6
    1c60:	40 e0       	ldi	r20, 0x00	; 0
    1c62:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
    1c66:	43 c1       	rjmp	.+646    	; 0x1eee <H_SSD_Void_SsdDisplay+0x81a>
	  break;
	  ///**case number is 1 turn on  SSD_LED_B and SSD_LED_C****//
	  case   1:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN ,  LOW);
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	60 e0       	ldi	r22, 0x00	; 0
    1c6c:	40 e0       	ldi	r20, 0x00	; 0
    1c6e:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	61 e0       	ldi	r22, 0x01	; 1
    1c76:	41 e0       	ldi	r20, 0x01	; 1
    1c78:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	62 e0       	ldi	r22, 0x02	; 2
    1c80:	41 e0       	ldi	r20, 0x01	; 1
    1c82:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN ,  LOW);
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	63 e0       	ldi	r22, 0x03	; 3
    1c8a:	40 e0       	ldi	r20, 0x00	; 0
    1c8c:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    1c90:	81 e0       	ldi	r24, 0x01	; 1
    1c92:	64 e0       	ldi	r22, 0x04	; 4
    1c94:	40 e0       	ldi	r20, 0x00	; 0
    1c96:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN ,  LOW);
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	65 e0       	ldi	r22, 0x05	; 5
    1c9e:	40 e0       	ldi	r20, 0x00	; 0
    1ca0:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN ,  LOW);
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
    1ca6:	66 e0       	ldi	r22, 0x06	; 6
    1ca8:	40 e0       	ldi	r20, 0x00	; 0
    1caa:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
    1cae:	1f c1       	rjmp	.+574    	; 0x1eee <H_SSD_Void_SsdDisplay+0x81a>
	  break;
    ///**case number is 2 turn on all LEDs_ and turn off LED_C & LED_F**//
	  case   2:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	60 e0       	ldi	r22, 0x00	; 0
    1cb4:	41 e0       	ldi	r20, 0x01	; 1
    1cb6:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	61 e0       	ldi	r22, 0x01	; 1
    1cbe:	41 e0       	ldi	r20, 0x01	; 1
    1cc0:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN ,  LOW);
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	62 e0       	ldi	r22, 0x02	; 2
    1cc8:	40 e0       	ldi	r20, 0x00	; 0
    1cca:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	63 e0       	ldi	r22, 0x03	; 3
    1cd2:	41 e0       	ldi	r20, 0x01	; 1
    1cd4:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN , HIGH);
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	64 e0       	ldi	r22, 0x04	; 4
    1cdc:	41 e0       	ldi	r20, 0x01	; 1
    1cde:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN ,  LOW);
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	65 e0       	ldi	r22, 0x05	; 5
    1ce6:	40 e0       	ldi	r20, 0x00	; 0
    1ce8:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	66 e0       	ldi	r22, 0x06	; 6
    1cf0:	41 e0       	ldi	r20, 0x01	; 1
    1cf2:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
    1cf6:	fb c0       	rjmp	.+502    	; 0x1eee <H_SSD_Void_SsdDisplay+0x81a>
	  break;
	///**case number is 3 turn on all LEDs_ and turn off LED_E & LED_F**//
	  case   3:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	60 e0       	ldi	r22, 0x00	; 0
    1cfc:	41 e0       	ldi	r20, 0x01	; 1
    1cfe:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	61 e0       	ldi	r22, 0x01	; 1
    1d06:	41 e0       	ldi	r20, 0x01	; 1
    1d08:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	62 e0       	ldi	r22, 0x02	; 2
    1d10:	41 e0       	ldi	r20, 0x01	; 1
    1d12:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	63 e0       	ldi	r22, 0x03	; 3
    1d1a:	41 e0       	ldi	r20, 0x01	; 1
    1d1c:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	64 e0       	ldi	r22, 0x04	; 4
    1d24:	40 e0       	ldi	r20, 0x00	; 0
    1d26:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN ,  LOW);
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	65 e0       	ldi	r22, 0x05	; 5
    1d2e:	40 e0       	ldi	r20, 0x00	; 0
    1d30:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	66 e0       	ldi	r22, 0x06	; 6
    1d38:	41 e0       	ldi	r20, 0x01	; 1
    1d3a:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
    1d3e:	d7 c0       	rjmp	.+430    	; 0x1eee <H_SSD_Void_SsdDisplay+0x81a>
	  break;
  ///**case number is 4 turn on all LEDs_ and turn off LED_A,LED_D& LED_E**//
	  case   4:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN ,  LOW);
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	60 e0       	ldi	r22, 0x00	; 0
    1d44:	40 e0       	ldi	r20, 0x00	; 0
    1d46:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	61 e0       	ldi	r22, 0x01	; 1
    1d4e:	41 e0       	ldi	r20, 0x01	; 1
    1d50:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	62 e0       	ldi	r22, 0x02	; 2
    1d58:	41 e0       	ldi	r20, 0x01	; 1
    1d5a:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN ,  LOW);
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	63 e0       	ldi	r22, 0x03	; 3
    1d62:	40 e0       	ldi	r20, 0x00	; 0
    1d64:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	64 e0       	ldi	r22, 0x04	; 4
    1d6c:	40 e0       	ldi	r20, 0x00	; 0
    1d6e:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	65 e0       	ldi	r22, 0x05	; 5
    1d76:	41 e0       	ldi	r20, 0x01	; 1
    1d78:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	66 e0       	ldi	r22, 0x06	; 6
    1d80:	41 e0       	ldi	r20, 0x01	; 1
    1d82:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
    1d86:	b3 c0       	rjmp	.+358    	; 0x1eee <H_SSD_Void_SsdDisplay+0x81a>
	  break;
 ///**case number is 5 turn on all LEDs_ and turn off LED_B & LED_E**//
	  case   5:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	60 e0       	ldi	r22, 0x00	; 0
    1d8c:	41 e0       	ldi	r20, 0x01	; 1
    1d8e:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN ,  LOW);
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	61 e0       	ldi	r22, 0x01	; 1
    1d96:	40 e0       	ldi	r20, 0x00	; 0
    1d98:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	62 e0       	ldi	r22, 0x02	; 2
    1da0:	41 e0       	ldi	r20, 0x01	; 1
    1da2:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    1da6:	81 e0       	ldi	r24, 0x01	; 1
    1da8:	63 e0       	ldi	r22, 0x03	; 3
    1daa:	41 e0       	ldi	r20, 0x01	; 1
    1dac:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	64 e0       	ldi	r22, 0x04	; 4
    1db4:	40 e0       	ldi	r20, 0x00	; 0
    1db6:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	65 e0       	ldi	r22, 0x05	; 5
    1dbe:	41 e0       	ldi	r20, 0x01	; 1
    1dc0:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	66 e0       	ldi	r22, 0x06	; 6
    1dc8:	41 e0       	ldi	r20, 0x01	; 1
    1dca:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
    1dce:	8f c0       	rjmp	.+286    	; 0x1eee <H_SSD_Void_SsdDisplay+0x81a>
	  break;
 ///**case number is 6 turn on all LEDs_ and turn off LED_F**//
	  case   6:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	60 e0       	ldi	r22, 0x00	; 0
    1dd4:	41 e0       	ldi	r20, 0x01	; 1
    1dd6:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	61 e0       	ldi	r22, 0x01	; 1
    1dde:	41 e0       	ldi	r20, 0x01	; 1
    1de0:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	62 e0       	ldi	r22, 0x02	; 2
    1de8:	41 e0       	ldi	r20, 0x01	; 1
    1dea:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    1dee:	81 e0       	ldi	r24, 0x01	; 1
    1df0:	63 e0       	ldi	r22, 0x03	; 3
    1df2:	41 e0       	ldi	r20, 0x01	; 1
    1df4:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN , HIGH);
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	64 e0       	ldi	r22, 0x04	; 4
    1dfc:	41 e0       	ldi	r20, 0x01	; 1
    1dfe:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN ,  LOW);
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	65 e0       	ldi	r22, 0x05	; 5
    1e06:	40 e0       	ldi	r20, 0x00	; 0
    1e08:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	66 e0       	ldi	r22, 0x06	; 6
    1e10:	41 e0       	ldi	r20, 0x01	; 1
    1e12:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
    1e16:	6b c0       	rjmp	.+214    	; 0x1eee <H_SSD_Void_SsdDisplay+0x81a>
	  break;
 ///**case number is 7 turn on all LEDs_ and turn off LED_D,LED_E& LED_G**//
	  case   7:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	60 e0       	ldi	r22, 0x00	; 0
    1e1c:	41 e0       	ldi	r20, 0x01	; 1
    1e1e:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1e22:	81 e0       	ldi	r24, 0x01	; 1
    1e24:	61 e0       	ldi	r22, 0x01	; 1
    1e26:	41 e0       	ldi	r20, 0x01	; 1
    1e28:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	62 e0       	ldi	r22, 0x02	; 2
    1e30:	41 e0       	ldi	r20, 0x01	; 1
    1e32:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN ,  LOW);
    1e36:	81 e0       	ldi	r24, 0x01	; 1
    1e38:	63 e0       	ldi	r22, 0x03	; 3
    1e3a:	40 e0       	ldi	r20, 0x00	; 0
    1e3c:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	64 e0       	ldi	r22, 0x04	; 4
    1e44:	40 e0       	ldi	r20, 0x00	; 0
    1e46:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    1e4a:	81 e0       	ldi	r24, 0x01	; 1
    1e4c:	65 e0       	ldi	r22, 0x05	; 5
    1e4e:	41 e0       	ldi	r20, 0x01	; 1
    1e50:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN ,  LOW);
    1e54:	81 e0       	ldi	r24, 0x01	; 1
    1e56:	66 e0       	ldi	r22, 0x06	; 6
    1e58:	40 e0       	ldi	r20, 0x00	; 0
    1e5a:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
    1e5e:	47 c0       	rjmp	.+142    	; 0x1eee <H_SSD_Void_SsdDisplay+0x81a>
	  break;
 ///**case number is 8 turn on all LEDs_ ****************************//
	  case   8:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	60 e0       	ldi	r22, 0x00	; 0
    1e64:	41 e0       	ldi	r20, 0x01	; 1
    1e66:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    1e6c:	61 e0       	ldi	r22, 0x01	; 1
    1e6e:	41 e0       	ldi	r20, 0x01	; 1
    1e70:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	62 e0       	ldi	r22, 0x02	; 2
    1e78:	41 e0       	ldi	r20, 0x01	; 1
    1e7a:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    1e7e:	81 e0       	ldi	r24, 0x01	; 1
    1e80:	63 e0       	ldi	r22, 0x03	; 3
    1e82:	41 e0       	ldi	r20, 0x01	; 1
    1e84:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN , HIGH);
    1e88:	81 e0       	ldi	r24, 0x01	; 1
    1e8a:	64 e0       	ldi	r22, 0x04	; 4
    1e8c:	41 e0       	ldi	r20, 0x01	; 1
    1e8e:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	65 e0       	ldi	r22, 0x05	; 5
    1e96:	41 e0       	ldi	r20, 0x01	; 1
    1e98:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    1e9c:	81 e0       	ldi	r24, 0x01	; 1
    1e9e:	66 e0       	ldi	r22, 0x06	; 6
    1ea0:	41 e0       	ldi	r20, 0x01	; 1
    1ea2:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
    1ea6:	23 c0       	rjmp	.+70     	; 0x1eee <H_SSD_Void_SsdDisplay+0x81a>
	  break;
  ///**case number is 9 turn on all LEDs_ and turn off  LED_E**//
	  case   9:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	60 e0       	ldi	r22, 0x00	; 0
    1eac:	41 e0       	ldi	r20, 0x01	; 1
    1eae:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	61 e0       	ldi	r22, 0x01	; 1
    1eb6:	41 e0       	ldi	r20, 0x01	; 1
    1eb8:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	62 e0       	ldi	r22, 0x02	; 2
    1ec0:	41 e0       	ldi	r20, 0x01	; 1
    1ec2:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    1ec6:	81 e0       	ldi	r24, 0x01	; 1
    1ec8:	63 e0       	ldi	r22, 0x03	; 3
    1eca:	41 e0       	ldi	r20, 0x01	; 1
    1ecc:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	64 e0       	ldi	r22, 0x04	; 4
    1ed4:	40 e0       	ldi	r20, 0x00	; 0
    1ed6:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    1eda:	81 e0       	ldi	r24, 0x01	; 1
    1edc:	65 e0       	ldi	r22, 0x05	; 5
    1ede:	41 e0       	ldi	r20, 0x01	; 1
    1ee0:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    1ee4:	81 e0       	ldi	r24, 0x01	; 1
    1ee6:	66 e0       	ldi	r22, 0x06	; 6
    1ee8:	41 e0       	ldi	r20, 0x01	; 1
    1eea:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
 * Disable the SSEG_EN1_PIN = SetBit HIGH
 * and
 * Enable the SSEG_EN2_PIN = SetBit LOW
 *
 */
     M_DIO_void_SetPinValue(SSEG_EN1_PORT, SSEG_EN1_PIN, HIGH);
    1eee:	83 e0       	ldi	r24, 0x03	; 3
    1ef0:	66 e0       	ldi	r22, 0x06	; 6
    1ef2:	41 e0       	ldi	r20, 0x01	; 1
    1ef4:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
     M_DIO_void_SetPinValue(SSEG_EN2_PORT, SSEG_EN2_PIN, LOW);
    1ef8:	83 e0       	ldi	r24, 0x03	; 3
    1efa:	67 e0       	ldi	r22, 0x07	; 7
    1efc:	40 e0       	ldi	r20, 0x00	; 0
    1efe:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
    1f02:	80 e0       	ldi	r24, 0x00	; 0
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	a0 e8       	ldi	r26, 0x80	; 128
    1f08:	bf e3       	ldi	r27, 0x3F	; 63
    1f0a:	8b 87       	std	Y+11, r24	; 0x0b
    1f0c:	9c 87       	std	Y+12, r25	; 0x0c
    1f0e:	ad 87       	std	Y+13, r26	; 0x0d
    1f10:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f12:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f14:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f16:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f18:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	4a e7       	ldi	r20, 0x7A	; 122
    1f20:	53 e4       	ldi	r21, 0x43	; 67
    1f22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f26:	dc 01       	movw	r26, r24
    1f28:	cb 01       	movw	r24, r22
    1f2a:	8f 83       	std	Y+7, r24	; 0x07
    1f2c:	98 87       	std	Y+8, r25	; 0x08
    1f2e:	a9 87       	std	Y+9, r26	; 0x09
    1f30:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f32:	6f 81       	ldd	r22, Y+7	; 0x07
    1f34:	78 85       	ldd	r23, Y+8	; 0x08
    1f36:	89 85       	ldd	r24, Y+9	; 0x09
    1f38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f3a:	20 e0       	ldi	r18, 0x00	; 0
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	40 e8       	ldi	r20, 0x80	; 128
    1f40:	5f e3       	ldi	r21, 0x3F	; 63
    1f42:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f46:	88 23       	and	r24, r24
    1f48:	2c f4       	brge	.+10     	; 0x1f54 <H_SSD_Void_SsdDisplay+0x880>
		__ticks = 1;
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	9e 83       	std	Y+6, r25	; 0x06
    1f50:	8d 83       	std	Y+5, r24	; 0x05
    1f52:	3f c0       	rjmp	.+126    	; 0x1fd2 <H_SSD_Void_SsdDisplay+0x8fe>
	else if (__tmp > 65535)
    1f54:	6f 81       	ldd	r22, Y+7	; 0x07
    1f56:	78 85       	ldd	r23, Y+8	; 0x08
    1f58:	89 85       	ldd	r24, Y+9	; 0x09
    1f5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	3f ef       	ldi	r19, 0xFF	; 255
    1f60:	4f e7       	ldi	r20, 0x7F	; 127
    1f62:	57 e4       	ldi	r21, 0x47	; 71
    1f64:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f68:	18 16       	cp	r1, r24
    1f6a:	4c f5       	brge	.+82     	; 0x1fbe <H_SSD_Void_SsdDisplay+0x8ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f70:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f72:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	40 e2       	ldi	r20, 0x20	; 32
    1f7a:	51 e4       	ldi	r21, 0x41	; 65
    1f7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f80:	dc 01       	movw	r26, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	bc 01       	movw	r22, r24
    1f86:	cd 01       	movw	r24, r26
    1f88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f8c:	dc 01       	movw	r26, r24
    1f8e:	cb 01       	movw	r24, r22
    1f90:	9e 83       	std	Y+6, r25	; 0x06
    1f92:	8d 83       	std	Y+5, r24	; 0x05
    1f94:	0f c0       	rjmp	.+30     	; 0x1fb4 <H_SSD_Void_SsdDisplay+0x8e0>
    1f96:	89 e1       	ldi	r24, 0x19	; 25
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	9c 83       	std	Y+4, r25	; 0x04
    1f9c:	8b 83       	std	Y+3, r24	; 0x03
    1f9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa2:	01 97       	sbiw	r24, 0x01	; 1
    1fa4:	f1 f7       	brne	.-4      	; 0x1fa2 <H_SSD_Void_SsdDisplay+0x8ce>
    1fa6:	9c 83       	std	Y+4, r25	; 0x04
    1fa8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1faa:	8d 81       	ldd	r24, Y+5	; 0x05
    1fac:	9e 81       	ldd	r25, Y+6	; 0x06
    1fae:	01 97       	sbiw	r24, 0x01	; 1
    1fb0:	9e 83       	std	Y+6, r25	; 0x06
    1fb2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fb4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb6:	9e 81       	ldd	r25, Y+6	; 0x06
    1fb8:	00 97       	sbiw	r24, 0x00	; 0
    1fba:	69 f7       	brne	.-38     	; 0x1f96 <H_SSD_Void_SsdDisplay+0x8c2>
    1fbc:	14 c0       	rjmp	.+40     	; 0x1fe6 <H_SSD_Void_SsdDisplay+0x912>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fbe:	6f 81       	ldd	r22, Y+7	; 0x07
    1fc0:	78 85       	ldd	r23, Y+8	; 0x08
    1fc2:	89 85       	ldd	r24, Y+9	; 0x09
    1fc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	9e 83       	std	Y+6, r25	; 0x06
    1fd0:	8d 83       	std	Y+5, r24	; 0x05
    1fd2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd4:	9e 81       	ldd	r25, Y+6	; 0x06
    1fd6:	9a 83       	std	Y+2, r25	; 0x02
    1fd8:	89 83       	std	Y+1, r24	; 0x01
    1fda:	89 81       	ldd	r24, Y+1	; 0x01
    1fdc:	9a 81       	ldd	r25, Y+2	; 0x02
    1fde:	01 97       	sbiw	r24, 0x01	; 1
    1fe0:	f1 f7       	brne	.-4      	; 0x1fde <H_SSD_Void_SsdDisplay+0x90a>
    1fe2:	9a 83       	std	Y+2, r25	; 0x02
    1fe4:	89 83       	std	Y+1, r24	; 0x01
          _delay_ms(SSD_DELAY_TIME); ///delay for one mile second
	 M_DIO_void_SetPinValue(SSEG_EN2_PORT, SSEG_EN2_PIN, HIGH);
    1fe6:	83 e0       	ldi	r24, 0x03	; 3
    1fe8:	67 e0       	ldi	r22, 0x07	; 7
    1fea:	41 e0       	ldi	r20, 0x01	; 1
    1fec:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
	 u8 Local_u8_Units = Local_u8_Num %10;
 ///***** Local_u8_Tens is a local variable to get Tens number *******//
	 u8 Local_u8_Tens  = Local_u8_Num / 10;
	 u8 Local_U8_Conter ;
	 ///*******for loop to Repeat  the number displayed  to be able to see it*******///
	 for (Local_U8_Conter=0;Local_U8_Conter<200;Local_U8_Conter++)
    1ff0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ff2:	8f 5f       	subi	r24, 0xFF	; 255
    1ff4:	8d 8f       	std	Y+29, r24	; 0x1d
    1ff6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ff8:	88 3c       	cpi	r24, 0xC8	; 200
    1ffa:	08 f4       	brcc	.+2      	; 0x1ffe <H_SSD_Void_SsdDisplay+0x92a>
    1ffc:	85 cb       	rjmp	.-2294   	; 0x1708 <H_SSD_Void_SsdDisplay+0x34>
     M_DIO_void_SetPinValue(SSEG_EN2_PORT, SSEG_EN2_PIN, LOW);
          _delay_ms(SSD_DELAY_TIME); ///delay for one mile second
	 M_DIO_void_SetPinValue(SSEG_EN2_PORT, SSEG_EN2_PIN, HIGH);

}
}
    1ffe:	a4 96       	adiw	r28, 0x24	; 36
    2000:	0f b6       	in	r0, 0x3f	; 63
    2002:	f8 94       	cli
    2004:	de bf       	out	0x3e, r29	; 62
    2006:	0f be       	out	0x3f, r0	; 63
    2008:	cd bf       	out	0x3d, r28	; 61
    200a:	cf 91       	pop	r28
    200c:	df 91       	pop	r29
    200e:	08 95       	ret

00002010 <H_SSD_Void_SsdDisplayCountDown>:
///***********to count down and display numbers*******/
void H_SSD_Void_SsdDisplayCountDown(u8 Local_u8_num)
{
    2010:	df 93       	push	r29
    2012:	cf 93       	push	r28
    2014:	00 d0       	rcall	.+0      	; 0x2016 <H_SSD_Void_SsdDisplayCountDown+0x6>
    2016:	cd b7       	in	r28, 0x3d	; 61
    2018:	de b7       	in	r29, 0x3e	; 62
    201a:	8a 83       	std	Y+2, r24	; 0x02

	   s8 Local_s8_Counter = 0;   ////for loop local counter
    201c:	19 82       	std	Y+1, r1	; 0x01
   /////for loop to count down the number entered from the user
	 for(  Local_s8_Counter  = Local_u8_num ; Local_s8_Counter >=0 ; Local_s8_Counter--)
    201e:	8a 81       	ldd	r24, Y+2	; 0x02
    2020:	89 83       	std	Y+1, r24	; 0x01
    2022:	06 c0       	rjmp	.+12     	; 0x2030 <H_SSD_Void_SsdDisplayCountDown+0x20>
	     {
		     /////calling  H_SSD_Void_SsdDisplay to display numbers counted down
			H_SSD_Void_SsdDisplay(Local_s8_Counter);
    2024:	89 81       	ldd	r24, Y+1	; 0x01
    2026:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <H_SSD_Void_SsdDisplay>
void H_SSD_Void_SsdDisplayCountDown(u8 Local_u8_num)
{

	   s8 Local_s8_Counter = 0;   ////for loop local counter
   /////for loop to count down the number entered from the user
	 for(  Local_s8_Counter  = Local_u8_num ; Local_s8_Counter >=0 ; Local_s8_Counter--)
    202a:	89 81       	ldd	r24, Y+1	; 0x01
    202c:	81 50       	subi	r24, 0x01	; 1
    202e:	89 83       	std	Y+1, r24	; 0x01
    2030:	89 81       	ldd	r24, Y+1	; 0x01
    2032:	88 23       	and	r24, r24
    2034:	bc f7       	brge	.-18     	; 0x2024 <H_SSD_Void_SsdDisplayCountDown+0x14>
		     /////calling  H_SSD_Void_SsdDisplay to display numbers counted down
			H_SSD_Void_SsdDisplay(Local_s8_Counter);
		 }


}
    2036:	0f 90       	pop	r0
    2038:	0f 90       	pop	r0
    203a:	cf 91       	pop	r28
    203c:	df 91       	pop	r29
    203e:	08 95       	ret

00002040 <H_PushButton_void_PushButtonInt>:
/*********Macros ************/

/********************************_FUNCTION _****************************/
///************_H_PushButton_void_PushButtonInt to set pin direction  _***********//
void H_PushButton_void_PushButtonInt(u8 Local_u8_PushButton)
{
    2040:	df 93       	push	r29
    2042:	cf 93       	push	r28
    2044:	00 d0       	rcall	.+0      	; 0x2046 <H_PushButton_void_PushButtonInt+0x6>
    2046:	0f 92       	push	r0
    2048:	cd b7       	in	r28, 0x3d	; 61
    204a:	de b7       	in	r29, 0x3e	; 62
    204c:	89 83       	std	Y+1, r24	; 0x01
	///************_SWITCH to loop on PushButton _***********//
	switch(Local_u8_PushButton){
    204e:	89 81       	ldd	r24, Y+1	; 0x01
    2050:	28 2f       	mov	r18, r24
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	3b 83       	std	Y+3, r19	; 0x03
    2056:	2a 83       	std	Y+2, r18	; 0x02
    2058:	8a 81       	ldd	r24, Y+2	; 0x02
    205a:	9b 81       	ldd	r25, Y+3	; 0x03
    205c:	82 30       	cpi	r24, 0x02	; 2
    205e:	91 05       	cpc	r25, r1
    2060:	e1 f0       	breq	.+56     	; 0x209a <H_PushButton_void_PushButtonInt+0x5a>
    2062:	2a 81       	ldd	r18, Y+2	; 0x02
    2064:	3b 81       	ldd	r19, Y+3	; 0x03
    2066:	23 30       	cpi	r18, 0x03	; 3
    2068:	31 05       	cpc	r19, r1
    206a:	34 f4       	brge	.+12     	; 0x2078 <H_PushButton_void_PushButtonInt+0x38>
    206c:	8a 81       	ldd	r24, Y+2	; 0x02
    206e:	9b 81       	ldd	r25, Y+3	; 0x03
    2070:	81 30       	cpi	r24, 0x01	; 1
    2072:	91 05       	cpc	r25, r1
    2074:	61 f0       	breq	.+24     	; 0x208e <H_PushButton_void_PushButtonInt+0x4e>
    2076:	22 c0       	rjmp	.+68     	; 0x20bc <H_PushButton_void_PushButtonInt+0x7c>
    2078:	2a 81       	ldd	r18, Y+2	; 0x02
    207a:	3b 81       	ldd	r19, Y+3	; 0x03
    207c:	23 30       	cpi	r18, 0x03	; 3
    207e:	31 05       	cpc	r19, r1
    2080:	91 f0       	breq	.+36     	; 0x20a6 <H_PushButton_void_PushButtonInt+0x66>
    2082:	8a 81       	ldd	r24, Y+2	; 0x02
    2084:	9b 81       	ldd	r25, Y+3	; 0x03
    2086:	84 30       	cpi	r24, 0x04	; 4
    2088:	91 05       	cpc	r25, r1
    208a:	99 f0       	breq	.+38     	; 0x20b2 <H_PushButton_void_PushButtonInt+0x72>
    208c:	17 c0       	rjmp	.+46     	; 0x20bc <H_PushButton_void_PushButtonInt+0x7c>
	///************_ case PushButton1 _***********//
	case PUSHBUTTON1 :
		///************_ Set PUSHBUTTON1_PIN value to INPUT  _***********//
		M_DIO_void_SetPinDirection(PUSHBUTTON1_PORT_ID,PUSHBUTTON1_PIN , INPUT);
    208e:	84 e0       	ldi	r24, 0x04	; 4
    2090:	62 e0       	ldi	r22, 0x02	; 2
    2092:	40 e0       	ldi	r20, 0x00	; 0
    2094:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <M_DIO_void_SetPinDirection>
    2098:	11 c0       	rjmp	.+34     	; 0x20bc <H_PushButton_void_PushButtonInt+0x7c>
		break;
		///************_ case PushButton2 _***********//
	case PUSHBUTTON2 :
		///************_ Set PUSHBUTTON2_PIN value to INPUT  _***********//
		M_DIO_void_SetPinDirection(PUSHBUTTON2_PORT_ID, PUSHBUTTON2_PIN, INPUT);
    209a:	84 e0       	ldi	r24, 0x04	; 4
    209c:	63 e0       	ldi	r22, 0x03	; 3
    209e:	40 e0       	ldi	r20, 0x00	; 0
    20a0:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <M_DIO_void_SetPinDirection>
    20a4:	0b c0       	rjmp	.+22     	; 0x20bc <H_PushButton_void_PushButtonInt+0x7c>
		break;
		///************_ case PushButton3 _***********//
	case PUSHBUTTON3 :
		///************_ Set PUSHBUTTON3_PIN value to INPUT  _***********//
		M_DIO_void_SetPinDirection(PUSHBUTTON3_PORT_ID, PUSHBUTTON3_PIN, INPUT);
    20a6:	84 e0       	ldi	r24, 0x04	; 4
    20a8:	64 e0       	ldi	r22, 0x04	; 4
    20aa:	40 e0       	ldi	r20, 0x00	; 0
    20ac:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <M_DIO_void_SetPinDirection>
    20b0:	05 c0       	rjmp	.+10     	; 0x20bc <H_PushButton_void_PushButtonInt+0x7c>
		break;
		///************_ case PushButton4 _***********//
	case PUSHBUTTON4 :
		///************_ Set PUSHBUTTON4_PIN value to INPUT  _***********//
		M_DIO_void_SetPinDirection(PUSHBUTTON4_PORT_ID, PUSHBUTTON4_PIN, INPUT);
    20b2:	84 e0       	ldi	r24, 0x04	; 4
    20b4:	65 e0       	ldi	r22, 0x05	; 5
    20b6:	40 e0       	ldi	r20, 0x00	; 0
    20b8:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <M_DIO_void_SetPinDirection>

	default :   /********do nothing******/ break;
	///************_ End of switch(Local_u8_PushButton)_********//
	}

}
    20bc:	0f 90       	pop	r0
    20be:	0f 90       	pop	r0
    20c0:	0f 90       	pop	r0
    20c2:	cf 91       	pop	r28
    20c4:	df 91       	pop	r29
    20c6:	08 95       	ret

000020c8 <H_PushButton_u8_PushButtonRead>:
///************_H_PushButton_u8_PushButtonRead to Read pin value  _***********//
u8 H_PushButton_u8_PushButtonRead (u8 Local_u8_PushButton)
{
    20c8:	df 93       	push	r29
    20ca:	cf 93       	push	r28
    20cc:	cd b7       	in	r28, 0x3d	; 61
    20ce:	de b7       	in	r29, 0x3e	; 62
    20d0:	ec 97       	sbiw	r28, 0x3c	; 60
    20d2:	0f b6       	in	r0, 0x3f	; 63
    20d4:	f8 94       	cli
    20d6:	de bf       	out	0x3e, r29	; 62
    20d8:	0f be       	out	0x3f, r0	; 63
    20da:	cd bf       	out	0x3d, r28	; 61
    20dc:	8a af       	std	Y+58, r24	; 0x3a
	u8 Local_u8_PushButtonValue = 0;
    20de:	19 ae       	std	Y+57, r1	; 0x39
	///************_SWITCH to loop on PushButton _***********//
	switch(Local_u8_PushButton){
    20e0:	8a ad       	ldd	r24, Y+58	; 0x3a
    20e2:	28 2f       	mov	r18, r24
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	3c af       	std	Y+60, r19	; 0x3c
    20e8:	2b af       	std	Y+59, r18	; 0x3b
    20ea:	8b ad       	ldd	r24, Y+59	; 0x3b
    20ec:	9c ad       	ldd	r25, Y+60	; 0x3c
    20ee:	82 30       	cpi	r24, 0x02	; 2
    20f0:	91 05       	cpc	r25, r1
    20f2:	09 f4       	brne	.+2      	; 0x20f6 <H_PushButton_u8_PushButtonRead+0x2e>
    20f4:	a2 c0       	rjmp	.+324    	; 0x223a <H_PushButton_u8_PushButtonRead+0x172>
    20f6:	2b ad       	ldd	r18, Y+59	; 0x3b
    20f8:	3c ad       	ldd	r19, Y+60	; 0x3c
    20fa:	23 30       	cpi	r18, 0x03	; 3
    20fc:	31 05       	cpc	r19, r1
    20fe:	34 f4       	brge	.+12     	; 0x210c <H_PushButton_u8_PushButtonRead+0x44>
    2100:	8b ad       	ldd	r24, Y+59	; 0x3b
    2102:	9c ad       	ldd	r25, Y+60	; 0x3c
    2104:	81 30       	cpi	r24, 0x01	; 1
    2106:	91 05       	cpc	r25, r1
    2108:	71 f0       	breq	.+28     	; 0x2126 <H_PushButton_u8_PushButtonRead+0x5e>
    210a:	33 c2       	rjmp	.+1126   	; 0x2572 <H_PushButton_u8_PushButtonRead+0x4aa>
    210c:	2b ad       	ldd	r18, Y+59	; 0x3b
    210e:	3c ad       	ldd	r19, Y+60	; 0x3c
    2110:	23 30       	cpi	r18, 0x03	; 3
    2112:	31 05       	cpc	r19, r1
    2114:	09 f4       	brne	.+2      	; 0x2118 <H_PushButton_u8_PushButtonRead+0x50>
    2116:	1b c1       	rjmp	.+566    	; 0x234e <H_PushButton_u8_PushButtonRead+0x286>
    2118:	8b ad       	ldd	r24, Y+59	; 0x3b
    211a:	9c ad       	ldd	r25, Y+60	; 0x3c
    211c:	84 30       	cpi	r24, 0x04	; 4
    211e:	91 05       	cpc	r25, r1
    2120:	09 f4       	brne	.+2      	; 0x2124 <H_PushButton_u8_PushButtonRead+0x5c>
    2122:	9f c1       	rjmp	.+830    	; 0x2462 <H_PushButton_u8_PushButtonRead+0x39a>
    2124:	26 c2       	rjmp	.+1100   	; 0x2572 <H_PushButton_u8_PushButtonRead+0x4aa>
	///************_ case PushButton1 _***********//
	case PUSHBUTTON1 :
		///************_ Read PUSHBUTTON1_PIN value  _***********//
		Local_u8_PushButtonValue = M_DIO_U8_PinRead(PUSHBUTTON1_PORT_ID,PUSHBUTTON1_PIN );
    2126:	84 e0       	ldi	r24, 0x04	; 4
    2128:	62 e0       	ldi	r22, 0x02	; 2
    212a:	0e 94 ee 09 	call	0x13dc	; 0x13dc <M_DIO_U8_PinRead>
    212e:	89 af       	std	Y+57, r24	; 0x39
		///********************_DEBOUNCING _ PUSHBUTTON1 _ ************//
		if(Local_u8_PushButtonValue == PRESSED) ///check if button is pressed
    2130:	89 ad       	ldd	r24, Y+57	; 0x39
    2132:	88 23       	and	r24, r24
    2134:	09 f0       	breq	.+2      	; 0x2138 <H_PushButton_u8_PushButtonRead+0x70>
    2136:	1d c2       	rjmp	.+1082   	; 0x2572 <H_PushButton_u8_PushButtonRead+0x4aa>
    2138:	80 e0       	ldi	r24, 0x00	; 0
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	a0 e7       	ldi	r26, 0x70	; 112
    213e:	b2 e4       	ldi	r27, 0x42	; 66
    2140:	8d ab       	std	Y+53, r24	; 0x35
    2142:	9e ab       	std	Y+54, r25	; 0x36
    2144:	af ab       	std	Y+55, r26	; 0x37
    2146:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2148:	6d a9       	ldd	r22, Y+53	; 0x35
    214a:	7e a9       	ldd	r23, Y+54	; 0x36
    214c:	8f a9       	ldd	r24, Y+55	; 0x37
    214e:	98 ad       	ldd	r25, Y+56	; 0x38
    2150:	20 e0       	ldi	r18, 0x00	; 0
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	4a e7       	ldi	r20, 0x7A	; 122
    2156:	53 e4       	ldi	r21, 0x43	; 67
    2158:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    215c:	dc 01       	movw	r26, r24
    215e:	cb 01       	movw	r24, r22
    2160:	89 ab       	std	Y+49, r24	; 0x31
    2162:	9a ab       	std	Y+50, r25	; 0x32
    2164:	ab ab       	std	Y+51, r26	; 0x33
    2166:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2168:	69 a9       	ldd	r22, Y+49	; 0x31
    216a:	7a a9       	ldd	r23, Y+50	; 0x32
    216c:	8b a9       	ldd	r24, Y+51	; 0x33
    216e:	9c a9       	ldd	r25, Y+52	; 0x34
    2170:	20 e0       	ldi	r18, 0x00	; 0
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	40 e8       	ldi	r20, 0x80	; 128
    2176:	5f e3       	ldi	r21, 0x3F	; 63
    2178:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    217c:	88 23       	and	r24, r24
    217e:	2c f4       	brge	.+10     	; 0x218a <H_PushButton_u8_PushButtonRead+0xc2>
		__ticks = 1;
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	98 ab       	std	Y+48, r25	; 0x30
    2186:	8f a7       	std	Y+47, r24	; 0x2f
    2188:	3f c0       	rjmp	.+126    	; 0x2208 <H_PushButton_u8_PushButtonRead+0x140>
	else if (__tmp > 65535)
    218a:	69 a9       	ldd	r22, Y+49	; 0x31
    218c:	7a a9       	ldd	r23, Y+50	; 0x32
    218e:	8b a9       	ldd	r24, Y+51	; 0x33
    2190:	9c a9       	ldd	r25, Y+52	; 0x34
    2192:	20 e0       	ldi	r18, 0x00	; 0
    2194:	3f ef       	ldi	r19, 0xFF	; 255
    2196:	4f e7       	ldi	r20, 0x7F	; 127
    2198:	57 e4       	ldi	r21, 0x47	; 71
    219a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    219e:	18 16       	cp	r1, r24
    21a0:	4c f5       	brge	.+82     	; 0x21f4 <H_PushButton_u8_PushButtonRead+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21a2:	6d a9       	ldd	r22, Y+53	; 0x35
    21a4:	7e a9       	ldd	r23, Y+54	; 0x36
    21a6:	8f a9       	ldd	r24, Y+55	; 0x37
    21a8:	98 ad       	ldd	r25, Y+56	; 0x38
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	40 e2       	ldi	r20, 0x20	; 32
    21b0:	51 e4       	ldi	r21, 0x41	; 65
    21b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b6:	dc 01       	movw	r26, r24
    21b8:	cb 01       	movw	r24, r22
    21ba:	bc 01       	movw	r22, r24
    21bc:	cd 01       	movw	r24, r26
    21be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	98 ab       	std	Y+48, r25	; 0x30
    21c8:	8f a7       	std	Y+47, r24	; 0x2f
    21ca:	0f c0       	rjmp	.+30     	; 0x21ea <H_PushButton_u8_PushButtonRead+0x122>
    21cc:	89 e1       	ldi	r24, 0x19	; 25
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	9e a7       	std	Y+46, r25	; 0x2e
    21d2:	8d a7       	std	Y+45, r24	; 0x2d
    21d4:	8d a5       	ldd	r24, Y+45	; 0x2d
    21d6:	9e a5       	ldd	r25, Y+46	; 0x2e
    21d8:	01 97       	sbiw	r24, 0x01	; 1
    21da:	f1 f7       	brne	.-4      	; 0x21d8 <H_PushButton_u8_PushButtonRead+0x110>
    21dc:	9e a7       	std	Y+46, r25	; 0x2e
    21de:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    21e2:	98 a9       	ldd	r25, Y+48	; 0x30
    21e4:	01 97       	sbiw	r24, 0x01	; 1
    21e6:	98 ab       	std	Y+48, r25	; 0x30
    21e8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    21ec:	98 a9       	ldd	r25, Y+48	; 0x30
    21ee:	00 97       	sbiw	r24, 0x00	; 0
    21f0:	69 f7       	brne	.-38     	; 0x21cc <H_PushButton_u8_PushButtonRead+0x104>
    21f2:	14 c0       	rjmp	.+40     	; 0x221c <H_PushButton_u8_PushButtonRead+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f4:	69 a9       	ldd	r22, Y+49	; 0x31
    21f6:	7a a9       	ldd	r23, Y+50	; 0x32
    21f8:	8b a9       	ldd	r24, Y+51	; 0x33
    21fa:	9c a9       	ldd	r25, Y+52	; 0x34
    21fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2200:	dc 01       	movw	r26, r24
    2202:	cb 01       	movw	r24, r22
    2204:	98 ab       	std	Y+48, r25	; 0x30
    2206:	8f a7       	std	Y+47, r24	; 0x2f
    2208:	8f a5       	ldd	r24, Y+47	; 0x2f
    220a:	98 a9       	ldd	r25, Y+48	; 0x30
    220c:	9c a7       	std	Y+44, r25	; 0x2c
    220e:	8b a7       	std	Y+43, r24	; 0x2b
    2210:	8b a5       	ldd	r24, Y+43	; 0x2b
    2212:	9c a5       	ldd	r25, Y+44	; 0x2c
    2214:	01 97       	sbiw	r24, 0x01	; 1
    2216:	f1 f7       	brne	.-4      	; 0x2214 <H_PushButton_u8_PushButtonRead+0x14c>
    2218:	9c a7       	std	Y+44, r25	; 0x2c
    221a:	8b a7       	std	Y+43, r24	; 0x2b
		{
			_delay_ms(PUSHBUTTONS_DEBOUNCING_TIME);      /// delay for 60 Ms
			 ////check  M_DIO_U8_PinRead value
			if(M_DIO_U8_PinRead(PUSHBUTTON1_PORT_ID,PUSHBUTTON1_PIN ) == PRESSED)
    221c:	84 e0       	ldi	r24, 0x04	; 4
    221e:	62 e0       	ldi	r22, 0x02	; 2
    2220:	0e 94 ee 09 	call	0x13dc	; 0x13dc <M_DIO_U8_PinRead>
    2224:	88 23       	and	r24, r24
    2226:	09 f0       	breq	.+2      	; 0x222a <H_PushButton_u8_PushButtonRead+0x162>
    2228:	a4 c1       	rjmp	.+840    	; 0x2572 <H_PushButton_u8_PushButtonRead+0x4aa>
			{
	   ///while loop to stop repeated actions when PRESSED then take an action when released
			while (M_DIO_U8_PinRead(PUSHBUTTON1_PORT_ID,PUSHBUTTON1_PIN ) == PRESSED);
    222a:	84 e0       	ldi	r24, 0x04	; 4
    222c:	62 e0       	ldi	r22, 0x02	; 2
    222e:	0e 94 ee 09 	call	0x13dc	; 0x13dc <M_DIO_U8_PinRead>
    2232:	88 23       	and	r24, r24
    2234:	d1 f3       	breq	.-12     	; 0x222a <H_PushButton_u8_PushButtonRead+0x162>
			    //// if while is  true  Local_u8_PushButtonValue ==  PRESSED
				Local_u8_PushButtonValue = PRESSED;
    2236:	19 ae       	std	Y+57, r1	; 0x39
    2238:	9c c1       	rjmp	.+824    	; 0x2572 <H_PushButton_u8_PushButtonRead+0x4aa>
		///*****************************break case PUSHBUTTON1 **************************///

		///************_ case PushButton2 _***********//
	case PUSHBUTTON2 :
		///************_ Read PUSHBUTTON2_PIN value   _***********//
		Local_u8_PushButtonValue = M_DIO_U8_PinRead(PUSHBUTTON2_PORT_ID, PUSHBUTTON2_PIN);
    223a:	84 e0       	ldi	r24, 0x04	; 4
    223c:	63 e0       	ldi	r22, 0x03	; 3
    223e:	0e 94 ee 09 	call	0x13dc	; 0x13dc <M_DIO_U8_PinRead>
    2242:	89 af       	std	Y+57, r24	; 0x39
		///********************_DEBOUNCING _ PUSHBUTTON2_ ************//
		if(Local_u8_PushButtonValue == PRESSED)    ///check if button is pressed
    2244:	89 ad       	ldd	r24, Y+57	; 0x39
    2246:	88 23       	and	r24, r24
    2248:	09 f0       	breq	.+2      	; 0x224c <H_PushButton_u8_PushButtonRead+0x184>
    224a:	93 c1       	rjmp	.+806    	; 0x2572 <H_PushButton_u8_PushButtonRead+0x4aa>
    224c:	80 e0       	ldi	r24, 0x00	; 0
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	a0 e7       	ldi	r26, 0x70	; 112
    2252:	b2 e4       	ldi	r27, 0x42	; 66
    2254:	8f a3       	std	Y+39, r24	; 0x27
    2256:	98 a7       	std	Y+40, r25	; 0x28
    2258:	a9 a7       	std	Y+41, r26	; 0x29
    225a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    225c:	6f a1       	ldd	r22, Y+39	; 0x27
    225e:	78 a5       	ldd	r23, Y+40	; 0x28
    2260:	89 a5       	ldd	r24, Y+41	; 0x29
    2262:	9a a5       	ldd	r25, Y+42	; 0x2a
    2264:	20 e0       	ldi	r18, 0x00	; 0
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	4a e7       	ldi	r20, 0x7A	; 122
    226a:	53 e4       	ldi	r21, 0x43	; 67
    226c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2270:	dc 01       	movw	r26, r24
    2272:	cb 01       	movw	r24, r22
    2274:	8b a3       	std	Y+35, r24	; 0x23
    2276:	9c a3       	std	Y+36, r25	; 0x24
    2278:	ad a3       	std	Y+37, r26	; 0x25
    227a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    227c:	6b a1       	ldd	r22, Y+35	; 0x23
    227e:	7c a1       	ldd	r23, Y+36	; 0x24
    2280:	8d a1       	ldd	r24, Y+37	; 0x25
    2282:	9e a1       	ldd	r25, Y+38	; 0x26
    2284:	20 e0       	ldi	r18, 0x00	; 0
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	40 e8       	ldi	r20, 0x80	; 128
    228a:	5f e3       	ldi	r21, 0x3F	; 63
    228c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2290:	88 23       	and	r24, r24
    2292:	2c f4       	brge	.+10     	; 0x229e <H_PushButton_u8_PushButtonRead+0x1d6>
		__ticks = 1;
    2294:	81 e0       	ldi	r24, 0x01	; 1
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	9a a3       	std	Y+34, r25	; 0x22
    229a:	89 a3       	std	Y+33, r24	; 0x21
    229c:	3f c0       	rjmp	.+126    	; 0x231c <H_PushButton_u8_PushButtonRead+0x254>
	else if (__tmp > 65535)
    229e:	6b a1       	ldd	r22, Y+35	; 0x23
    22a0:	7c a1       	ldd	r23, Y+36	; 0x24
    22a2:	8d a1       	ldd	r24, Y+37	; 0x25
    22a4:	9e a1       	ldd	r25, Y+38	; 0x26
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	3f ef       	ldi	r19, 0xFF	; 255
    22aa:	4f e7       	ldi	r20, 0x7F	; 127
    22ac:	57 e4       	ldi	r21, 0x47	; 71
    22ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22b2:	18 16       	cp	r1, r24
    22b4:	4c f5       	brge	.+82     	; 0x2308 <H_PushButton_u8_PushButtonRead+0x240>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22b6:	6f a1       	ldd	r22, Y+39	; 0x27
    22b8:	78 a5       	ldd	r23, Y+40	; 0x28
    22ba:	89 a5       	ldd	r24, Y+41	; 0x29
    22bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	40 e2       	ldi	r20, 0x20	; 32
    22c4:	51 e4       	ldi	r21, 0x41	; 65
    22c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ca:	dc 01       	movw	r26, r24
    22cc:	cb 01       	movw	r24, r22
    22ce:	bc 01       	movw	r22, r24
    22d0:	cd 01       	movw	r24, r26
    22d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d6:	dc 01       	movw	r26, r24
    22d8:	cb 01       	movw	r24, r22
    22da:	9a a3       	std	Y+34, r25	; 0x22
    22dc:	89 a3       	std	Y+33, r24	; 0x21
    22de:	0f c0       	rjmp	.+30     	; 0x22fe <H_PushButton_u8_PushButtonRead+0x236>
    22e0:	89 e1       	ldi	r24, 0x19	; 25
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	98 a3       	std	Y+32, r25	; 0x20
    22e6:	8f 8f       	std	Y+31, r24	; 0x1f
    22e8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22ea:	98 a1       	ldd	r25, Y+32	; 0x20
    22ec:	01 97       	sbiw	r24, 0x01	; 1
    22ee:	f1 f7       	brne	.-4      	; 0x22ec <H_PushButton_u8_PushButtonRead+0x224>
    22f0:	98 a3       	std	Y+32, r25	; 0x20
    22f2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22f4:	89 a1       	ldd	r24, Y+33	; 0x21
    22f6:	9a a1       	ldd	r25, Y+34	; 0x22
    22f8:	01 97       	sbiw	r24, 0x01	; 1
    22fa:	9a a3       	std	Y+34, r25	; 0x22
    22fc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22fe:	89 a1       	ldd	r24, Y+33	; 0x21
    2300:	9a a1       	ldd	r25, Y+34	; 0x22
    2302:	00 97       	sbiw	r24, 0x00	; 0
    2304:	69 f7       	brne	.-38     	; 0x22e0 <H_PushButton_u8_PushButtonRead+0x218>
    2306:	14 c0       	rjmp	.+40     	; 0x2330 <H_PushButton_u8_PushButtonRead+0x268>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2308:	6b a1       	ldd	r22, Y+35	; 0x23
    230a:	7c a1       	ldd	r23, Y+36	; 0x24
    230c:	8d a1       	ldd	r24, Y+37	; 0x25
    230e:	9e a1       	ldd	r25, Y+38	; 0x26
    2310:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2314:	dc 01       	movw	r26, r24
    2316:	cb 01       	movw	r24, r22
    2318:	9a a3       	std	Y+34, r25	; 0x22
    231a:	89 a3       	std	Y+33, r24	; 0x21
    231c:	89 a1       	ldd	r24, Y+33	; 0x21
    231e:	9a a1       	ldd	r25, Y+34	; 0x22
    2320:	9e 8f       	std	Y+30, r25	; 0x1e
    2322:	8d 8f       	std	Y+29, r24	; 0x1d
    2324:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2326:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2328:	01 97       	sbiw	r24, 0x01	; 1
    232a:	f1 f7       	brne	.-4      	; 0x2328 <H_PushButton_u8_PushButtonRead+0x260>
    232c:	9e 8f       	std	Y+30, r25	; 0x1e
    232e:	8d 8f       	std	Y+29, r24	; 0x1d
		{
			_delay_ms(PUSHBUTTONS_DEBOUNCING_TIME);        /// delay for 60 Ms
			 ////check  M_DIO_U8_PinRead value
			if(M_DIO_U8_PinRead(PUSHBUTTON2_PORT_ID,PUSHBUTTON2_PIN ) == PRESSED)
    2330:	84 e0       	ldi	r24, 0x04	; 4
    2332:	63 e0       	ldi	r22, 0x03	; 3
    2334:	0e 94 ee 09 	call	0x13dc	; 0x13dc <M_DIO_U8_PinRead>
    2338:	88 23       	and	r24, r24
    233a:	09 f0       	breq	.+2      	; 0x233e <H_PushButton_u8_PushButtonRead+0x276>
    233c:	1a c1       	rjmp	.+564    	; 0x2572 <H_PushButton_u8_PushButtonRead+0x4aa>
			{
		 ///while loop to stop repeated actions when PRESSED then take an action when released
				while (M_DIO_U8_PinRead(PUSHBUTTON2_PORT_ID,PUSHBUTTON2_PIN ) == PRESSED);
    233e:	84 e0       	ldi	r24, 0x04	; 4
    2340:	63 e0       	ldi	r22, 0x03	; 3
    2342:	0e 94 ee 09 	call	0x13dc	; 0x13dc <M_DIO_U8_PinRead>
    2346:	88 23       	and	r24, r24
    2348:	d1 f3       	breq	.-12     	; 0x233e <H_PushButton_u8_PushButtonRead+0x276>
					//// if while is  true  Local_u8_PushButtonValue ==  PRESSED
						Local_u8_PushButtonValue = PRESSED;
    234a:	19 ae       	std	Y+57, r1	; 0x39
    234c:	12 c1       	rjmp	.+548    	; 0x2572 <H_PushButton_u8_PushButtonRead+0x4aa>
		///*****************************break case PUSHBUTTON2 **************************///

		///************_ case PushButton3 _***********//
	case PUSHBUTTON3 :
		///************_ Read PUSHBUTTON3_PIN value   _***********//
		Local_u8_PushButtonValue =	M_DIO_U8_PinRead(PUSHBUTTON3_PORT_ID, PUSHBUTTON3_PIN);
    234e:	84 e0       	ldi	r24, 0x04	; 4
    2350:	64 e0       	ldi	r22, 0x04	; 4
    2352:	0e 94 ee 09 	call	0x13dc	; 0x13dc <M_DIO_U8_PinRead>
    2356:	89 af       	std	Y+57, r24	; 0x39
		///********************_DEBOUNCING _ PUSHBUTTON3 _ ************//
		if(Local_u8_PushButtonValue == PRESSED)     ///check if button is pressed
    2358:	89 ad       	ldd	r24, Y+57	; 0x39
    235a:	88 23       	and	r24, r24
    235c:	09 f0       	breq	.+2      	; 0x2360 <H_PushButton_u8_PushButtonRead+0x298>
    235e:	09 c1       	rjmp	.+530    	; 0x2572 <H_PushButton_u8_PushButtonRead+0x4aa>
    2360:	80 e0       	ldi	r24, 0x00	; 0
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	a0 e7       	ldi	r26, 0x70	; 112
    2366:	b2 e4       	ldi	r27, 0x42	; 66
    2368:	89 8f       	std	Y+25, r24	; 0x19
    236a:	9a 8f       	std	Y+26, r25	; 0x1a
    236c:	ab 8f       	std	Y+27, r26	; 0x1b
    236e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2370:	69 8d       	ldd	r22, Y+25	; 0x19
    2372:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2374:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2376:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	4a e7       	ldi	r20, 0x7A	; 122
    237e:	53 e4       	ldi	r21, 0x43	; 67
    2380:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	8d 8b       	std	Y+21, r24	; 0x15
    238a:	9e 8b       	std	Y+22, r25	; 0x16
    238c:	af 8b       	std	Y+23, r26	; 0x17
    238e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2390:	6d 89       	ldd	r22, Y+21	; 0x15
    2392:	7e 89       	ldd	r23, Y+22	; 0x16
    2394:	8f 89       	ldd	r24, Y+23	; 0x17
    2396:	98 8d       	ldd	r25, Y+24	; 0x18
    2398:	20 e0       	ldi	r18, 0x00	; 0
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	40 e8       	ldi	r20, 0x80	; 128
    239e:	5f e3       	ldi	r21, 0x3F	; 63
    23a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23a4:	88 23       	and	r24, r24
    23a6:	2c f4       	brge	.+10     	; 0x23b2 <H_PushButton_u8_PushButtonRead+0x2ea>
		__ticks = 1;
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	9c 8b       	std	Y+20, r25	; 0x14
    23ae:	8b 8b       	std	Y+19, r24	; 0x13
    23b0:	3f c0       	rjmp	.+126    	; 0x2430 <H_PushButton_u8_PushButtonRead+0x368>
	else if (__tmp > 65535)
    23b2:	6d 89       	ldd	r22, Y+21	; 0x15
    23b4:	7e 89       	ldd	r23, Y+22	; 0x16
    23b6:	8f 89       	ldd	r24, Y+23	; 0x17
    23b8:	98 8d       	ldd	r25, Y+24	; 0x18
    23ba:	20 e0       	ldi	r18, 0x00	; 0
    23bc:	3f ef       	ldi	r19, 0xFF	; 255
    23be:	4f e7       	ldi	r20, 0x7F	; 127
    23c0:	57 e4       	ldi	r21, 0x47	; 71
    23c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23c6:	18 16       	cp	r1, r24
    23c8:	4c f5       	brge	.+82     	; 0x241c <H_PushButton_u8_PushButtonRead+0x354>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ca:	69 8d       	ldd	r22, Y+25	; 0x19
    23cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23d2:	20 e0       	ldi	r18, 0x00	; 0
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	40 e2       	ldi	r20, 0x20	; 32
    23d8:	51 e4       	ldi	r21, 0x41	; 65
    23da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23de:	dc 01       	movw	r26, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	bc 01       	movw	r22, r24
    23e4:	cd 01       	movw	r24, r26
    23e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ea:	dc 01       	movw	r26, r24
    23ec:	cb 01       	movw	r24, r22
    23ee:	9c 8b       	std	Y+20, r25	; 0x14
    23f0:	8b 8b       	std	Y+19, r24	; 0x13
    23f2:	0f c0       	rjmp	.+30     	; 0x2412 <H_PushButton_u8_PushButtonRead+0x34a>
    23f4:	89 e1       	ldi	r24, 0x19	; 25
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	9a 8b       	std	Y+18, r25	; 0x12
    23fa:	89 8b       	std	Y+17, r24	; 0x11
    23fc:	89 89       	ldd	r24, Y+17	; 0x11
    23fe:	9a 89       	ldd	r25, Y+18	; 0x12
    2400:	01 97       	sbiw	r24, 0x01	; 1
    2402:	f1 f7       	brne	.-4      	; 0x2400 <H_PushButton_u8_PushButtonRead+0x338>
    2404:	9a 8b       	std	Y+18, r25	; 0x12
    2406:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2408:	8b 89       	ldd	r24, Y+19	; 0x13
    240a:	9c 89       	ldd	r25, Y+20	; 0x14
    240c:	01 97       	sbiw	r24, 0x01	; 1
    240e:	9c 8b       	std	Y+20, r25	; 0x14
    2410:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2412:	8b 89       	ldd	r24, Y+19	; 0x13
    2414:	9c 89       	ldd	r25, Y+20	; 0x14
    2416:	00 97       	sbiw	r24, 0x00	; 0
    2418:	69 f7       	brne	.-38     	; 0x23f4 <H_PushButton_u8_PushButtonRead+0x32c>
    241a:	14 c0       	rjmp	.+40     	; 0x2444 <H_PushButton_u8_PushButtonRead+0x37c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    241c:	6d 89       	ldd	r22, Y+21	; 0x15
    241e:	7e 89       	ldd	r23, Y+22	; 0x16
    2420:	8f 89       	ldd	r24, Y+23	; 0x17
    2422:	98 8d       	ldd	r25, Y+24	; 0x18
    2424:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2428:	dc 01       	movw	r26, r24
    242a:	cb 01       	movw	r24, r22
    242c:	9c 8b       	std	Y+20, r25	; 0x14
    242e:	8b 8b       	std	Y+19, r24	; 0x13
    2430:	8b 89       	ldd	r24, Y+19	; 0x13
    2432:	9c 89       	ldd	r25, Y+20	; 0x14
    2434:	98 8b       	std	Y+16, r25	; 0x10
    2436:	8f 87       	std	Y+15, r24	; 0x0f
    2438:	8f 85       	ldd	r24, Y+15	; 0x0f
    243a:	98 89       	ldd	r25, Y+16	; 0x10
    243c:	01 97       	sbiw	r24, 0x01	; 1
    243e:	f1 f7       	brne	.-4      	; 0x243c <H_PushButton_u8_PushButtonRead+0x374>
    2440:	98 8b       	std	Y+16, r25	; 0x10
    2442:	8f 87       	std	Y+15, r24	; 0x0f
		{
			_delay_ms(PUSHBUTTONS_DEBOUNCING_TIME);          /// delay for 60 Ms
			 ////check  M_DIO_U8_PinRead value
			if(M_DIO_U8_PinRead(PUSHBUTTON3_PORT_ID,PUSHBUTTON3_PIN ) == PRESSED)
    2444:	84 e0       	ldi	r24, 0x04	; 4
    2446:	64 e0       	ldi	r22, 0x04	; 4
    2448:	0e 94 ee 09 	call	0x13dc	; 0x13dc <M_DIO_U8_PinRead>
    244c:	88 23       	and	r24, r24
    244e:	09 f0       	breq	.+2      	; 0x2452 <H_PushButton_u8_PushButtonRead+0x38a>
    2450:	90 c0       	rjmp	.+288    	; 0x2572 <H_PushButton_u8_PushButtonRead+0x4aa>
			{
		///while loop to stop repeated actions when PRESSED then take an action when released
			while (M_DIO_U8_PinRead(PUSHBUTTON3_PORT_ID,PUSHBUTTON3_PIN ) == PRESSED);
    2452:	84 e0       	ldi	r24, 0x04	; 4
    2454:	64 e0       	ldi	r22, 0x04	; 4
    2456:	0e 94 ee 09 	call	0x13dc	; 0x13dc <M_DIO_U8_PinRead>
    245a:	88 23       	and	r24, r24
    245c:	d1 f3       	breq	.-12     	; 0x2452 <H_PushButton_u8_PushButtonRead+0x38a>
				//// if while is  true  Local_u8_PushButtonValue ==  PRESSED
					Local_u8_PushButtonValue = PRESSED;
    245e:	19 ae       	std	Y+57, r1	; 0x39
    2460:	88 c0       	rjmp	.+272    	; 0x2572 <H_PushButton_u8_PushButtonRead+0x4aa>
	///*****************************break case PUSHBUTTON3 **************************///

		///************_ case PushButton4 _***********//
	case PUSHBUTTON4 :
		///************_ Read PUSHBUTTON4_PIN value   _***********//
		Local_u8_PushButtonValue = M_DIO_U8_PinRead(PUSHBUTTON4_PORT_ID, PUSHBUTTON4_PIN);
    2462:	84 e0       	ldi	r24, 0x04	; 4
    2464:	65 e0       	ldi	r22, 0x05	; 5
    2466:	0e 94 ee 09 	call	0x13dc	; 0x13dc <M_DIO_U8_PinRead>
    246a:	89 af       	std	Y+57, r24	; 0x39
		///********************_DEBOUNCING _ PUSHBUTTON4 _ ************//
		if(Local_u8_PushButtonValue == PRESSED)      ///check if button is pressed
    246c:	89 ad       	ldd	r24, Y+57	; 0x39
    246e:	88 23       	and	r24, r24
    2470:	09 f0       	breq	.+2      	; 0x2474 <H_PushButton_u8_PushButtonRead+0x3ac>
    2472:	7f c0       	rjmp	.+254    	; 0x2572 <H_PushButton_u8_PushButtonRead+0x4aa>
    2474:	80 e0       	ldi	r24, 0x00	; 0
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	a0 e7       	ldi	r26, 0x70	; 112
    247a:	b2 e4       	ldi	r27, 0x42	; 66
    247c:	8b 87       	std	Y+11, r24	; 0x0b
    247e:	9c 87       	std	Y+12, r25	; 0x0c
    2480:	ad 87       	std	Y+13, r26	; 0x0d
    2482:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2484:	6b 85       	ldd	r22, Y+11	; 0x0b
    2486:	7c 85       	ldd	r23, Y+12	; 0x0c
    2488:	8d 85       	ldd	r24, Y+13	; 0x0d
    248a:	9e 85       	ldd	r25, Y+14	; 0x0e
    248c:	20 e0       	ldi	r18, 0x00	; 0
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	4a e7       	ldi	r20, 0x7A	; 122
    2492:	53 e4       	ldi	r21, 0x43	; 67
    2494:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2498:	dc 01       	movw	r26, r24
    249a:	cb 01       	movw	r24, r22
    249c:	8f 83       	std	Y+7, r24	; 0x07
    249e:	98 87       	std	Y+8, r25	; 0x08
    24a0:	a9 87       	std	Y+9, r26	; 0x09
    24a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24a4:	6f 81       	ldd	r22, Y+7	; 0x07
    24a6:	78 85       	ldd	r23, Y+8	; 0x08
    24a8:	89 85       	ldd	r24, Y+9	; 0x09
    24aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ac:	20 e0       	ldi	r18, 0x00	; 0
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	40 e8       	ldi	r20, 0x80	; 128
    24b2:	5f e3       	ldi	r21, 0x3F	; 63
    24b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24b8:	88 23       	and	r24, r24
    24ba:	2c f4       	brge	.+10     	; 0x24c6 <H_PushButton_u8_PushButtonRead+0x3fe>
		__ticks = 1;
    24bc:	81 e0       	ldi	r24, 0x01	; 1
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	9e 83       	std	Y+6, r25	; 0x06
    24c2:	8d 83       	std	Y+5, r24	; 0x05
    24c4:	3f c0       	rjmp	.+126    	; 0x2544 <H_PushButton_u8_PushButtonRead+0x47c>
	else if (__tmp > 65535)
    24c6:	6f 81       	ldd	r22, Y+7	; 0x07
    24c8:	78 85       	ldd	r23, Y+8	; 0x08
    24ca:	89 85       	ldd	r24, Y+9	; 0x09
    24cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ce:	20 e0       	ldi	r18, 0x00	; 0
    24d0:	3f ef       	ldi	r19, 0xFF	; 255
    24d2:	4f e7       	ldi	r20, 0x7F	; 127
    24d4:	57 e4       	ldi	r21, 0x47	; 71
    24d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24da:	18 16       	cp	r1, r24
    24dc:	4c f5       	brge	.+82     	; 0x2530 <H_PushButton_u8_PushButtonRead+0x468>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24de:	6b 85       	ldd	r22, Y+11	; 0x0b
    24e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    24e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    24e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    24e6:	20 e0       	ldi	r18, 0x00	; 0
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	40 e2       	ldi	r20, 0x20	; 32
    24ec:	51 e4       	ldi	r21, 0x41	; 65
    24ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f2:	dc 01       	movw	r26, r24
    24f4:	cb 01       	movw	r24, r22
    24f6:	bc 01       	movw	r22, r24
    24f8:	cd 01       	movw	r24, r26
    24fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	9e 83       	std	Y+6, r25	; 0x06
    2504:	8d 83       	std	Y+5, r24	; 0x05
    2506:	0f c0       	rjmp	.+30     	; 0x2526 <H_PushButton_u8_PushButtonRead+0x45e>
    2508:	89 e1       	ldi	r24, 0x19	; 25
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	9c 83       	std	Y+4, r25	; 0x04
    250e:	8b 83       	std	Y+3, r24	; 0x03
    2510:	8b 81       	ldd	r24, Y+3	; 0x03
    2512:	9c 81       	ldd	r25, Y+4	; 0x04
    2514:	01 97       	sbiw	r24, 0x01	; 1
    2516:	f1 f7       	brne	.-4      	; 0x2514 <H_PushButton_u8_PushButtonRead+0x44c>
    2518:	9c 83       	std	Y+4, r25	; 0x04
    251a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    251c:	8d 81       	ldd	r24, Y+5	; 0x05
    251e:	9e 81       	ldd	r25, Y+6	; 0x06
    2520:	01 97       	sbiw	r24, 0x01	; 1
    2522:	9e 83       	std	Y+6, r25	; 0x06
    2524:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2526:	8d 81       	ldd	r24, Y+5	; 0x05
    2528:	9e 81       	ldd	r25, Y+6	; 0x06
    252a:	00 97       	sbiw	r24, 0x00	; 0
    252c:	69 f7       	brne	.-38     	; 0x2508 <H_PushButton_u8_PushButtonRead+0x440>
    252e:	14 c0       	rjmp	.+40     	; 0x2558 <H_PushButton_u8_PushButtonRead+0x490>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2530:	6f 81       	ldd	r22, Y+7	; 0x07
    2532:	78 85       	ldd	r23, Y+8	; 0x08
    2534:	89 85       	ldd	r24, Y+9	; 0x09
    2536:	9a 85       	ldd	r25, Y+10	; 0x0a
    2538:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    253c:	dc 01       	movw	r26, r24
    253e:	cb 01       	movw	r24, r22
    2540:	9e 83       	std	Y+6, r25	; 0x06
    2542:	8d 83       	std	Y+5, r24	; 0x05
    2544:	8d 81       	ldd	r24, Y+5	; 0x05
    2546:	9e 81       	ldd	r25, Y+6	; 0x06
    2548:	9a 83       	std	Y+2, r25	; 0x02
    254a:	89 83       	std	Y+1, r24	; 0x01
    254c:	89 81       	ldd	r24, Y+1	; 0x01
    254e:	9a 81       	ldd	r25, Y+2	; 0x02
    2550:	01 97       	sbiw	r24, 0x01	; 1
    2552:	f1 f7       	brne	.-4      	; 0x2550 <H_PushButton_u8_PushButtonRead+0x488>
    2554:	9a 83       	std	Y+2, r25	; 0x02
    2556:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(PUSHBUTTONS_DEBOUNCING_TIME);         /// delay for 60 Ms
			 ////check  M_DIO_U8_PinRead value
			if(M_DIO_U8_PinRead(PUSHBUTTON4_PORT_ID,PUSHBUTTON4_PIN ) == PRESSED)
    2558:	84 e0       	ldi	r24, 0x04	; 4
    255a:	65 e0       	ldi	r22, 0x05	; 5
    255c:	0e 94 ee 09 	call	0x13dc	; 0x13dc <M_DIO_U8_PinRead>
    2560:	88 23       	and	r24, r24
    2562:	39 f4       	brne	.+14     	; 0x2572 <H_PushButton_u8_PushButtonRead+0x4aa>
			{
		 ///while loop to stop repeated actions when PRESSED then take an action when released
			while (M_DIO_U8_PinRead(PUSHBUTTON4_PORT_ID,PUSHBUTTON4_PIN ) == PRESSED);
    2564:	84 e0       	ldi	r24, 0x04	; 4
    2566:	65 e0       	ldi	r22, 0x05	; 5
    2568:	0e 94 ee 09 	call	0x13dc	; 0x13dc <M_DIO_U8_PinRead>
    256c:	88 23       	and	r24, r24
    256e:	d1 f3       	breq	.-12     	; 0x2564 <H_PushButton_u8_PushButtonRead+0x49c>
				 //// if while is  true  Local_u8_PushButtonValue ==  PRESSED
					  Local_u8_PushButtonValue = PRESSED;
    2570:	19 ae       	std	Y+57, r1	; 0x39

	default :   /********do nothing******/ break;
	///************_ End of switch(Local_u8_PushButton)_********//
	}

	return Local_u8_PushButtonValue  ;
    2572:	89 ad       	ldd	r24, Y+57	; 0x39
}
    2574:	ec 96       	adiw	r28, 0x3c	; 60
    2576:	0f b6       	in	r0, 0x3f	; 63
    2578:	f8 94       	cli
    257a:	de bf       	out	0x3e, r29	; 62
    257c:	0f be       	out	0x3f, r0	; 63
    257e:	cd bf       	out	0x3d, r28	; 61
    2580:	cf 91       	pop	r28
    2582:	df 91       	pop	r29
    2584:	08 95       	ret

00002586 <H_LED_Void_LedInit>:
#include "LED_Int.h"
#include "LED_Priv.h"

///******************_Initialization Function to Set Pins direction_***********///
void H_LED_Void_LedInit(u8 Local_u8_ledId)
{
    2586:	df 93       	push	r29
    2588:	cf 93       	push	r28
    258a:	00 d0       	rcall	.+0      	; 0x258c <H_LED_Void_LedInit+0x6>
    258c:	0f 92       	push	r0
    258e:	cd b7       	in	r28, 0x3d	; 61
    2590:	de b7       	in	r29, 0x3e	; 62
    2592:	89 83       	std	Y+1, r24	; 0x01
	///***switch case to loop on LEDs****//
	switch(Local_u8_ledId)
    2594:	89 81       	ldd	r24, Y+1	; 0x01
    2596:	28 2f       	mov	r18, r24
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	3b 83       	std	Y+3, r19	; 0x03
    259c:	2a 83       	std	Y+2, r18	; 0x02
    259e:	8a 81       	ldd	r24, Y+2	; 0x02
    25a0:	9b 81       	ldd	r25, Y+3	; 0x03
    25a2:	82 30       	cpi	r24, 0x02	; 2
    25a4:	91 05       	cpc	r25, r1
    25a6:	11 f1       	breq	.+68     	; 0x25ec <H_LED_Void_LedInit+0x66>
    25a8:	2a 81       	ldd	r18, Y+2	; 0x02
    25aa:	3b 81       	ldd	r19, Y+3	; 0x03
    25ac:	23 30       	cpi	r18, 0x03	; 3
    25ae:	31 05       	cpc	r19, r1
    25b0:	34 f4       	brge	.+12     	; 0x25be <H_LED_Void_LedInit+0x38>
    25b2:	8a 81       	ldd	r24, Y+2	; 0x02
    25b4:	9b 81       	ldd	r25, Y+3	; 0x03
    25b6:	81 30       	cpi	r24, 0x01	; 1
    25b8:	91 05       	cpc	r25, r1
    25ba:	61 f0       	breq	.+24     	; 0x25d4 <H_LED_Void_LedInit+0x4e>
    25bc:	22 c0       	rjmp	.+68     	; 0x2602 <H_LED_Void_LedInit+0x7c>
    25be:	2a 81       	ldd	r18, Y+2	; 0x02
    25c0:	3b 81       	ldd	r19, Y+3	; 0x03
    25c2:	23 30       	cpi	r18, 0x03	; 3
    25c4:	31 05       	cpc	r19, r1
    25c6:	61 f0       	breq	.+24     	; 0x25e0 <H_LED_Void_LedInit+0x5a>
    25c8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ca:	9b 81       	ldd	r25, Y+3	; 0x03
    25cc:	84 30       	cpi	r24, 0x04	; 4
    25ce:	91 05       	cpc	r25, r1
    25d0:	99 f0       	breq	.+38     	; 0x25f8 <H_LED_Void_LedInit+0x72>
    25d2:	17 c0       	rjmp	.+46     	; 0x2602 <H_LED_Void_LedInit+0x7c>
	{
	///******_Setting RED_LED Pin direction to OUTPUT _***********///
	case RED_LED:
		M_DIO_void_SetPinDirection(RED_LED_PORT, RED_LED_PIN, OUTPUT);
    25d4:	83 e0       	ldi	r24, 0x03	; 3
    25d6:	60 e0       	ldi	r22, 0x00	; 0
    25d8:	41 e0       	ldi	r20, 0x01	; 1
    25da:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <M_DIO_void_SetPinDirection>
    25de:	11 c0       	rjmp	.+34     	; 0x2602 <H_LED_Void_LedInit+0x7c>
		break;
	///******_Setting GRN_LED Pin direction to OUTPUT _***********///
	case GRN_LED :
		M_DIO_void_SetPinDirection(GRN_LED_PORT ,GRN_LED_PIN , OUTPUT);
    25e0:	83 e0       	ldi	r24, 0x03	; 3
    25e2:	61 e0       	ldi	r22, 0x01	; 1
    25e4:	41 e0       	ldi	r20, 0x01	; 1
    25e6:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <M_DIO_void_SetPinDirection>
    25ea:	0b c0       	rjmp	.+22     	; 0x2602 <H_LED_Void_LedInit+0x7c>
		break;
   ///******_Setting BLUE_LED Pin direction to OUTPUT _***********///
	case BLUE_LED:
		M_DIO_void_SetPinDirection(BLUE_LED_PORT,BLUE_LED_PIN ,OUTPUT);
    25ec:	83 e0       	ldi	r24, 0x03	; 3
    25ee:	62 e0       	ldi	r22, 0x02	; 2
    25f0:	41 e0       	ldi	r20, 0x01	; 1
    25f2:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <M_DIO_void_SetPinDirection>
    25f6:	05 c0       	rjmp	.+10     	; 0x2602 <H_LED_Void_LedInit+0x7c>
		break;
   ///******_Setting YELLOW_LED Pin direction to OUTPUT _***********///
	case YELLOW_LED:
			M_DIO_void_SetPinDirection(YELLOW_LED_PORT,YELLOW_LED_PIN ,OUTPUT);
    25f8:	83 e0       	ldi	r24, 0x03	; 3
    25fa:	63 e0       	ldi	r22, 0x03	; 3
    25fc:	41 e0       	ldi	r20, 0x01	; 1
    25fe:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <M_DIO_void_SetPinDirection>
			break;
	default :               /*****error*****/                      break;
	}

}
    2602:	0f 90       	pop	r0
    2604:	0f 90       	pop	r0
    2606:	0f 90       	pop	r0
    2608:	cf 91       	pop	r28
    260a:	df 91       	pop	r29
    260c:	08 95       	ret

0000260e <H_LED_Void_LedOn>:
void H_LED_Void_LedOn(u8 Local_u8_led)
{
    260e:	df 93       	push	r29
    2610:	cf 93       	push	r28
    2612:	00 d0       	rcall	.+0      	; 0x2614 <H_LED_Void_LedOn+0x6>
    2614:	0f 92       	push	r0
    2616:	cd b7       	in	r28, 0x3d	; 61
    2618:	de b7       	in	r29, 0x3e	; 62
    261a:	89 83       	std	Y+1, r24	; 0x01
	///***switch case to loop on LEDs****//
	switch(Local_u8_led)
    261c:	89 81       	ldd	r24, Y+1	; 0x01
    261e:	28 2f       	mov	r18, r24
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	3b 83       	std	Y+3, r19	; 0x03
    2624:	2a 83       	std	Y+2, r18	; 0x02
    2626:	8a 81       	ldd	r24, Y+2	; 0x02
    2628:	9b 81       	ldd	r25, Y+3	; 0x03
    262a:	82 30       	cpi	r24, 0x02	; 2
    262c:	91 05       	cpc	r25, r1
    262e:	11 f1       	breq	.+68     	; 0x2674 <H_LED_Void_LedOn+0x66>
    2630:	2a 81       	ldd	r18, Y+2	; 0x02
    2632:	3b 81       	ldd	r19, Y+3	; 0x03
    2634:	23 30       	cpi	r18, 0x03	; 3
    2636:	31 05       	cpc	r19, r1
    2638:	34 f4       	brge	.+12     	; 0x2646 <H_LED_Void_LedOn+0x38>
    263a:	8a 81       	ldd	r24, Y+2	; 0x02
    263c:	9b 81       	ldd	r25, Y+3	; 0x03
    263e:	81 30       	cpi	r24, 0x01	; 1
    2640:	91 05       	cpc	r25, r1
    2642:	61 f0       	breq	.+24     	; 0x265c <H_LED_Void_LedOn+0x4e>
    2644:	22 c0       	rjmp	.+68     	; 0x268a <H_LED_Void_LedOn+0x7c>
    2646:	2a 81       	ldd	r18, Y+2	; 0x02
    2648:	3b 81       	ldd	r19, Y+3	; 0x03
    264a:	23 30       	cpi	r18, 0x03	; 3
    264c:	31 05       	cpc	r19, r1
    264e:	61 f0       	breq	.+24     	; 0x2668 <H_LED_Void_LedOn+0x5a>
    2650:	8a 81       	ldd	r24, Y+2	; 0x02
    2652:	9b 81       	ldd	r25, Y+3	; 0x03
    2654:	84 30       	cpi	r24, 0x04	; 4
    2656:	91 05       	cpc	r25, r1
    2658:	99 f0       	breq	.+38     	; 0x2680 <H_LED_Void_LedOn+0x72>
    265a:	17 c0       	rjmp	.+46     	; 0x268a <H_LED_Void_LedOn+0x7c>
		{
	    ///******_Setting RED_LED Pin Value to HIGH to Light it_***********///
		case RED_LED:
             M_DIO_void_SetPinValue(RED_LED_PORT, RED_LED_PIN, HIGH);
    265c:	83 e0       	ldi	r24, 0x03	; 3
    265e:	60 e0       	ldi	r22, 0x00	; 0
    2660:	41 e0       	ldi	r20, 0x01	; 1
    2662:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
    2666:	11 c0       	rjmp	.+34     	; 0x268a <H_LED_Void_LedOn+0x7c>
		break;
		///******_Setting GRN_LED Pin Value to HIGH to Light it_***********///
		case GRN_LED :
             M_DIO_void_SetPinValue(GRN_LED_PORT, GRN_LED_PIN, HIGH);
    2668:	83 e0       	ldi	r24, 0x03	; 3
    266a:	61 e0       	ldi	r22, 0x01	; 1
    266c:	41 e0       	ldi	r20, 0x01	; 1
    266e:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
    2672:	0b c0       	rjmp	.+22     	; 0x268a <H_LED_Void_LedOn+0x7c>
        break;
        ///******_Setting BLUE_LED Pin Value to HIGH to Light it_***********///
		case BLUE_LED :
             M_DIO_void_SetPinValue(BLUE_LED_PORT,BLUE_LED_PIN, HIGH);
    2674:	83 e0       	ldi	r24, 0x03	; 3
    2676:	62 e0       	ldi	r22, 0x02	; 2
    2678:	41 e0       	ldi	r20, 0x01	; 1
    267a:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
    267e:	05 c0       	rjmp	.+10     	; 0x268a <H_LED_Void_LedOn+0x7c>
   		break;
   		///******_Setting YELLOW_LED Pin Value to HIGH to Light it_***********///
		case YELLOW_LED :
		             M_DIO_void_SetPinValue(YELLOW_LED_PORT,YELLOW_LED_PIN, HIGH);
    2680:	83 e0       	ldi	r24, 0x03	; 3
    2682:	63 e0       	ldi	r22, 0x03	; 3
    2684:	41 e0       	ldi	r20, 0x01	; 1
    2686:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		   		break;
		default :          /*****error*****/         break;
		}

}
    268a:	0f 90       	pop	r0
    268c:	0f 90       	pop	r0
    268e:	0f 90       	pop	r0
    2690:	cf 91       	pop	r28
    2692:	df 91       	pop	r29
    2694:	08 95       	ret

00002696 <H_LED_Void_LedOff>:
void H_LED_Void_LedOff(u8 Local_u8_led)
{
    2696:	df 93       	push	r29
    2698:	cf 93       	push	r28
    269a:	00 d0       	rcall	.+0      	; 0x269c <H_LED_Void_LedOff+0x6>
    269c:	0f 92       	push	r0
    269e:	cd b7       	in	r28, 0x3d	; 61
    26a0:	de b7       	in	r29, 0x3e	; 62
    26a2:	89 83       	std	Y+1, r24	; 0x01
	///***switch case to loop on LEDs****//
	switch(Local_u8_led)
    26a4:	89 81       	ldd	r24, Y+1	; 0x01
    26a6:	28 2f       	mov	r18, r24
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	3b 83       	std	Y+3, r19	; 0x03
    26ac:	2a 83       	std	Y+2, r18	; 0x02
    26ae:	8a 81       	ldd	r24, Y+2	; 0x02
    26b0:	9b 81       	ldd	r25, Y+3	; 0x03
    26b2:	82 30       	cpi	r24, 0x02	; 2
    26b4:	91 05       	cpc	r25, r1
    26b6:	b1 f0       	breq	.+44     	; 0x26e4 <H_LED_Void_LedOff+0x4e>
    26b8:	2a 81       	ldd	r18, Y+2	; 0x02
    26ba:	3b 81       	ldd	r19, Y+3	; 0x03
    26bc:	23 30       	cpi	r18, 0x03	; 3
    26be:	31 05       	cpc	r19, r1
    26c0:	34 f4       	brge	.+12     	; 0x26ce <H_LED_Void_LedOff+0x38>
    26c2:	8a 81       	ldd	r24, Y+2	; 0x02
    26c4:	9b 81       	ldd	r25, Y+3	; 0x03
    26c6:	81 30       	cpi	r24, 0x01	; 1
    26c8:	91 05       	cpc	r25, r1
    26ca:	91 f0       	breq	.+36     	; 0x26f0 <H_LED_Void_LedOff+0x5a>
    26cc:	22 c0       	rjmp	.+68     	; 0x2712 <H_LED_Void_LedOff+0x7c>
    26ce:	2a 81       	ldd	r18, Y+2	; 0x02
    26d0:	3b 81       	ldd	r19, Y+3	; 0x03
    26d2:	23 30       	cpi	r18, 0x03	; 3
    26d4:	31 05       	cpc	r19, r1
    26d6:	91 f0       	breq	.+36     	; 0x26fc <H_LED_Void_LedOff+0x66>
    26d8:	8a 81       	ldd	r24, Y+2	; 0x02
    26da:	9b 81       	ldd	r25, Y+3	; 0x03
    26dc:	84 30       	cpi	r24, 0x04	; 4
    26de:	91 05       	cpc	r25, r1
    26e0:	99 f0       	breq	.+38     	; 0x2708 <H_LED_Void_LedOff+0x72>
    26e2:	17 c0       	rjmp	.+46     	; 0x2712 <H_LED_Void_LedOff+0x7c>
			{
			///******_Setting BLUE_LED Pin Value to LOW to Turn it OFF_***********///
			case BLUE_LED:
				M_DIO_void_SetPinValue(BLUE_LED_PORT, BLUE_LED_PIN, LOW);
    26e4:	83 e0       	ldi	r24, 0x03	; 3
    26e6:	62 e0       	ldi	r22, 0x02	; 2
    26e8:	40 e0       	ldi	r20, 0x00	; 0
    26ea:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
    26ee:	11 c0       	rjmp	.+34     	; 0x2712 <H_LED_Void_LedOff+0x7c>
			break;
			///******_Setting RED_LED Pin Value to LOW to Turn it OFF_***********///
			case RED_LED :
				M_DIO_void_SetPinValue(RED_LED_PORT ,RED_LED_PIN, LOW);
    26f0:	83 e0       	ldi	r24, 0x03	; 3
    26f2:	60 e0       	ldi	r22, 0x00	; 0
    26f4:	40 e0       	ldi	r20, 0x00	; 0
    26f6:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
    26fa:	0b c0       	rjmp	.+22     	; 0x2712 <H_LED_Void_LedOff+0x7c>
			break;
			///******_Setting GRN_LED Pin Value to LOW to Turn it OFF_***********///
			case GRN_LED :
				M_DIO_void_SetPinValue(GRN_LED_PORT,GRN_LED_PIN, LOW);
    26fc:	83 e0       	ldi	r24, 0x03	; 3
    26fe:	61 e0       	ldi	r22, 0x01	; 1
    2700:	40 e0       	ldi	r20, 0x00	; 0
    2702:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
    2706:	05 c0       	rjmp	.+10     	; 0x2712 <H_LED_Void_LedOff+0x7c>
			break;
			///******_Setting YELLOW_LED Pin Value to LOW to Turn it OFF_***********///
			case YELLOW_LED :
			    M_DIO_void_SetPinValue(YELLOW_LED_PORT,YELLOW_LED_PIN, LOW);
    2708:	83 e0       	ldi	r24, 0x03	; 3
    270a:	63 e0       	ldi	r22, 0x03	; 3
    270c:	40 e0       	ldi	r20, 0x00	; 0
    270e:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
					   		break;
			default :           /*****error*****/         break;
			}

}
    2712:	0f 90       	pop	r0
    2714:	0f 90       	pop	r0
    2716:	0f 90       	pop	r0
    2718:	cf 91       	pop	r28
    271a:	df 91       	pop	r29
    271c:	08 95       	ret

0000271e <H_LED_Void_LedTogg>:
void H_LED_Void_LedTogg(u8 Local_u8_led)
{
    271e:	df 93       	push	r29
    2720:	cf 93       	push	r28
    2722:	00 d0       	rcall	.+0      	; 0x2724 <H_LED_Void_LedTogg+0x6>
    2724:	0f 92       	push	r0
    2726:	cd b7       	in	r28, 0x3d	; 61
    2728:	de b7       	in	r29, 0x3e	; 62
    272a:	89 83       	std	Y+1, r24	; 0x01
	///***switch case to loop on LEDs****//
	switch(Local_u8_led)
    272c:	89 81       	ldd	r24, Y+1	; 0x01
    272e:	28 2f       	mov	r18, r24
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	3b 83       	std	Y+3, r19	; 0x03
    2734:	2a 83       	std	Y+2, r18	; 0x02
    2736:	8a 81       	ldd	r24, Y+2	; 0x02
    2738:	9b 81       	ldd	r25, Y+3	; 0x03
    273a:	82 30       	cpi	r24, 0x02	; 2
    273c:	91 05       	cpc	r25, r1
    273e:	b1 f0       	breq	.+44     	; 0x276c <H_LED_Void_LedTogg+0x4e>
    2740:	2a 81       	ldd	r18, Y+2	; 0x02
    2742:	3b 81       	ldd	r19, Y+3	; 0x03
    2744:	23 30       	cpi	r18, 0x03	; 3
    2746:	31 05       	cpc	r19, r1
    2748:	34 f4       	brge	.+12     	; 0x2756 <H_LED_Void_LedTogg+0x38>
    274a:	8a 81       	ldd	r24, Y+2	; 0x02
    274c:	9b 81       	ldd	r25, Y+3	; 0x03
    274e:	81 30       	cpi	r24, 0x01	; 1
    2750:	91 05       	cpc	r25, r1
    2752:	89 f0       	breq	.+34     	; 0x2776 <H_LED_Void_LedTogg+0x58>
    2754:	1e c0       	rjmp	.+60     	; 0x2792 <H_LED_Void_LedTogg+0x74>
    2756:	2a 81       	ldd	r18, Y+2	; 0x02
    2758:	3b 81       	ldd	r19, Y+3	; 0x03
    275a:	23 30       	cpi	r18, 0x03	; 3
    275c:	31 05       	cpc	r19, r1
    275e:	81 f0       	breq	.+32     	; 0x2780 <H_LED_Void_LedTogg+0x62>
    2760:	8a 81       	ldd	r24, Y+2	; 0x02
    2762:	9b 81       	ldd	r25, Y+3	; 0x03
    2764:	84 30       	cpi	r24, 0x04	; 4
    2766:	91 05       	cpc	r25, r1
    2768:	81 f0       	breq	.+32     	; 0x278a <H_LED_Void_LedTogg+0x6c>
    276a:	13 c0       	rjmp	.+38     	; 0x2792 <H_LED_Void_LedTogg+0x74>
		{
		  ///******_ Toggle  BLUE_LED Pin Value _***********///
		  case BLUE_LED:
			  M_DIO_void_PinTog(BLUE_LED_PORT, BLUE_LED_PIN);
    276c:	83 e0       	ldi	r24, 0x03	; 3
    276e:	62 e0       	ldi	r22, 0x02	; 2
    2770:	0e 94 70 09 	call	0x12e0	; 0x12e0 <M_DIO_void_PinTog>
    2774:	0e c0       	rjmp	.+28     	; 0x2792 <H_LED_Void_LedTogg+0x74>
		  break;
		  ///******_ Toggle  RED_LED Pin Value _******************///
		  case RED_LED :
			  M_DIO_void_PinTog(RED_LED_PORT, RED_LED_PIN);
    2776:	83 e0       	ldi	r24, 0x03	; 3
    2778:	60 e0       	ldi	r22, 0x00	; 0
    277a:	0e 94 70 09 	call	0x12e0	; 0x12e0 <M_DIO_void_PinTog>
    277e:	09 c0       	rjmp	.+18     	; 0x2792 <H_LED_Void_LedTogg+0x74>
		  break;
		  ///******_ Toggle  GRN_LED Pin Value _******************///
		  case GRN_LED :
			  M_DIO_void_PinTog(GRN_LED_PORT, GRN_LED_PIN);
    2780:	83 e0       	ldi	r24, 0x03	; 3
    2782:	61 e0       	ldi	r22, 0x01	; 1
    2784:	0e 94 70 09 	call	0x12e0	; 0x12e0 <M_DIO_void_PinTog>
    2788:	04 c0       	rjmp	.+8      	; 0x2792 <H_LED_Void_LedTogg+0x74>
		  break;
		  ///******_ Toggle  YELLOW_LED Pin Value _******************///
		  case YELLOW_LED :
			  M_DIO_void_PinTog(YELLOW_LED_PORT,YELLOW_LED_PIN);
    278a:	83 e0       	ldi	r24, 0x03	; 3
    278c:	63 e0       	ldi	r22, 0x03	; 3
    278e:	0e 94 70 09 	call	0x12e0	; 0x12e0 <M_DIO_void_PinTog>
		  break;

		  default :   /*****error*****/          break;
		}

}
    2792:	0f 90       	pop	r0
    2794:	0f 90       	pop	r0
    2796:	0f 90       	pop	r0
    2798:	cf 91       	pop	r28
    279a:	df 91       	pop	r29
    279c:	08 95       	ret

0000279e <H_LED_Void_LedBlink>:
void H_LED_Void_LedBlink(u8 Local_u8_led)
{
    279e:	df 93       	push	r29
    27a0:	cf 93       	push	r28
    27a2:	cd b7       	in	r28, 0x3d	; 61
    27a4:	de b7       	in	r29, 0x3e	; 62
    27a6:	eb 97       	sbiw	r28, 0x3b	; 59
    27a8:	0f b6       	in	r0, 0x3f	; 63
    27aa:	f8 94       	cli
    27ac:	de bf       	out	0x3e, r29	; 62
    27ae:	0f be       	out	0x3f, r0	; 63
    27b0:	cd bf       	out	0x3d, r28	; 61
    27b2:	89 af       	std	Y+57, r24	; 0x39
	///***switch case to loop on LEDs****//
     switch(Local_u8_led)
    27b4:	89 ad       	ldd	r24, Y+57	; 0x39
    27b6:	28 2f       	mov	r18, r24
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	3b af       	std	Y+59, r19	; 0x3b
    27bc:	2a af       	std	Y+58, r18	; 0x3a
    27be:	8a ad       	ldd	r24, Y+58	; 0x3a
    27c0:	9b ad       	ldd	r25, Y+59	; 0x3b
    27c2:	82 30       	cpi	r24, 0x02	; 2
    27c4:	91 05       	cpc	r25, r1
    27c6:	c9 f0       	breq	.+50     	; 0x27fa <H_LED_Void_LedBlink+0x5c>
    27c8:	2a ad       	ldd	r18, Y+58	; 0x3a
    27ca:	3b ad       	ldd	r19, Y+59	; 0x3b
    27cc:	23 30       	cpi	r18, 0x03	; 3
    27ce:	31 05       	cpc	r19, r1
    27d0:	3c f4       	brge	.+14     	; 0x27e0 <H_LED_Void_LedBlink+0x42>
    27d2:	8a ad       	ldd	r24, Y+58	; 0x3a
    27d4:	9b ad       	ldd	r25, Y+59	; 0x3b
    27d6:	81 30       	cpi	r24, 0x01	; 1
    27d8:	91 05       	cpc	r25, r1
    27da:	09 f4       	brne	.+2      	; 0x27de <H_LED_Void_LedBlink+0x40>
    27dc:	8b c0       	rjmp	.+278    	; 0x28f4 <H_LED_Void_LedBlink+0x156>
    27de:	00 c2       	rjmp	.+1024   	; 0x2be0 <H_LED_Void_LedBlink+0x442>
    27e0:	2a ad       	ldd	r18, Y+58	; 0x3a
    27e2:	3b ad       	ldd	r19, Y+59	; 0x3b
    27e4:	23 30       	cpi	r18, 0x03	; 3
    27e6:	31 05       	cpc	r19, r1
    27e8:	09 f4       	brne	.+2      	; 0x27ec <H_LED_Void_LedBlink+0x4e>
    27ea:	01 c1       	rjmp	.+514    	; 0x29ee <H_LED_Void_LedBlink+0x250>
    27ec:	8a ad       	ldd	r24, Y+58	; 0x3a
    27ee:	9b ad       	ldd	r25, Y+59	; 0x3b
    27f0:	84 30       	cpi	r24, 0x04	; 4
    27f2:	91 05       	cpc	r25, r1
    27f4:	09 f4       	brne	.+2      	; 0x27f8 <H_LED_Void_LedBlink+0x5a>
    27f6:	78 c1       	rjmp	.+752    	; 0x2ae8 <H_LED_Void_LedBlink+0x34a>
    27f8:	f3 c1       	rjmp	.+998    	; 0x2be0 <H_LED_Void_LedBlink+0x442>
	 	{
        ///******_ Blink  BLUE_LED Pin Value _******************///
	 	case BLUE_LED:
	 		///******_Setting BLUE_LED Pin Value to HIGH to Light it_***********///
	 		M_DIO_void_SetPinValue(BLUE_LED_PORT,BLUE_LED_PIN, HIGH);
    27fa:	83 e0       	ldi	r24, 0x03	; 3
    27fc:	62 e0       	ldi	r22, 0x02	; 2
    27fe:	41 e0       	ldi	r20, 0x01	; 1
    2800:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
    2804:	80 e0       	ldi	r24, 0x00	; 0
    2806:	90 e5       	ldi	r25, 0x50	; 80
    2808:	a3 ec       	ldi	r26, 0xC3	; 195
    280a:	b7 e4       	ldi	r27, 0x47	; 71
    280c:	8d ab       	std	Y+53, r24	; 0x35
    280e:	9e ab       	std	Y+54, r25	; 0x36
    2810:	af ab       	std	Y+55, r26	; 0x37
    2812:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2814:	6d a9       	ldd	r22, Y+53	; 0x35
    2816:	7e a9       	ldd	r23, Y+54	; 0x36
    2818:	8f a9       	ldd	r24, Y+55	; 0x37
    281a:	98 ad       	ldd	r25, Y+56	; 0x38
    281c:	20 e0       	ldi	r18, 0x00	; 0
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	4a e7       	ldi	r20, 0x7A	; 122
    2822:	53 e4       	ldi	r21, 0x43	; 67
    2824:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2828:	dc 01       	movw	r26, r24
    282a:	cb 01       	movw	r24, r22
    282c:	89 ab       	std	Y+49, r24	; 0x31
    282e:	9a ab       	std	Y+50, r25	; 0x32
    2830:	ab ab       	std	Y+51, r26	; 0x33
    2832:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2834:	69 a9       	ldd	r22, Y+49	; 0x31
    2836:	7a a9       	ldd	r23, Y+50	; 0x32
    2838:	8b a9       	ldd	r24, Y+51	; 0x33
    283a:	9c a9       	ldd	r25, Y+52	; 0x34
    283c:	20 e0       	ldi	r18, 0x00	; 0
    283e:	30 e0       	ldi	r19, 0x00	; 0
    2840:	40 e8       	ldi	r20, 0x80	; 128
    2842:	5f e3       	ldi	r21, 0x3F	; 63
    2844:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2848:	88 23       	and	r24, r24
    284a:	2c f4       	brge	.+10     	; 0x2856 <H_LED_Void_LedBlink+0xb8>
		__ticks = 1;
    284c:	81 e0       	ldi	r24, 0x01	; 1
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	98 ab       	std	Y+48, r25	; 0x30
    2852:	8f a7       	std	Y+47, r24	; 0x2f
    2854:	3f c0       	rjmp	.+126    	; 0x28d4 <H_LED_Void_LedBlink+0x136>
	else if (__tmp > 65535)
    2856:	69 a9       	ldd	r22, Y+49	; 0x31
    2858:	7a a9       	ldd	r23, Y+50	; 0x32
    285a:	8b a9       	ldd	r24, Y+51	; 0x33
    285c:	9c a9       	ldd	r25, Y+52	; 0x34
    285e:	20 e0       	ldi	r18, 0x00	; 0
    2860:	3f ef       	ldi	r19, 0xFF	; 255
    2862:	4f e7       	ldi	r20, 0x7F	; 127
    2864:	57 e4       	ldi	r21, 0x47	; 71
    2866:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    286a:	18 16       	cp	r1, r24
    286c:	4c f5       	brge	.+82     	; 0x28c0 <H_LED_Void_LedBlink+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    286e:	6d a9       	ldd	r22, Y+53	; 0x35
    2870:	7e a9       	ldd	r23, Y+54	; 0x36
    2872:	8f a9       	ldd	r24, Y+55	; 0x37
    2874:	98 ad       	ldd	r25, Y+56	; 0x38
    2876:	20 e0       	ldi	r18, 0x00	; 0
    2878:	30 e0       	ldi	r19, 0x00	; 0
    287a:	40 e2       	ldi	r20, 0x20	; 32
    287c:	51 e4       	ldi	r21, 0x41	; 65
    287e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2882:	dc 01       	movw	r26, r24
    2884:	cb 01       	movw	r24, r22
    2886:	bc 01       	movw	r22, r24
    2888:	cd 01       	movw	r24, r26
    288a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    288e:	dc 01       	movw	r26, r24
    2890:	cb 01       	movw	r24, r22
    2892:	98 ab       	std	Y+48, r25	; 0x30
    2894:	8f a7       	std	Y+47, r24	; 0x2f
    2896:	0f c0       	rjmp	.+30     	; 0x28b6 <H_LED_Void_LedBlink+0x118>
    2898:	89 e1       	ldi	r24, 0x19	; 25
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	9e a7       	std	Y+46, r25	; 0x2e
    289e:	8d a7       	std	Y+45, r24	; 0x2d
    28a0:	8d a5       	ldd	r24, Y+45	; 0x2d
    28a2:	9e a5       	ldd	r25, Y+46	; 0x2e
    28a4:	01 97       	sbiw	r24, 0x01	; 1
    28a6:	f1 f7       	brne	.-4      	; 0x28a4 <H_LED_Void_LedBlink+0x106>
    28a8:	9e a7       	std	Y+46, r25	; 0x2e
    28aa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    28ae:	98 a9       	ldd	r25, Y+48	; 0x30
    28b0:	01 97       	sbiw	r24, 0x01	; 1
    28b2:	98 ab       	std	Y+48, r25	; 0x30
    28b4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    28b8:	98 a9       	ldd	r25, Y+48	; 0x30
    28ba:	00 97       	sbiw	r24, 0x00	; 0
    28bc:	69 f7       	brne	.-38     	; 0x2898 <H_LED_Void_LedBlink+0xfa>
    28be:	14 c0       	rjmp	.+40     	; 0x28e8 <H_LED_Void_LedBlink+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28c0:	69 a9       	ldd	r22, Y+49	; 0x31
    28c2:	7a a9       	ldd	r23, Y+50	; 0x32
    28c4:	8b a9       	ldd	r24, Y+51	; 0x33
    28c6:	9c a9       	ldd	r25, Y+52	; 0x34
    28c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28cc:	dc 01       	movw	r26, r24
    28ce:	cb 01       	movw	r24, r22
    28d0:	98 ab       	std	Y+48, r25	; 0x30
    28d2:	8f a7       	std	Y+47, r24	; 0x2f
    28d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    28d6:	98 a9       	ldd	r25, Y+48	; 0x30
    28d8:	9c a7       	std	Y+44, r25	; 0x2c
    28da:	8b a7       	std	Y+43, r24	; 0x2b
    28dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    28de:	9c a5       	ldd	r25, Y+44	; 0x2c
    28e0:	01 97       	sbiw	r24, 0x01	; 1
    28e2:	f1 f7       	brne	.-4      	; 0x28e0 <H_LED_Void_LedBlink+0x142>
    28e4:	9c a7       	std	Y+44, r25	; 0x2c
    28e6:	8b a7       	std	Y+43, r24	; 0x2b
	 		_delay_ms(LED_DELAY_TIME);  //delay for 10000ms
	 		///******_Setting BLUE_LED Pin Value to LOW to Turn it OFF_***********///
	 		M_DIO_void_SetPinValue(BLUE_LED_PORT,BLUE_LED_PIN, LOW);
    28e8:	83 e0       	ldi	r24, 0x03	; 3
    28ea:	62 e0       	ldi	r22, 0x02	; 2
    28ec:	40 e0       	ldi	r20, 0x00	; 0
    28ee:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
    28f2:	76 c1       	rjmp	.+748    	; 0x2be0 <H_LED_Void_LedBlink+0x442>
	 	break;
	    ///******_ Blink  RED_LED Pin Value _******************///
		case RED_LED :
			///******_Setting RED_LED Pin Value to HIGH to Light it_***********///
			M_DIO_void_SetPinValue( RED_LED_PORT,RED_LED_PIN, HIGH);
    28f4:	83 e0       	ldi	r24, 0x03	; 3
    28f6:	60 e0       	ldi	r22, 0x00	; 0
    28f8:	41 e0       	ldi	r20, 0x01	; 1
    28fa:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
    28fe:	80 e0       	ldi	r24, 0x00	; 0
    2900:	90 e5       	ldi	r25, 0x50	; 80
    2902:	a3 ec       	ldi	r26, 0xC3	; 195
    2904:	b7 e4       	ldi	r27, 0x47	; 71
    2906:	8f a3       	std	Y+39, r24	; 0x27
    2908:	98 a7       	std	Y+40, r25	; 0x28
    290a:	a9 a7       	std	Y+41, r26	; 0x29
    290c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    290e:	6f a1       	ldd	r22, Y+39	; 0x27
    2910:	78 a5       	ldd	r23, Y+40	; 0x28
    2912:	89 a5       	ldd	r24, Y+41	; 0x29
    2914:	9a a5       	ldd	r25, Y+42	; 0x2a
    2916:	20 e0       	ldi	r18, 0x00	; 0
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	4a e7       	ldi	r20, 0x7A	; 122
    291c:	53 e4       	ldi	r21, 0x43	; 67
    291e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2922:	dc 01       	movw	r26, r24
    2924:	cb 01       	movw	r24, r22
    2926:	8b a3       	std	Y+35, r24	; 0x23
    2928:	9c a3       	std	Y+36, r25	; 0x24
    292a:	ad a3       	std	Y+37, r26	; 0x25
    292c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    292e:	6b a1       	ldd	r22, Y+35	; 0x23
    2930:	7c a1       	ldd	r23, Y+36	; 0x24
    2932:	8d a1       	ldd	r24, Y+37	; 0x25
    2934:	9e a1       	ldd	r25, Y+38	; 0x26
    2936:	20 e0       	ldi	r18, 0x00	; 0
    2938:	30 e0       	ldi	r19, 0x00	; 0
    293a:	40 e8       	ldi	r20, 0x80	; 128
    293c:	5f e3       	ldi	r21, 0x3F	; 63
    293e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2942:	88 23       	and	r24, r24
    2944:	2c f4       	brge	.+10     	; 0x2950 <H_LED_Void_LedBlink+0x1b2>
		__ticks = 1;
    2946:	81 e0       	ldi	r24, 0x01	; 1
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	9a a3       	std	Y+34, r25	; 0x22
    294c:	89 a3       	std	Y+33, r24	; 0x21
    294e:	3f c0       	rjmp	.+126    	; 0x29ce <H_LED_Void_LedBlink+0x230>
	else if (__tmp > 65535)
    2950:	6b a1       	ldd	r22, Y+35	; 0x23
    2952:	7c a1       	ldd	r23, Y+36	; 0x24
    2954:	8d a1       	ldd	r24, Y+37	; 0x25
    2956:	9e a1       	ldd	r25, Y+38	; 0x26
    2958:	20 e0       	ldi	r18, 0x00	; 0
    295a:	3f ef       	ldi	r19, 0xFF	; 255
    295c:	4f e7       	ldi	r20, 0x7F	; 127
    295e:	57 e4       	ldi	r21, 0x47	; 71
    2960:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2964:	18 16       	cp	r1, r24
    2966:	4c f5       	brge	.+82     	; 0x29ba <H_LED_Void_LedBlink+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2968:	6f a1       	ldd	r22, Y+39	; 0x27
    296a:	78 a5       	ldd	r23, Y+40	; 0x28
    296c:	89 a5       	ldd	r24, Y+41	; 0x29
    296e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2970:	20 e0       	ldi	r18, 0x00	; 0
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	40 e2       	ldi	r20, 0x20	; 32
    2976:	51 e4       	ldi	r21, 0x41	; 65
    2978:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    297c:	dc 01       	movw	r26, r24
    297e:	cb 01       	movw	r24, r22
    2980:	bc 01       	movw	r22, r24
    2982:	cd 01       	movw	r24, r26
    2984:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2988:	dc 01       	movw	r26, r24
    298a:	cb 01       	movw	r24, r22
    298c:	9a a3       	std	Y+34, r25	; 0x22
    298e:	89 a3       	std	Y+33, r24	; 0x21
    2990:	0f c0       	rjmp	.+30     	; 0x29b0 <H_LED_Void_LedBlink+0x212>
    2992:	89 e1       	ldi	r24, 0x19	; 25
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	98 a3       	std	Y+32, r25	; 0x20
    2998:	8f 8f       	std	Y+31, r24	; 0x1f
    299a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    299c:	98 a1       	ldd	r25, Y+32	; 0x20
    299e:	01 97       	sbiw	r24, 0x01	; 1
    29a0:	f1 f7       	brne	.-4      	; 0x299e <H_LED_Void_LedBlink+0x200>
    29a2:	98 a3       	std	Y+32, r25	; 0x20
    29a4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29a6:	89 a1       	ldd	r24, Y+33	; 0x21
    29a8:	9a a1       	ldd	r25, Y+34	; 0x22
    29aa:	01 97       	sbiw	r24, 0x01	; 1
    29ac:	9a a3       	std	Y+34, r25	; 0x22
    29ae:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29b0:	89 a1       	ldd	r24, Y+33	; 0x21
    29b2:	9a a1       	ldd	r25, Y+34	; 0x22
    29b4:	00 97       	sbiw	r24, 0x00	; 0
    29b6:	69 f7       	brne	.-38     	; 0x2992 <H_LED_Void_LedBlink+0x1f4>
    29b8:	14 c0       	rjmp	.+40     	; 0x29e2 <H_LED_Void_LedBlink+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ba:	6b a1       	ldd	r22, Y+35	; 0x23
    29bc:	7c a1       	ldd	r23, Y+36	; 0x24
    29be:	8d a1       	ldd	r24, Y+37	; 0x25
    29c0:	9e a1       	ldd	r25, Y+38	; 0x26
    29c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c6:	dc 01       	movw	r26, r24
    29c8:	cb 01       	movw	r24, r22
    29ca:	9a a3       	std	Y+34, r25	; 0x22
    29cc:	89 a3       	std	Y+33, r24	; 0x21
    29ce:	89 a1       	ldd	r24, Y+33	; 0x21
    29d0:	9a a1       	ldd	r25, Y+34	; 0x22
    29d2:	9e 8f       	std	Y+30, r25	; 0x1e
    29d4:	8d 8f       	std	Y+29, r24	; 0x1d
    29d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29d8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29da:	01 97       	sbiw	r24, 0x01	; 1
    29dc:	f1 f7       	brne	.-4      	; 0x29da <H_LED_Void_LedBlink+0x23c>
    29de:	9e 8f       	std	Y+30, r25	; 0x1e
    29e0:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(LED_DELAY_TIME); //delay for 10000ms
			///******_Setting RED_LED Pin Value to LOW to Turn it OFF_***********///
			M_DIO_void_SetPinValue( RED_LED_PORT,RED_LED_PIN, LOW);
    29e2:	83 e0       	ldi	r24, 0x03	; 3
    29e4:	60 e0       	ldi	r22, 0x00	; 0
    29e6:	40 e0       	ldi	r20, 0x00	; 0
    29e8:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
    29ec:	f9 c0       	rjmp	.+498    	; 0x2be0 <H_LED_Void_LedBlink+0x442>
		break;
		///******_ Blink  GRN_LED Pin Value _******************///
     	case GRN_LED :
     		///******_Setting GRN_LED Pin Value to HIGH to Light it_***********///
     		M_DIO_void_SetPinValue(GRN_LED_PORT,GRN_LED_PIN, HIGH);
    29ee:	83 e0       	ldi	r24, 0x03	; 3
    29f0:	61 e0       	ldi	r22, 0x01	; 1
    29f2:	41 e0       	ldi	r20, 0x01	; 1
    29f4:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
    29f8:	80 e0       	ldi	r24, 0x00	; 0
    29fa:	90 e5       	ldi	r25, 0x50	; 80
    29fc:	a3 ec       	ldi	r26, 0xC3	; 195
    29fe:	b7 e4       	ldi	r27, 0x47	; 71
    2a00:	89 8f       	std	Y+25, r24	; 0x19
    2a02:	9a 8f       	std	Y+26, r25	; 0x1a
    2a04:	ab 8f       	std	Y+27, r26	; 0x1b
    2a06:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a08:	69 8d       	ldd	r22, Y+25	; 0x19
    2a0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a10:	20 e0       	ldi	r18, 0x00	; 0
    2a12:	30 e0       	ldi	r19, 0x00	; 0
    2a14:	4a e7       	ldi	r20, 0x7A	; 122
    2a16:	53 e4       	ldi	r21, 0x43	; 67
    2a18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a1c:	dc 01       	movw	r26, r24
    2a1e:	cb 01       	movw	r24, r22
    2a20:	8d 8b       	std	Y+21, r24	; 0x15
    2a22:	9e 8b       	std	Y+22, r25	; 0x16
    2a24:	af 8b       	std	Y+23, r26	; 0x17
    2a26:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a28:	6d 89       	ldd	r22, Y+21	; 0x15
    2a2a:	7e 89       	ldd	r23, Y+22	; 0x16
    2a2c:	8f 89       	ldd	r24, Y+23	; 0x17
    2a2e:	98 8d       	ldd	r25, Y+24	; 0x18
    2a30:	20 e0       	ldi	r18, 0x00	; 0
    2a32:	30 e0       	ldi	r19, 0x00	; 0
    2a34:	40 e8       	ldi	r20, 0x80	; 128
    2a36:	5f e3       	ldi	r21, 0x3F	; 63
    2a38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a3c:	88 23       	and	r24, r24
    2a3e:	2c f4       	brge	.+10     	; 0x2a4a <H_LED_Void_LedBlink+0x2ac>
		__ticks = 1;
    2a40:	81 e0       	ldi	r24, 0x01	; 1
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	9c 8b       	std	Y+20, r25	; 0x14
    2a46:	8b 8b       	std	Y+19, r24	; 0x13
    2a48:	3f c0       	rjmp	.+126    	; 0x2ac8 <H_LED_Void_LedBlink+0x32a>
	else if (__tmp > 65535)
    2a4a:	6d 89       	ldd	r22, Y+21	; 0x15
    2a4c:	7e 89       	ldd	r23, Y+22	; 0x16
    2a4e:	8f 89       	ldd	r24, Y+23	; 0x17
    2a50:	98 8d       	ldd	r25, Y+24	; 0x18
    2a52:	20 e0       	ldi	r18, 0x00	; 0
    2a54:	3f ef       	ldi	r19, 0xFF	; 255
    2a56:	4f e7       	ldi	r20, 0x7F	; 127
    2a58:	57 e4       	ldi	r21, 0x47	; 71
    2a5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a5e:	18 16       	cp	r1, r24
    2a60:	4c f5       	brge	.+82     	; 0x2ab4 <H_LED_Void_LedBlink+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a62:	69 8d       	ldd	r22, Y+25	; 0x19
    2a64:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a66:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a68:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a6a:	20 e0       	ldi	r18, 0x00	; 0
    2a6c:	30 e0       	ldi	r19, 0x00	; 0
    2a6e:	40 e2       	ldi	r20, 0x20	; 32
    2a70:	51 e4       	ldi	r21, 0x41	; 65
    2a72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a76:	dc 01       	movw	r26, r24
    2a78:	cb 01       	movw	r24, r22
    2a7a:	bc 01       	movw	r22, r24
    2a7c:	cd 01       	movw	r24, r26
    2a7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a82:	dc 01       	movw	r26, r24
    2a84:	cb 01       	movw	r24, r22
    2a86:	9c 8b       	std	Y+20, r25	; 0x14
    2a88:	8b 8b       	std	Y+19, r24	; 0x13
    2a8a:	0f c0       	rjmp	.+30     	; 0x2aaa <H_LED_Void_LedBlink+0x30c>
    2a8c:	89 e1       	ldi	r24, 0x19	; 25
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	9a 8b       	std	Y+18, r25	; 0x12
    2a92:	89 8b       	std	Y+17, r24	; 0x11
    2a94:	89 89       	ldd	r24, Y+17	; 0x11
    2a96:	9a 89       	ldd	r25, Y+18	; 0x12
    2a98:	01 97       	sbiw	r24, 0x01	; 1
    2a9a:	f1 f7       	brne	.-4      	; 0x2a98 <H_LED_Void_LedBlink+0x2fa>
    2a9c:	9a 8b       	std	Y+18, r25	; 0x12
    2a9e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aa0:	8b 89       	ldd	r24, Y+19	; 0x13
    2aa2:	9c 89       	ldd	r25, Y+20	; 0x14
    2aa4:	01 97       	sbiw	r24, 0x01	; 1
    2aa6:	9c 8b       	std	Y+20, r25	; 0x14
    2aa8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aaa:	8b 89       	ldd	r24, Y+19	; 0x13
    2aac:	9c 89       	ldd	r25, Y+20	; 0x14
    2aae:	00 97       	sbiw	r24, 0x00	; 0
    2ab0:	69 f7       	brne	.-38     	; 0x2a8c <H_LED_Void_LedBlink+0x2ee>
    2ab2:	14 c0       	rjmp	.+40     	; 0x2adc <H_LED_Void_LedBlink+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ab4:	6d 89       	ldd	r22, Y+21	; 0x15
    2ab6:	7e 89       	ldd	r23, Y+22	; 0x16
    2ab8:	8f 89       	ldd	r24, Y+23	; 0x17
    2aba:	98 8d       	ldd	r25, Y+24	; 0x18
    2abc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac0:	dc 01       	movw	r26, r24
    2ac2:	cb 01       	movw	r24, r22
    2ac4:	9c 8b       	std	Y+20, r25	; 0x14
    2ac6:	8b 8b       	std	Y+19, r24	; 0x13
    2ac8:	8b 89       	ldd	r24, Y+19	; 0x13
    2aca:	9c 89       	ldd	r25, Y+20	; 0x14
    2acc:	98 8b       	std	Y+16, r25	; 0x10
    2ace:	8f 87       	std	Y+15, r24	; 0x0f
    2ad0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ad2:	98 89       	ldd	r25, Y+16	; 0x10
    2ad4:	01 97       	sbiw	r24, 0x01	; 1
    2ad6:	f1 f7       	brne	.-4      	; 0x2ad4 <H_LED_Void_LedBlink+0x336>
    2ad8:	98 8b       	std	Y+16, r25	; 0x10
    2ada:	8f 87       	std	Y+15, r24	; 0x0f
     		_delay_ms(LED_DELAY_TIME);  //delay for 10000ms
     		///******_Setting GRN_LED Pin Value to LOW to Turn it OFF_***********///
     		M_DIO_void_SetPinValue(GRN_LED_PORT,GRN_LED_PIN, LOW);
    2adc:	83 e0       	ldi	r24, 0x03	; 3
    2ade:	61 e0       	ldi	r22, 0x01	; 1
    2ae0:	40 e0       	ldi	r20, 0x00	; 0
    2ae2:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
    2ae6:	7c c0       	rjmp	.+248    	; 0x2be0 <H_LED_Void_LedBlink+0x442>
     	break;

     	///******_ Blink  YELLOW_LED Pin Value _******************///
     	case YELLOW_LED :
		///******_Setting YELLOW_LED Pin Value to HIGH to Light it_***********///
     		M_DIO_void_SetPinValue(YELLOW_LED_PORT,YELLOW_LED_PIN, HIGH);
    2ae8:	83 e0       	ldi	r24, 0x03	; 3
    2aea:	63 e0       	ldi	r22, 0x03	; 3
    2aec:	41 e0       	ldi	r20, 0x01	; 1
    2aee:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
    2af2:	80 e0       	ldi	r24, 0x00	; 0
    2af4:	90 e5       	ldi	r25, 0x50	; 80
    2af6:	a3 ec       	ldi	r26, 0xC3	; 195
    2af8:	b7 e4       	ldi	r27, 0x47	; 71
    2afa:	8b 87       	std	Y+11, r24	; 0x0b
    2afc:	9c 87       	std	Y+12, r25	; 0x0c
    2afe:	ad 87       	std	Y+13, r26	; 0x0d
    2b00:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b02:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b04:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b06:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b08:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b0a:	20 e0       	ldi	r18, 0x00	; 0
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	4a e7       	ldi	r20, 0x7A	; 122
    2b10:	53 e4       	ldi	r21, 0x43	; 67
    2b12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	8f 83       	std	Y+7, r24	; 0x07
    2b1c:	98 87       	std	Y+8, r25	; 0x08
    2b1e:	a9 87       	std	Y+9, r26	; 0x09
    2b20:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b22:	6f 81       	ldd	r22, Y+7	; 0x07
    2b24:	78 85       	ldd	r23, Y+8	; 0x08
    2b26:	89 85       	ldd	r24, Y+9	; 0x09
    2b28:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b2a:	20 e0       	ldi	r18, 0x00	; 0
    2b2c:	30 e0       	ldi	r19, 0x00	; 0
    2b2e:	40 e8       	ldi	r20, 0x80	; 128
    2b30:	5f e3       	ldi	r21, 0x3F	; 63
    2b32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b36:	88 23       	and	r24, r24
    2b38:	2c f4       	brge	.+10     	; 0x2b44 <H_LED_Void_LedBlink+0x3a6>
		__ticks = 1;
    2b3a:	81 e0       	ldi	r24, 0x01	; 1
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	9e 83       	std	Y+6, r25	; 0x06
    2b40:	8d 83       	std	Y+5, r24	; 0x05
    2b42:	3f c0       	rjmp	.+126    	; 0x2bc2 <H_LED_Void_LedBlink+0x424>
	else if (__tmp > 65535)
    2b44:	6f 81       	ldd	r22, Y+7	; 0x07
    2b46:	78 85       	ldd	r23, Y+8	; 0x08
    2b48:	89 85       	ldd	r24, Y+9	; 0x09
    2b4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b4c:	20 e0       	ldi	r18, 0x00	; 0
    2b4e:	3f ef       	ldi	r19, 0xFF	; 255
    2b50:	4f e7       	ldi	r20, 0x7F	; 127
    2b52:	57 e4       	ldi	r21, 0x47	; 71
    2b54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b58:	18 16       	cp	r1, r24
    2b5a:	4c f5       	brge	.+82     	; 0x2bae <H_LED_Void_LedBlink+0x410>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b60:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b62:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b64:	20 e0       	ldi	r18, 0x00	; 0
    2b66:	30 e0       	ldi	r19, 0x00	; 0
    2b68:	40 e2       	ldi	r20, 0x20	; 32
    2b6a:	51 e4       	ldi	r21, 0x41	; 65
    2b6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b70:	dc 01       	movw	r26, r24
    2b72:	cb 01       	movw	r24, r22
    2b74:	bc 01       	movw	r22, r24
    2b76:	cd 01       	movw	r24, r26
    2b78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b7c:	dc 01       	movw	r26, r24
    2b7e:	cb 01       	movw	r24, r22
    2b80:	9e 83       	std	Y+6, r25	; 0x06
    2b82:	8d 83       	std	Y+5, r24	; 0x05
    2b84:	0f c0       	rjmp	.+30     	; 0x2ba4 <H_LED_Void_LedBlink+0x406>
    2b86:	89 e1       	ldi	r24, 0x19	; 25
    2b88:	90 e0       	ldi	r25, 0x00	; 0
    2b8a:	9c 83       	std	Y+4, r25	; 0x04
    2b8c:	8b 83       	std	Y+3, r24	; 0x03
    2b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b90:	9c 81       	ldd	r25, Y+4	; 0x04
    2b92:	01 97       	sbiw	r24, 0x01	; 1
    2b94:	f1 f7       	brne	.-4      	; 0x2b92 <H_LED_Void_LedBlink+0x3f4>
    2b96:	9c 83       	std	Y+4, r25	; 0x04
    2b98:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b9c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b9e:	01 97       	sbiw	r24, 0x01	; 1
    2ba0:	9e 83       	std	Y+6, r25	; 0x06
    2ba2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ba4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ba8:	00 97       	sbiw	r24, 0x00	; 0
    2baa:	69 f7       	brne	.-38     	; 0x2b86 <H_LED_Void_LedBlink+0x3e8>
    2bac:	14 c0       	rjmp	.+40     	; 0x2bd6 <H_LED_Void_LedBlink+0x438>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bae:	6f 81       	ldd	r22, Y+7	; 0x07
    2bb0:	78 85       	ldd	r23, Y+8	; 0x08
    2bb2:	89 85       	ldd	r24, Y+9	; 0x09
    2bb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bba:	dc 01       	movw	r26, r24
    2bbc:	cb 01       	movw	r24, r22
    2bbe:	9e 83       	std	Y+6, r25	; 0x06
    2bc0:	8d 83       	std	Y+5, r24	; 0x05
    2bc2:	8d 81       	ldd	r24, Y+5	; 0x05
    2bc4:	9e 81       	ldd	r25, Y+6	; 0x06
    2bc6:	9a 83       	std	Y+2, r25	; 0x02
    2bc8:	89 83       	std	Y+1, r24	; 0x01
    2bca:	89 81       	ldd	r24, Y+1	; 0x01
    2bcc:	9a 81       	ldd	r25, Y+2	; 0x02
    2bce:	01 97       	sbiw	r24, 0x01	; 1
    2bd0:	f1 f7       	brne	.-4      	; 0x2bce <H_LED_Void_LedBlink+0x430>
    2bd2:	9a 83       	std	Y+2, r25	; 0x02
    2bd4:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(LED_DELAY_TIME);  //delay for 10000ms
		///******_Setting YELLOW_LED Pin Value to LOW to Turn it OFF_***********///
		    M_DIO_void_SetPinValue(YELLOW_LED_PORT,YELLOW_LED_PIN, LOW);
    2bd6:	83 e0       	ldi	r24, 0x03	; 3
    2bd8:	63 e0       	ldi	r22, 0x03	; 3
    2bda:	40 e0       	ldi	r20, 0x00	; 0
    2bdc:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
		break;


		default :   /*****error*****/    break;

}    	}
    2be0:	eb 96       	adiw	r28, 0x3b	; 59
    2be2:	0f b6       	in	r0, 0x3f	; 63
    2be4:	f8 94       	cli
    2be6:	de bf       	out	0x3e, r29	; 62
    2be8:	0f be       	out	0x3f, r0	; 63
    2bea:	cd bf       	out	0x3d, r28	; 61
    2bec:	cf 91       	pop	r28
    2bee:	df 91       	pop	r29
    2bf0:	08 95       	ret

00002bf2 <H_LCD_Void_LCDInt>:

/// ***************MACROS************//
/// **************FUNCTIONS********//

void H_LCD_Void_LCDInt(void)
{
    2bf2:	df 93       	push	r29
    2bf4:	cf 93       	push	r28
    2bf6:	cd b7       	in	r28, 0x3d	; 61
    2bf8:	de b7       	in	r29, 0x3e	; 62
    2bfa:	2e 97       	sbiw	r28, 0x0e	; 14
    2bfc:	0f b6       	in	r0, 0x3f	; 63
    2bfe:	f8 94       	cli
    2c00:	de bf       	out	0x3e, r29	; 62
    2c02:	0f be       	out	0x3f, r0	; 63
    2c04:	cd bf       	out	0x3d, r28	; 61
	H_LCD_Void_LCDWriteCommand(DisplayON_CursorOFF);  /// set LCD DisplayON


#elif  LCD_MODE == Activate_4_bit_mode   ///****4_bit_mode**********///
	///**SetPinDirection for LCD_DATA_PINS from LCD_DATA4 to LCD_DATA7 to OUTPUT////
	M_DIO_void_SetPinDirection(PORTB_ID,LCD_DATA4_PIN,OUTPUT ); ///LCD_DATA4_PIN
    2c06:	82 e0       	ldi	r24, 0x02	; 2
    2c08:	64 e0       	ldi	r22, 0x04	; 4
    2c0a:	41 e0       	ldi	r20, 0x01	; 1
    2c0c:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <M_DIO_void_SetPinDirection>
	M_DIO_void_SetPinDirection(PORTB_ID,LCD_DATA5_PIN,OUTPUT ); ///LCD_DATA5_PIN
    2c10:	82 e0       	ldi	r24, 0x02	; 2
    2c12:	65 e0       	ldi	r22, 0x05	; 5
    2c14:	41 e0       	ldi	r20, 0x01	; 1
    2c16:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <M_DIO_void_SetPinDirection>
	M_DIO_void_SetPinDirection(PORTB_ID,LCD_DATA6_PIN,OUTPUT ); ///LCD_DATA6_PIN
    2c1a:	82 e0       	ldi	r24, 0x02	; 2
    2c1c:	66 e0       	ldi	r22, 0x06	; 6
    2c1e:	41 e0       	ldi	r20, 0x01	; 1
    2c20:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <M_DIO_void_SetPinDirection>
	M_DIO_void_SetPinDirection(PORTB_ID,LCD_DATA7_PIN,OUTPUT ); ///LCD_DATA7_PIN
    2c24:	82 e0       	ldi	r24, 0x02	; 2
    2c26:	67 e0       	ldi	r22, 0x07	; 7
    2c28:	41 e0       	ldi	r20, 0x01	; 1
    2c2a:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <M_DIO_void_SetPinDirection>
	///**SetPinDirection for LCD_EN_PIN to OUTPUT////
	M_DIO_void_SetPinDirection(LCD_EN_PORT,LCD_EN_PIN,OUTPUT );
    2c2e:	84 e0       	ldi	r24, 0x04	; 4
    2c30:	67 e0       	ldi	r22, 0x07	; 7
    2c32:	41 e0       	ldi	r20, 0x01	; 1
    2c34:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <M_DIO_void_SetPinDirection>
	///**SetPinDirection for LCD_EN_PIN to OUTPUT////
	M_DIO_void_SetPinDirection(LCD_RS_PORT,LCD_RS_PIN,OUTPUT );
    2c38:	84 e0       	ldi	r24, 0x04	; 4
    2c3a:	66 e0       	ldi	r22, 0x06	; 6
    2c3c:	41 e0       	ldi	r20, 0x01	; 1
    2c3e:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <M_DIO_void_SetPinDirection>
    2c42:	80 e0       	ldi	r24, 0x00	; 0
    2c44:	90 e4       	ldi	r25, 0x40	; 64
    2c46:	ac e1       	ldi	r26, 0x1C	; 28
    2c48:	b6 e4       	ldi	r27, 0x46	; 70
    2c4a:	8b 87       	std	Y+11, r24	; 0x0b
    2c4c:	9c 87       	std	Y+12, r25	; 0x0c
    2c4e:	ad 87       	std	Y+13, r26	; 0x0d
    2c50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c52:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c54:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c56:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c58:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c5a:	20 e0       	ldi	r18, 0x00	; 0
    2c5c:	30 e0       	ldi	r19, 0x00	; 0
    2c5e:	4a e7       	ldi	r20, 0x7A	; 122
    2c60:	53 e4       	ldi	r21, 0x43	; 67
    2c62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c66:	dc 01       	movw	r26, r24
    2c68:	cb 01       	movw	r24, r22
    2c6a:	8f 83       	std	Y+7, r24	; 0x07
    2c6c:	98 87       	std	Y+8, r25	; 0x08
    2c6e:	a9 87       	std	Y+9, r26	; 0x09
    2c70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c72:	6f 81       	ldd	r22, Y+7	; 0x07
    2c74:	78 85       	ldd	r23, Y+8	; 0x08
    2c76:	89 85       	ldd	r24, Y+9	; 0x09
    2c78:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c7a:	20 e0       	ldi	r18, 0x00	; 0
    2c7c:	30 e0       	ldi	r19, 0x00	; 0
    2c7e:	40 e8       	ldi	r20, 0x80	; 128
    2c80:	5f e3       	ldi	r21, 0x3F	; 63
    2c82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c86:	88 23       	and	r24, r24
    2c88:	2c f4       	brge	.+10     	; 0x2c94 <H_LCD_Void_LCDInt+0xa2>
		__ticks = 1;
    2c8a:	81 e0       	ldi	r24, 0x01	; 1
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	9e 83       	std	Y+6, r25	; 0x06
    2c90:	8d 83       	std	Y+5, r24	; 0x05
    2c92:	3f c0       	rjmp	.+126    	; 0x2d12 <H_LCD_Void_LCDInt+0x120>
	else if (__tmp > 65535)
    2c94:	6f 81       	ldd	r22, Y+7	; 0x07
    2c96:	78 85       	ldd	r23, Y+8	; 0x08
    2c98:	89 85       	ldd	r24, Y+9	; 0x09
    2c9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c9c:	20 e0       	ldi	r18, 0x00	; 0
    2c9e:	3f ef       	ldi	r19, 0xFF	; 255
    2ca0:	4f e7       	ldi	r20, 0x7F	; 127
    2ca2:	57 e4       	ldi	r21, 0x47	; 71
    2ca4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ca8:	18 16       	cp	r1, r24
    2caa:	4c f5       	brge	.+82     	; 0x2cfe <H_LCD_Void_LCDInt+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cac:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cae:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cb4:	20 e0       	ldi	r18, 0x00	; 0
    2cb6:	30 e0       	ldi	r19, 0x00	; 0
    2cb8:	40 e2       	ldi	r20, 0x20	; 32
    2cba:	51 e4       	ldi	r21, 0x41	; 65
    2cbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc0:	dc 01       	movw	r26, r24
    2cc2:	cb 01       	movw	r24, r22
    2cc4:	bc 01       	movw	r22, r24
    2cc6:	cd 01       	movw	r24, r26
    2cc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ccc:	dc 01       	movw	r26, r24
    2cce:	cb 01       	movw	r24, r22
    2cd0:	9e 83       	std	Y+6, r25	; 0x06
    2cd2:	8d 83       	std	Y+5, r24	; 0x05
    2cd4:	0f c0       	rjmp	.+30     	; 0x2cf4 <H_LCD_Void_LCDInt+0x102>
    2cd6:	89 e1       	ldi	r24, 0x19	; 25
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	9c 83       	std	Y+4, r25	; 0x04
    2cdc:	8b 83       	std	Y+3, r24	; 0x03
    2cde:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ce2:	01 97       	sbiw	r24, 0x01	; 1
    2ce4:	f1 f7       	brne	.-4      	; 0x2ce2 <H_LCD_Void_LCDInt+0xf0>
    2ce6:	9c 83       	std	Y+4, r25	; 0x04
    2ce8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cea:	8d 81       	ldd	r24, Y+5	; 0x05
    2cec:	9e 81       	ldd	r25, Y+6	; 0x06
    2cee:	01 97       	sbiw	r24, 0x01	; 1
    2cf0:	9e 83       	std	Y+6, r25	; 0x06
    2cf2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cf4:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf6:	9e 81       	ldd	r25, Y+6	; 0x06
    2cf8:	00 97       	sbiw	r24, 0x00	; 0
    2cfa:	69 f7       	brne	.-38     	; 0x2cd6 <H_LCD_Void_LCDInt+0xe4>
    2cfc:	14 c0       	rjmp	.+40     	; 0x2d26 <H_LCD_Void_LCDInt+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cfe:	6f 81       	ldd	r22, Y+7	; 0x07
    2d00:	78 85       	ldd	r23, Y+8	; 0x08
    2d02:	89 85       	ldd	r24, Y+9	; 0x09
    2d04:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d0a:	dc 01       	movw	r26, r24
    2d0c:	cb 01       	movw	r24, r22
    2d0e:	9e 83       	std	Y+6, r25	; 0x06
    2d10:	8d 83       	std	Y+5, r24	; 0x05
    2d12:	8d 81       	ldd	r24, Y+5	; 0x05
    2d14:	9e 81       	ldd	r25, Y+6	; 0x06
    2d16:	9a 83       	std	Y+2, r25	; 0x02
    2d18:	89 83       	std	Y+1, r24	; 0x01
    2d1a:	89 81       	ldd	r24, Y+1	; 0x01
    2d1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d1e:	01 97       	sbiw	r24, 0x01	; 1
    2d20:	f1 f7       	brne	.-4      	; 0x2d1e <H_LCD_Void_LCDInt+0x12c>
    2d22:	9a 83       	std	Y+2, r25	; 0x02
    2d24:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10000);   /// delay for 1 second to give LCD Microcontroller time to start
	///****************  LCD Commands***********///
	H_LCD_Void_LCDWriteCommand(_4_bit_mode_Command1);  ///
    2d26:	83 e3       	ldi	r24, 0x33	; 51
    2d28:	0e 94 c0 18 	call	0x3180	; 0x3180 <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(_4_bit_mode_Command2);  /// set 4_bit_mode
    2d2c:	82 e3       	ldi	r24, 0x32	; 50
    2d2e:	0e 94 c0 18 	call	0x3180	; 0x3180 <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(_4_bit_mode_Command3);  ///
    2d32:	88 e2       	ldi	r24, 0x28	; 40
    2d34:	0e 94 c0 18 	call	0x3180	; 0x3180 <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(DisplayON_CursorOFF);  /// set LCD DisplayON
    2d38:	8c e0       	ldi	r24, 0x0C	; 12
    2d3a:	0e 94 c0 18 	call	0x3180	; 0x3180 <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(Return_Home);         /// LCD start from home
    2d3e:	82 e0       	ldi	r24, 0x02	; 2
    2d40:	0e 94 c0 18 	call	0x3180	; 0x3180 <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(Clear_screen);        /// Clear LCD screen
    2d44:	81 e0       	ldi	r24, 0x01	; 1
    2d46:	0e 94 c0 18 	call	0x3180	; 0x3180 <H_LCD_Void_LCDWriteCommand>

#endif
}
    2d4a:	2e 96       	adiw	r28, 0x0e	; 14
    2d4c:	0f b6       	in	r0, 0x3f	; 63
    2d4e:	f8 94       	cli
    2d50:	de bf       	out	0x3e, r29	; 62
    2d52:	0f be       	out	0x3f, r0	; 63
    2d54:	cd bf       	out	0x3d, r28	; 61
    2d56:	cf 91       	pop	r28
    2d58:	df 91       	pop	r29
    2d5a:	08 95       	ret

00002d5c <H_LCD_Void_LCDDisplayCharacter>:
///***********Function to DisplayCharacter on the LCD*****8///
void H_LCD_Void_LCDDisplayCharacter(u8 Local_u8_character)
{
    2d5c:	df 93       	push	r29
    2d5e:	cf 93       	push	r28
    2d60:	cd b7       	in	r28, 0x3d	; 61
    2d62:	de b7       	in	r29, 0x3e	; 62
    2d64:	e9 97       	sbiw	r28, 0x39	; 57
    2d66:	0f b6       	in	r0, 0x3f	; 63
    2d68:	f8 94       	cli
    2d6a:	de bf       	out	0x3e, r29	; 62
    2d6c:	0f be       	out	0x3f, r0	; 63
    2d6e:	cd bf       	out	0x3d, r28	; 61
    2d70:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);     /// delay for 1 millisecond
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);  /// Set LCD_EN_PIN value to LOW

#elif LCD_MODE == Activate_4_bit_mode  ///****4_bit_mode**********///
	///*******Set LCD_RS_PIN value to HIGH *********///
	M_DIO_void_SetPinValue(LCD_RS_PORT, LCD_RS_PIN, HIGH);
    2d72:	84 e0       	ldi	r24, 0x04	; 4
    2d74:	66 e0       	ldi	r22, 0x06	; 6
    2d76:	41 e0       	ldi	r20, 0x01	; 1
    2d78:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
	///Set LCD_DATA_PORT equal Local_u8_character Shifted to left by 1 to send left part of the character
	LCD_DATA_PORT = (Local_u8_character& 0b11110000)|(LCD_DATA_PORT & 0b00001111)  ;
    2d7c:	a8 e3       	ldi	r26, 0x38	; 56
    2d7e:	b0 e0       	ldi	r27, 0x00	; 0
    2d80:	89 ad       	ldd	r24, Y+57	; 0x39
    2d82:	98 2f       	mov	r25, r24
    2d84:	90 7f       	andi	r25, 0xF0	; 240
    2d86:	e8 e3       	ldi	r30, 0x38	; 56
    2d88:	f0 e0       	ldi	r31, 0x00	; 0
    2d8a:	80 81       	ld	r24, Z
    2d8c:	8f 70       	andi	r24, 0x0F	; 15
    2d8e:	89 2b       	or	r24, r25
    2d90:	8c 93       	st	X, r24
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);  /// Set LCD_EN_PIN value to HIGH
    2d92:	84 e0       	ldi	r24, 0x04	; 4
    2d94:	67 e0       	ldi	r22, 0x07	; 7
    2d96:	41 e0       	ldi	r20, 0x01	; 1
    2d98:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
    2d9c:	80 e0       	ldi	r24, 0x00	; 0
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	a0 e8       	ldi	r26, 0x80	; 128
    2da2:	bf e3       	ldi	r27, 0x3F	; 63
    2da4:	8d ab       	std	Y+53, r24	; 0x35
    2da6:	9e ab       	std	Y+54, r25	; 0x36
    2da8:	af ab       	std	Y+55, r26	; 0x37
    2daa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dac:	6d a9       	ldd	r22, Y+53	; 0x35
    2dae:	7e a9       	ldd	r23, Y+54	; 0x36
    2db0:	8f a9       	ldd	r24, Y+55	; 0x37
    2db2:	98 ad       	ldd	r25, Y+56	; 0x38
    2db4:	20 e0       	ldi	r18, 0x00	; 0
    2db6:	30 e0       	ldi	r19, 0x00	; 0
    2db8:	4a e7       	ldi	r20, 0x7A	; 122
    2dba:	53 e4       	ldi	r21, 0x43	; 67
    2dbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc0:	dc 01       	movw	r26, r24
    2dc2:	cb 01       	movw	r24, r22
    2dc4:	89 ab       	std	Y+49, r24	; 0x31
    2dc6:	9a ab       	std	Y+50, r25	; 0x32
    2dc8:	ab ab       	std	Y+51, r26	; 0x33
    2dca:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2dcc:	69 a9       	ldd	r22, Y+49	; 0x31
    2dce:	7a a9       	ldd	r23, Y+50	; 0x32
    2dd0:	8b a9       	ldd	r24, Y+51	; 0x33
    2dd2:	9c a9       	ldd	r25, Y+52	; 0x34
    2dd4:	20 e0       	ldi	r18, 0x00	; 0
    2dd6:	30 e0       	ldi	r19, 0x00	; 0
    2dd8:	40 e8       	ldi	r20, 0x80	; 128
    2dda:	5f e3       	ldi	r21, 0x3F	; 63
    2ddc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2de0:	88 23       	and	r24, r24
    2de2:	2c f4       	brge	.+10     	; 0x2dee <H_LCD_Void_LCDDisplayCharacter+0x92>
		__ticks = 1;
    2de4:	81 e0       	ldi	r24, 0x01	; 1
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	98 ab       	std	Y+48, r25	; 0x30
    2dea:	8f a7       	std	Y+47, r24	; 0x2f
    2dec:	3f c0       	rjmp	.+126    	; 0x2e6c <H_LCD_Void_LCDDisplayCharacter+0x110>
	else if (__tmp > 65535)
    2dee:	69 a9       	ldd	r22, Y+49	; 0x31
    2df0:	7a a9       	ldd	r23, Y+50	; 0x32
    2df2:	8b a9       	ldd	r24, Y+51	; 0x33
    2df4:	9c a9       	ldd	r25, Y+52	; 0x34
    2df6:	20 e0       	ldi	r18, 0x00	; 0
    2df8:	3f ef       	ldi	r19, 0xFF	; 255
    2dfa:	4f e7       	ldi	r20, 0x7F	; 127
    2dfc:	57 e4       	ldi	r21, 0x47	; 71
    2dfe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e02:	18 16       	cp	r1, r24
    2e04:	4c f5       	brge	.+82     	; 0x2e58 <H_LCD_Void_LCDDisplayCharacter+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e06:	6d a9       	ldd	r22, Y+53	; 0x35
    2e08:	7e a9       	ldd	r23, Y+54	; 0x36
    2e0a:	8f a9       	ldd	r24, Y+55	; 0x37
    2e0c:	98 ad       	ldd	r25, Y+56	; 0x38
    2e0e:	20 e0       	ldi	r18, 0x00	; 0
    2e10:	30 e0       	ldi	r19, 0x00	; 0
    2e12:	40 e2       	ldi	r20, 0x20	; 32
    2e14:	51 e4       	ldi	r21, 0x41	; 65
    2e16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e1a:	dc 01       	movw	r26, r24
    2e1c:	cb 01       	movw	r24, r22
    2e1e:	bc 01       	movw	r22, r24
    2e20:	cd 01       	movw	r24, r26
    2e22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e26:	dc 01       	movw	r26, r24
    2e28:	cb 01       	movw	r24, r22
    2e2a:	98 ab       	std	Y+48, r25	; 0x30
    2e2c:	8f a7       	std	Y+47, r24	; 0x2f
    2e2e:	0f c0       	rjmp	.+30     	; 0x2e4e <H_LCD_Void_LCDDisplayCharacter+0xf2>
    2e30:	89 e1       	ldi	r24, 0x19	; 25
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	9e a7       	std	Y+46, r25	; 0x2e
    2e36:	8d a7       	std	Y+45, r24	; 0x2d
    2e38:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e3a:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e3c:	01 97       	sbiw	r24, 0x01	; 1
    2e3e:	f1 f7       	brne	.-4      	; 0x2e3c <H_LCD_Void_LCDDisplayCharacter+0xe0>
    2e40:	9e a7       	std	Y+46, r25	; 0x2e
    2e42:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e44:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e46:	98 a9       	ldd	r25, Y+48	; 0x30
    2e48:	01 97       	sbiw	r24, 0x01	; 1
    2e4a:	98 ab       	std	Y+48, r25	; 0x30
    2e4c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e4e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e50:	98 a9       	ldd	r25, Y+48	; 0x30
    2e52:	00 97       	sbiw	r24, 0x00	; 0
    2e54:	69 f7       	brne	.-38     	; 0x2e30 <H_LCD_Void_LCDDisplayCharacter+0xd4>
    2e56:	14 c0       	rjmp	.+40     	; 0x2e80 <H_LCD_Void_LCDDisplayCharacter+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e58:	69 a9       	ldd	r22, Y+49	; 0x31
    2e5a:	7a a9       	ldd	r23, Y+50	; 0x32
    2e5c:	8b a9       	ldd	r24, Y+51	; 0x33
    2e5e:	9c a9       	ldd	r25, Y+52	; 0x34
    2e60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e64:	dc 01       	movw	r26, r24
    2e66:	cb 01       	movw	r24, r22
    2e68:	98 ab       	std	Y+48, r25	; 0x30
    2e6a:	8f a7       	std	Y+47, r24	; 0x2f
    2e6c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e6e:	98 a9       	ldd	r25, Y+48	; 0x30
    2e70:	9c a7       	std	Y+44, r25	; 0x2c
    2e72:	8b a7       	std	Y+43, r24	; 0x2b
    2e74:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e76:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e78:	01 97       	sbiw	r24, 0x01	; 1
    2e7a:	f1 f7       	brne	.-4      	; 0x2e78 <H_LCD_Void_LCDDisplayCharacter+0x11c>
    2e7c:	9c a7       	std	Y+44, r25	; 0x2c
    2e7e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);     /// delay for 1 millisecond
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);  /// Set LCD_EN_PIN value to LOW
    2e80:	84 e0       	ldi	r24, 0x04	; 4
    2e82:	67 e0       	ldi	r22, 0x07	; 7
    2e84:	40 e0       	ldi	r20, 0x00	; 0
    2e86:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
    2e8a:	80 e0       	ldi	r24, 0x00	; 0
    2e8c:	90 e0       	ldi	r25, 0x00	; 0
    2e8e:	a0 e8       	ldi	r26, 0x80	; 128
    2e90:	bf e3       	ldi	r27, 0x3F	; 63
    2e92:	8f a3       	std	Y+39, r24	; 0x27
    2e94:	98 a7       	std	Y+40, r25	; 0x28
    2e96:	a9 a7       	std	Y+41, r26	; 0x29
    2e98:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e9a:	6f a1       	ldd	r22, Y+39	; 0x27
    2e9c:	78 a5       	ldd	r23, Y+40	; 0x28
    2e9e:	89 a5       	ldd	r24, Y+41	; 0x29
    2ea0:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ea2:	20 e0       	ldi	r18, 0x00	; 0
    2ea4:	30 e0       	ldi	r19, 0x00	; 0
    2ea6:	4a e7       	ldi	r20, 0x7A	; 122
    2ea8:	53 e4       	ldi	r21, 0x43	; 67
    2eaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eae:	dc 01       	movw	r26, r24
    2eb0:	cb 01       	movw	r24, r22
    2eb2:	8b a3       	std	Y+35, r24	; 0x23
    2eb4:	9c a3       	std	Y+36, r25	; 0x24
    2eb6:	ad a3       	std	Y+37, r26	; 0x25
    2eb8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2eba:	6b a1       	ldd	r22, Y+35	; 0x23
    2ebc:	7c a1       	ldd	r23, Y+36	; 0x24
    2ebe:	8d a1       	ldd	r24, Y+37	; 0x25
    2ec0:	9e a1       	ldd	r25, Y+38	; 0x26
    2ec2:	20 e0       	ldi	r18, 0x00	; 0
    2ec4:	30 e0       	ldi	r19, 0x00	; 0
    2ec6:	40 e8       	ldi	r20, 0x80	; 128
    2ec8:	5f e3       	ldi	r21, 0x3F	; 63
    2eca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ece:	88 23       	and	r24, r24
    2ed0:	2c f4       	brge	.+10     	; 0x2edc <H_LCD_Void_LCDDisplayCharacter+0x180>
		__ticks = 1;
    2ed2:	81 e0       	ldi	r24, 0x01	; 1
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	9a a3       	std	Y+34, r25	; 0x22
    2ed8:	89 a3       	std	Y+33, r24	; 0x21
    2eda:	3f c0       	rjmp	.+126    	; 0x2f5a <H_LCD_Void_LCDDisplayCharacter+0x1fe>
	else if (__tmp > 65535)
    2edc:	6b a1       	ldd	r22, Y+35	; 0x23
    2ede:	7c a1       	ldd	r23, Y+36	; 0x24
    2ee0:	8d a1       	ldd	r24, Y+37	; 0x25
    2ee2:	9e a1       	ldd	r25, Y+38	; 0x26
    2ee4:	20 e0       	ldi	r18, 0x00	; 0
    2ee6:	3f ef       	ldi	r19, 0xFF	; 255
    2ee8:	4f e7       	ldi	r20, 0x7F	; 127
    2eea:	57 e4       	ldi	r21, 0x47	; 71
    2eec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ef0:	18 16       	cp	r1, r24
    2ef2:	4c f5       	brge	.+82     	; 0x2f46 <H_LCD_Void_LCDDisplayCharacter+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ef4:	6f a1       	ldd	r22, Y+39	; 0x27
    2ef6:	78 a5       	ldd	r23, Y+40	; 0x28
    2ef8:	89 a5       	ldd	r24, Y+41	; 0x29
    2efa:	9a a5       	ldd	r25, Y+42	; 0x2a
    2efc:	20 e0       	ldi	r18, 0x00	; 0
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	40 e2       	ldi	r20, 0x20	; 32
    2f02:	51 e4       	ldi	r21, 0x41	; 65
    2f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f08:	dc 01       	movw	r26, r24
    2f0a:	cb 01       	movw	r24, r22
    2f0c:	bc 01       	movw	r22, r24
    2f0e:	cd 01       	movw	r24, r26
    2f10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f14:	dc 01       	movw	r26, r24
    2f16:	cb 01       	movw	r24, r22
    2f18:	9a a3       	std	Y+34, r25	; 0x22
    2f1a:	89 a3       	std	Y+33, r24	; 0x21
    2f1c:	0f c0       	rjmp	.+30     	; 0x2f3c <H_LCD_Void_LCDDisplayCharacter+0x1e0>
    2f1e:	89 e1       	ldi	r24, 0x19	; 25
    2f20:	90 e0       	ldi	r25, 0x00	; 0
    2f22:	98 a3       	std	Y+32, r25	; 0x20
    2f24:	8f 8f       	std	Y+31, r24	; 0x1f
    2f26:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f28:	98 a1       	ldd	r25, Y+32	; 0x20
    2f2a:	01 97       	sbiw	r24, 0x01	; 1
    2f2c:	f1 f7       	brne	.-4      	; 0x2f2a <H_LCD_Void_LCDDisplayCharacter+0x1ce>
    2f2e:	98 a3       	std	Y+32, r25	; 0x20
    2f30:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f32:	89 a1       	ldd	r24, Y+33	; 0x21
    2f34:	9a a1       	ldd	r25, Y+34	; 0x22
    2f36:	01 97       	sbiw	r24, 0x01	; 1
    2f38:	9a a3       	std	Y+34, r25	; 0x22
    2f3a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f3c:	89 a1       	ldd	r24, Y+33	; 0x21
    2f3e:	9a a1       	ldd	r25, Y+34	; 0x22
    2f40:	00 97       	sbiw	r24, 0x00	; 0
    2f42:	69 f7       	brne	.-38     	; 0x2f1e <H_LCD_Void_LCDDisplayCharacter+0x1c2>
    2f44:	14 c0       	rjmp	.+40     	; 0x2f6e <H_LCD_Void_LCDDisplayCharacter+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f46:	6b a1       	ldd	r22, Y+35	; 0x23
    2f48:	7c a1       	ldd	r23, Y+36	; 0x24
    2f4a:	8d a1       	ldd	r24, Y+37	; 0x25
    2f4c:	9e a1       	ldd	r25, Y+38	; 0x26
    2f4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f52:	dc 01       	movw	r26, r24
    2f54:	cb 01       	movw	r24, r22
    2f56:	9a a3       	std	Y+34, r25	; 0x22
    2f58:	89 a3       	std	Y+33, r24	; 0x21
    2f5a:	89 a1       	ldd	r24, Y+33	; 0x21
    2f5c:	9a a1       	ldd	r25, Y+34	; 0x22
    2f5e:	9e 8f       	std	Y+30, r25	; 0x1e
    2f60:	8d 8f       	std	Y+29, r24	; 0x1d
    2f62:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f64:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f66:	01 97       	sbiw	r24, 0x01	; 1
    2f68:	f1 f7       	brne	.-4      	; 0x2f66 <H_LCD_Void_LCDDisplayCharacter+0x20a>
    2f6a:	9e 8f       	std	Y+30, r25	; 0x1e
    2f6c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); ////delay for 1 millisecond to let LCD read the first part

//	///*******Set LCD_RS_PIN value to HIGH *********///
//	M_DIO_void_SetPinValue(LCD_RS_PORT, LCD_RS_PIN, HIGH);
	///Set LCD_DATA_PORT equal Local_u8_character Shifted to Right  by 3 to send Right part of the character
	LCD_DATA_PORT = ((Local_u8_character << 4 ) & 0b11110000)|(LCD_DATA_PORT & 0b00001111) ;
    2f6e:	a8 e3       	ldi	r26, 0x38	; 56
    2f70:	b0 e0       	ldi	r27, 0x00	; 0
    2f72:	89 ad       	ldd	r24, Y+57	; 0x39
    2f74:	88 2f       	mov	r24, r24
    2f76:	90 e0       	ldi	r25, 0x00	; 0
    2f78:	82 95       	swap	r24
    2f7a:	92 95       	swap	r25
    2f7c:	90 7f       	andi	r25, 0xF0	; 240
    2f7e:	98 27       	eor	r25, r24
    2f80:	80 7f       	andi	r24, 0xF0	; 240
    2f82:	98 27       	eor	r25, r24
    2f84:	98 2f       	mov	r25, r24
    2f86:	e8 e3       	ldi	r30, 0x38	; 56
    2f88:	f0 e0       	ldi	r31, 0x00	; 0
    2f8a:	80 81       	ld	r24, Z
    2f8c:	8f 70       	andi	r24, 0x0F	; 15
    2f8e:	89 2b       	or	r24, r25
    2f90:	8c 93       	st	X, r24
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);  /// Set LCD_EN_PIN value to HIGH
    2f92:	84 e0       	ldi	r24, 0x04	; 4
    2f94:	67 e0       	ldi	r22, 0x07	; 7
    2f96:	41 e0       	ldi	r20, 0x01	; 1
    2f98:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
    2f9c:	80 e0       	ldi	r24, 0x00	; 0
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	a0 e8       	ldi	r26, 0x80	; 128
    2fa2:	bf e3       	ldi	r27, 0x3F	; 63
    2fa4:	89 8f       	std	Y+25, r24	; 0x19
    2fa6:	9a 8f       	std	Y+26, r25	; 0x1a
    2fa8:	ab 8f       	std	Y+27, r26	; 0x1b
    2faa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fac:	69 8d       	ldd	r22, Y+25	; 0x19
    2fae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fb0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fb2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fb4:	20 e0       	ldi	r18, 0x00	; 0
    2fb6:	30 e0       	ldi	r19, 0x00	; 0
    2fb8:	4a e7       	ldi	r20, 0x7A	; 122
    2fba:	53 e4       	ldi	r21, 0x43	; 67
    2fbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc0:	dc 01       	movw	r26, r24
    2fc2:	cb 01       	movw	r24, r22
    2fc4:	8d 8b       	std	Y+21, r24	; 0x15
    2fc6:	9e 8b       	std	Y+22, r25	; 0x16
    2fc8:	af 8b       	std	Y+23, r26	; 0x17
    2fca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2fcc:	6d 89       	ldd	r22, Y+21	; 0x15
    2fce:	7e 89       	ldd	r23, Y+22	; 0x16
    2fd0:	8f 89       	ldd	r24, Y+23	; 0x17
    2fd2:	98 8d       	ldd	r25, Y+24	; 0x18
    2fd4:	20 e0       	ldi	r18, 0x00	; 0
    2fd6:	30 e0       	ldi	r19, 0x00	; 0
    2fd8:	40 e8       	ldi	r20, 0x80	; 128
    2fda:	5f e3       	ldi	r21, 0x3F	; 63
    2fdc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fe0:	88 23       	and	r24, r24
    2fe2:	2c f4       	brge	.+10     	; 0x2fee <H_LCD_Void_LCDDisplayCharacter+0x292>
		__ticks = 1;
    2fe4:	81 e0       	ldi	r24, 0x01	; 1
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	9c 8b       	std	Y+20, r25	; 0x14
    2fea:	8b 8b       	std	Y+19, r24	; 0x13
    2fec:	3f c0       	rjmp	.+126    	; 0x306c <H_LCD_Void_LCDDisplayCharacter+0x310>
	else if (__tmp > 65535)
    2fee:	6d 89       	ldd	r22, Y+21	; 0x15
    2ff0:	7e 89       	ldd	r23, Y+22	; 0x16
    2ff2:	8f 89       	ldd	r24, Y+23	; 0x17
    2ff4:	98 8d       	ldd	r25, Y+24	; 0x18
    2ff6:	20 e0       	ldi	r18, 0x00	; 0
    2ff8:	3f ef       	ldi	r19, 0xFF	; 255
    2ffa:	4f e7       	ldi	r20, 0x7F	; 127
    2ffc:	57 e4       	ldi	r21, 0x47	; 71
    2ffe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3002:	18 16       	cp	r1, r24
    3004:	4c f5       	brge	.+82     	; 0x3058 <H_LCD_Void_LCDDisplayCharacter+0x2fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3006:	69 8d       	ldd	r22, Y+25	; 0x19
    3008:	7a 8d       	ldd	r23, Y+26	; 0x1a
    300a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    300c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    300e:	20 e0       	ldi	r18, 0x00	; 0
    3010:	30 e0       	ldi	r19, 0x00	; 0
    3012:	40 e2       	ldi	r20, 0x20	; 32
    3014:	51 e4       	ldi	r21, 0x41	; 65
    3016:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    301a:	dc 01       	movw	r26, r24
    301c:	cb 01       	movw	r24, r22
    301e:	bc 01       	movw	r22, r24
    3020:	cd 01       	movw	r24, r26
    3022:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3026:	dc 01       	movw	r26, r24
    3028:	cb 01       	movw	r24, r22
    302a:	9c 8b       	std	Y+20, r25	; 0x14
    302c:	8b 8b       	std	Y+19, r24	; 0x13
    302e:	0f c0       	rjmp	.+30     	; 0x304e <H_LCD_Void_LCDDisplayCharacter+0x2f2>
    3030:	89 e1       	ldi	r24, 0x19	; 25
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	9a 8b       	std	Y+18, r25	; 0x12
    3036:	89 8b       	std	Y+17, r24	; 0x11
    3038:	89 89       	ldd	r24, Y+17	; 0x11
    303a:	9a 89       	ldd	r25, Y+18	; 0x12
    303c:	01 97       	sbiw	r24, 0x01	; 1
    303e:	f1 f7       	brne	.-4      	; 0x303c <H_LCD_Void_LCDDisplayCharacter+0x2e0>
    3040:	9a 8b       	std	Y+18, r25	; 0x12
    3042:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3044:	8b 89       	ldd	r24, Y+19	; 0x13
    3046:	9c 89       	ldd	r25, Y+20	; 0x14
    3048:	01 97       	sbiw	r24, 0x01	; 1
    304a:	9c 8b       	std	Y+20, r25	; 0x14
    304c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    304e:	8b 89       	ldd	r24, Y+19	; 0x13
    3050:	9c 89       	ldd	r25, Y+20	; 0x14
    3052:	00 97       	sbiw	r24, 0x00	; 0
    3054:	69 f7       	brne	.-38     	; 0x3030 <H_LCD_Void_LCDDisplayCharacter+0x2d4>
    3056:	14 c0       	rjmp	.+40     	; 0x3080 <H_LCD_Void_LCDDisplayCharacter+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3058:	6d 89       	ldd	r22, Y+21	; 0x15
    305a:	7e 89       	ldd	r23, Y+22	; 0x16
    305c:	8f 89       	ldd	r24, Y+23	; 0x17
    305e:	98 8d       	ldd	r25, Y+24	; 0x18
    3060:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3064:	dc 01       	movw	r26, r24
    3066:	cb 01       	movw	r24, r22
    3068:	9c 8b       	std	Y+20, r25	; 0x14
    306a:	8b 8b       	std	Y+19, r24	; 0x13
    306c:	8b 89       	ldd	r24, Y+19	; 0x13
    306e:	9c 89       	ldd	r25, Y+20	; 0x14
    3070:	98 8b       	std	Y+16, r25	; 0x10
    3072:	8f 87       	std	Y+15, r24	; 0x0f
    3074:	8f 85       	ldd	r24, Y+15	; 0x0f
    3076:	98 89       	ldd	r25, Y+16	; 0x10
    3078:	01 97       	sbiw	r24, 0x01	; 1
    307a:	f1 f7       	brne	.-4      	; 0x3078 <H_LCD_Void_LCDDisplayCharacter+0x31c>
    307c:	98 8b       	std	Y+16, r25	; 0x10
    307e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);     /// delay for 1 millisecond
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);  /// Set LCD_EN_PIN value to LOW
    3080:	84 e0       	ldi	r24, 0x04	; 4
    3082:	67 e0       	ldi	r22, 0x07	; 7
    3084:	40 e0       	ldi	r20, 0x00	; 0
    3086:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
    308a:	80 e0       	ldi	r24, 0x00	; 0
    308c:	90 e0       	ldi	r25, 0x00	; 0
    308e:	a0 ea       	ldi	r26, 0xA0	; 160
    3090:	b0 e4       	ldi	r27, 0x40	; 64
    3092:	8b 87       	std	Y+11, r24	; 0x0b
    3094:	9c 87       	std	Y+12, r25	; 0x0c
    3096:	ad 87       	std	Y+13, r26	; 0x0d
    3098:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    309a:	6b 85       	ldd	r22, Y+11	; 0x0b
    309c:	7c 85       	ldd	r23, Y+12	; 0x0c
    309e:	8d 85       	ldd	r24, Y+13	; 0x0d
    30a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    30a2:	20 e0       	ldi	r18, 0x00	; 0
    30a4:	30 e0       	ldi	r19, 0x00	; 0
    30a6:	4a e7       	ldi	r20, 0x7A	; 122
    30a8:	53 e4       	ldi	r21, 0x43	; 67
    30aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ae:	dc 01       	movw	r26, r24
    30b0:	cb 01       	movw	r24, r22
    30b2:	8f 83       	std	Y+7, r24	; 0x07
    30b4:	98 87       	std	Y+8, r25	; 0x08
    30b6:	a9 87       	std	Y+9, r26	; 0x09
    30b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30ba:	6f 81       	ldd	r22, Y+7	; 0x07
    30bc:	78 85       	ldd	r23, Y+8	; 0x08
    30be:	89 85       	ldd	r24, Y+9	; 0x09
    30c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    30c2:	20 e0       	ldi	r18, 0x00	; 0
    30c4:	30 e0       	ldi	r19, 0x00	; 0
    30c6:	40 e8       	ldi	r20, 0x80	; 128
    30c8:	5f e3       	ldi	r21, 0x3F	; 63
    30ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30ce:	88 23       	and	r24, r24
    30d0:	2c f4       	brge	.+10     	; 0x30dc <H_LCD_Void_LCDDisplayCharacter+0x380>
		__ticks = 1;
    30d2:	81 e0       	ldi	r24, 0x01	; 1
    30d4:	90 e0       	ldi	r25, 0x00	; 0
    30d6:	9e 83       	std	Y+6, r25	; 0x06
    30d8:	8d 83       	std	Y+5, r24	; 0x05
    30da:	3f c0       	rjmp	.+126    	; 0x315a <H_LCD_Void_LCDDisplayCharacter+0x3fe>
	else if (__tmp > 65535)
    30dc:	6f 81       	ldd	r22, Y+7	; 0x07
    30de:	78 85       	ldd	r23, Y+8	; 0x08
    30e0:	89 85       	ldd	r24, Y+9	; 0x09
    30e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    30e4:	20 e0       	ldi	r18, 0x00	; 0
    30e6:	3f ef       	ldi	r19, 0xFF	; 255
    30e8:	4f e7       	ldi	r20, 0x7F	; 127
    30ea:	57 e4       	ldi	r21, 0x47	; 71
    30ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30f0:	18 16       	cp	r1, r24
    30f2:	4c f5       	brge	.+82     	; 0x3146 <H_LCD_Void_LCDDisplayCharacter+0x3ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    30f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    30f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    30fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    30fc:	20 e0       	ldi	r18, 0x00	; 0
    30fe:	30 e0       	ldi	r19, 0x00	; 0
    3100:	40 e2       	ldi	r20, 0x20	; 32
    3102:	51 e4       	ldi	r21, 0x41	; 65
    3104:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3108:	dc 01       	movw	r26, r24
    310a:	cb 01       	movw	r24, r22
    310c:	bc 01       	movw	r22, r24
    310e:	cd 01       	movw	r24, r26
    3110:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3114:	dc 01       	movw	r26, r24
    3116:	cb 01       	movw	r24, r22
    3118:	9e 83       	std	Y+6, r25	; 0x06
    311a:	8d 83       	std	Y+5, r24	; 0x05
    311c:	0f c0       	rjmp	.+30     	; 0x313c <H_LCD_Void_LCDDisplayCharacter+0x3e0>
    311e:	89 e1       	ldi	r24, 0x19	; 25
    3120:	90 e0       	ldi	r25, 0x00	; 0
    3122:	9c 83       	std	Y+4, r25	; 0x04
    3124:	8b 83       	std	Y+3, r24	; 0x03
    3126:	8b 81       	ldd	r24, Y+3	; 0x03
    3128:	9c 81       	ldd	r25, Y+4	; 0x04
    312a:	01 97       	sbiw	r24, 0x01	; 1
    312c:	f1 f7       	brne	.-4      	; 0x312a <H_LCD_Void_LCDDisplayCharacter+0x3ce>
    312e:	9c 83       	std	Y+4, r25	; 0x04
    3130:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3132:	8d 81       	ldd	r24, Y+5	; 0x05
    3134:	9e 81       	ldd	r25, Y+6	; 0x06
    3136:	01 97       	sbiw	r24, 0x01	; 1
    3138:	9e 83       	std	Y+6, r25	; 0x06
    313a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    313c:	8d 81       	ldd	r24, Y+5	; 0x05
    313e:	9e 81       	ldd	r25, Y+6	; 0x06
    3140:	00 97       	sbiw	r24, 0x00	; 0
    3142:	69 f7       	brne	.-38     	; 0x311e <H_LCD_Void_LCDDisplayCharacter+0x3c2>
    3144:	14 c0       	rjmp	.+40     	; 0x316e <H_LCD_Void_LCDDisplayCharacter+0x412>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3146:	6f 81       	ldd	r22, Y+7	; 0x07
    3148:	78 85       	ldd	r23, Y+8	; 0x08
    314a:	89 85       	ldd	r24, Y+9	; 0x09
    314c:	9a 85       	ldd	r25, Y+10	; 0x0a
    314e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3152:	dc 01       	movw	r26, r24
    3154:	cb 01       	movw	r24, r22
    3156:	9e 83       	std	Y+6, r25	; 0x06
    3158:	8d 83       	std	Y+5, r24	; 0x05
    315a:	8d 81       	ldd	r24, Y+5	; 0x05
    315c:	9e 81       	ldd	r25, Y+6	; 0x06
    315e:	9a 83       	std	Y+2, r25	; 0x02
    3160:	89 83       	std	Y+1, r24	; 0x01
    3162:	89 81       	ldd	r24, Y+1	; 0x01
    3164:	9a 81       	ldd	r25, Y+2	; 0x02
    3166:	01 97       	sbiw	r24, 0x01	; 1
    3168:	f1 f7       	brne	.-4      	; 0x3166 <H_LCD_Void_LCDDisplayCharacter+0x40a>
    316a:	9a 83       	std	Y+2, r25	; 0x02
    316c:	89 83       	std	Y+1, r24	; 0x01

#endif
	_delay_ms(5); /// to give time to LCD Microcontroller to process the repeated request
}
    316e:	e9 96       	adiw	r28, 0x39	; 57
    3170:	0f b6       	in	r0, 0x3f	; 63
    3172:	f8 94       	cli
    3174:	de bf       	out	0x3e, r29	; 62
    3176:	0f be       	out	0x3f, r0	; 63
    3178:	cd bf       	out	0x3d, r28	; 61
    317a:	cf 91       	pop	r28
    317c:	df 91       	pop	r29
    317e:	08 95       	ret

00003180 <H_LCD_Void_LCDWriteCommand>:
///***********Function to write a command to LCD*****8///
void H_LCD_Void_LCDWriteCommand(u8 Local_u8_Command)
{
    3180:	df 93       	push	r29
    3182:	cf 93       	push	r28
    3184:	cd b7       	in	r28, 0x3d	; 61
    3186:	de b7       	in	r29, 0x3e	; 62
    3188:	e9 97       	sbiw	r28, 0x39	; 57
    318a:	0f b6       	in	r0, 0x3f	; 63
    318c:	f8 94       	cli
    318e:	de bf       	out	0x3e, r29	; 62
    3190:	0f be       	out	0x3f, r0	; 63
    3192:	cd bf       	out	0x3d, r28	; 61
    3194:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);     /// delay for 1 millisecond
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);  /// Set LCD_EN_PIN value to LOW

#elif LCD_MODE == Activate_4_bit_mode  ///****4_bit_mode**********///
	///*******Set LCD_RS_PIN value to HIGH *********///
	M_DIO_void_SetPinValue(LCD_RS_PORT, LCD_RS_PIN, LOW);
    3196:	84 e0       	ldi	r24, 0x04	; 4
    3198:	66 e0       	ldi	r22, 0x06	; 6
    319a:	40 e0       	ldi	r20, 0x00	; 0
    319c:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
	///Set LCD_DATA_PORT equal Local_u8_Command Shifted to left by 1 to send left part of the character
	LCD_DATA_PORT = (Local_u8_Command & 0b11110000)|(LCD_DATA_PORT & 0b00001111) ;
    31a0:	a8 e3       	ldi	r26, 0x38	; 56
    31a2:	b0 e0       	ldi	r27, 0x00	; 0
    31a4:	89 ad       	ldd	r24, Y+57	; 0x39
    31a6:	98 2f       	mov	r25, r24
    31a8:	90 7f       	andi	r25, 0xF0	; 240
    31aa:	e8 e3       	ldi	r30, 0x38	; 56
    31ac:	f0 e0       	ldi	r31, 0x00	; 0
    31ae:	80 81       	ld	r24, Z
    31b0:	8f 70       	andi	r24, 0x0F	; 15
    31b2:	89 2b       	or	r24, r25
    31b4:	8c 93       	st	X, r24
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);  /// Set LCD_EN_PIN value to HIGH
    31b6:	84 e0       	ldi	r24, 0x04	; 4
    31b8:	67 e0       	ldi	r22, 0x07	; 7
    31ba:	41 e0       	ldi	r20, 0x01	; 1
    31bc:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
    31c0:	80 e0       	ldi	r24, 0x00	; 0
    31c2:	90 e0       	ldi	r25, 0x00	; 0
    31c4:	a0 e8       	ldi	r26, 0x80	; 128
    31c6:	bf e3       	ldi	r27, 0x3F	; 63
    31c8:	8d ab       	std	Y+53, r24	; 0x35
    31ca:	9e ab       	std	Y+54, r25	; 0x36
    31cc:	af ab       	std	Y+55, r26	; 0x37
    31ce:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31d0:	6d a9       	ldd	r22, Y+53	; 0x35
    31d2:	7e a9       	ldd	r23, Y+54	; 0x36
    31d4:	8f a9       	ldd	r24, Y+55	; 0x37
    31d6:	98 ad       	ldd	r25, Y+56	; 0x38
    31d8:	20 e0       	ldi	r18, 0x00	; 0
    31da:	30 e0       	ldi	r19, 0x00	; 0
    31dc:	4a e7       	ldi	r20, 0x7A	; 122
    31de:	53 e4       	ldi	r21, 0x43	; 67
    31e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31e4:	dc 01       	movw	r26, r24
    31e6:	cb 01       	movw	r24, r22
    31e8:	89 ab       	std	Y+49, r24	; 0x31
    31ea:	9a ab       	std	Y+50, r25	; 0x32
    31ec:	ab ab       	std	Y+51, r26	; 0x33
    31ee:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    31f0:	69 a9       	ldd	r22, Y+49	; 0x31
    31f2:	7a a9       	ldd	r23, Y+50	; 0x32
    31f4:	8b a9       	ldd	r24, Y+51	; 0x33
    31f6:	9c a9       	ldd	r25, Y+52	; 0x34
    31f8:	20 e0       	ldi	r18, 0x00	; 0
    31fa:	30 e0       	ldi	r19, 0x00	; 0
    31fc:	40 e8       	ldi	r20, 0x80	; 128
    31fe:	5f e3       	ldi	r21, 0x3F	; 63
    3200:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3204:	88 23       	and	r24, r24
    3206:	2c f4       	brge	.+10     	; 0x3212 <H_LCD_Void_LCDWriteCommand+0x92>
		__ticks = 1;
    3208:	81 e0       	ldi	r24, 0x01	; 1
    320a:	90 e0       	ldi	r25, 0x00	; 0
    320c:	98 ab       	std	Y+48, r25	; 0x30
    320e:	8f a7       	std	Y+47, r24	; 0x2f
    3210:	3f c0       	rjmp	.+126    	; 0x3290 <H_LCD_Void_LCDWriteCommand+0x110>
	else if (__tmp > 65535)
    3212:	69 a9       	ldd	r22, Y+49	; 0x31
    3214:	7a a9       	ldd	r23, Y+50	; 0x32
    3216:	8b a9       	ldd	r24, Y+51	; 0x33
    3218:	9c a9       	ldd	r25, Y+52	; 0x34
    321a:	20 e0       	ldi	r18, 0x00	; 0
    321c:	3f ef       	ldi	r19, 0xFF	; 255
    321e:	4f e7       	ldi	r20, 0x7F	; 127
    3220:	57 e4       	ldi	r21, 0x47	; 71
    3222:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3226:	18 16       	cp	r1, r24
    3228:	4c f5       	brge	.+82     	; 0x327c <H_LCD_Void_LCDWriteCommand+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    322a:	6d a9       	ldd	r22, Y+53	; 0x35
    322c:	7e a9       	ldd	r23, Y+54	; 0x36
    322e:	8f a9       	ldd	r24, Y+55	; 0x37
    3230:	98 ad       	ldd	r25, Y+56	; 0x38
    3232:	20 e0       	ldi	r18, 0x00	; 0
    3234:	30 e0       	ldi	r19, 0x00	; 0
    3236:	40 e2       	ldi	r20, 0x20	; 32
    3238:	51 e4       	ldi	r21, 0x41	; 65
    323a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    323e:	dc 01       	movw	r26, r24
    3240:	cb 01       	movw	r24, r22
    3242:	bc 01       	movw	r22, r24
    3244:	cd 01       	movw	r24, r26
    3246:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    324a:	dc 01       	movw	r26, r24
    324c:	cb 01       	movw	r24, r22
    324e:	98 ab       	std	Y+48, r25	; 0x30
    3250:	8f a7       	std	Y+47, r24	; 0x2f
    3252:	0f c0       	rjmp	.+30     	; 0x3272 <H_LCD_Void_LCDWriteCommand+0xf2>
    3254:	89 e1       	ldi	r24, 0x19	; 25
    3256:	90 e0       	ldi	r25, 0x00	; 0
    3258:	9e a7       	std	Y+46, r25	; 0x2e
    325a:	8d a7       	std	Y+45, r24	; 0x2d
    325c:	8d a5       	ldd	r24, Y+45	; 0x2d
    325e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3260:	01 97       	sbiw	r24, 0x01	; 1
    3262:	f1 f7       	brne	.-4      	; 0x3260 <H_LCD_Void_LCDWriteCommand+0xe0>
    3264:	9e a7       	std	Y+46, r25	; 0x2e
    3266:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3268:	8f a5       	ldd	r24, Y+47	; 0x2f
    326a:	98 a9       	ldd	r25, Y+48	; 0x30
    326c:	01 97       	sbiw	r24, 0x01	; 1
    326e:	98 ab       	std	Y+48, r25	; 0x30
    3270:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3272:	8f a5       	ldd	r24, Y+47	; 0x2f
    3274:	98 a9       	ldd	r25, Y+48	; 0x30
    3276:	00 97       	sbiw	r24, 0x00	; 0
    3278:	69 f7       	brne	.-38     	; 0x3254 <H_LCD_Void_LCDWriteCommand+0xd4>
    327a:	14 c0       	rjmp	.+40     	; 0x32a4 <H_LCD_Void_LCDWriteCommand+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    327c:	69 a9       	ldd	r22, Y+49	; 0x31
    327e:	7a a9       	ldd	r23, Y+50	; 0x32
    3280:	8b a9       	ldd	r24, Y+51	; 0x33
    3282:	9c a9       	ldd	r25, Y+52	; 0x34
    3284:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3288:	dc 01       	movw	r26, r24
    328a:	cb 01       	movw	r24, r22
    328c:	98 ab       	std	Y+48, r25	; 0x30
    328e:	8f a7       	std	Y+47, r24	; 0x2f
    3290:	8f a5       	ldd	r24, Y+47	; 0x2f
    3292:	98 a9       	ldd	r25, Y+48	; 0x30
    3294:	9c a7       	std	Y+44, r25	; 0x2c
    3296:	8b a7       	std	Y+43, r24	; 0x2b
    3298:	8b a5       	ldd	r24, Y+43	; 0x2b
    329a:	9c a5       	ldd	r25, Y+44	; 0x2c
    329c:	01 97       	sbiw	r24, 0x01	; 1
    329e:	f1 f7       	brne	.-4      	; 0x329c <H_LCD_Void_LCDWriteCommand+0x11c>
    32a0:	9c a7       	std	Y+44, r25	; 0x2c
    32a2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);     /// delay for 1 millisecond
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);  /// Set LCD_EN_PIN value to LOW
    32a4:	84 e0       	ldi	r24, 0x04	; 4
    32a6:	67 e0       	ldi	r22, 0x07	; 7
    32a8:	40 e0       	ldi	r20, 0x00	; 0
    32aa:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
    32ae:	80 e0       	ldi	r24, 0x00	; 0
    32b0:	90 e0       	ldi	r25, 0x00	; 0
    32b2:	a0 e8       	ldi	r26, 0x80	; 128
    32b4:	bf e3       	ldi	r27, 0x3F	; 63
    32b6:	8f a3       	std	Y+39, r24	; 0x27
    32b8:	98 a7       	std	Y+40, r25	; 0x28
    32ba:	a9 a7       	std	Y+41, r26	; 0x29
    32bc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32be:	6f a1       	ldd	r22, Y+39	; 0x27
    32c0:	78 a5       	ldd	r23, Y+40	; 0x28
    32c2:	89 a5       	ldd	r24, Y+41	; 0x29
    32c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    32c6:	20 e0       	ldi	r18, 0x00	; 0
    32c8:	30 e0       	ldi	r19, 0x00	; 0
    32ca:	4a e7       	ldi	r20, 0x7A	; 122
    32cc:	53 e4       	ldi	r21, 0x43	; 67
    32ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32d2:	dc 01       	movw	r26, r24
    32d4:	cb 01       	movw	r24, r22
    32d6:	8b a3       	std	Y+35, r24	; 0x23
    32d8:	9c a3       	std	Y+36, r25	; 0x24
    32da:	ad a3       	std	Y+37, r26	; 0x25
    32dc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    32de:	6b a1       	ldd	r22, Y+35	; 0x23
    32e0:	7c a1       	ldd	r23, Y+36	; 0x24
    32e2:	8d a1       	ldd	r24, Y+37	; 0x25
    32e4:	9e a1       	ldd	r25, Y+38	; 0x26
    32e6:	20 e0       	ldi	r18, 0x00	; 0
    32e8:	30 e0       	ldi	r19, 0x00	; 0
    32ea:	40 e8       	ldi	r20, 0x80	; 128
    32ec:	5f e3       	ldi	r21, 0x3F	; 63
    32ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32f2:	88 23       	and	r24, r24
    32f4:	2c f4       	brge	.+10     	; 0x3300 <H_LCD_Void_LCDWriteCommand+0x180>
		__ticks = 1;
    32f6:	81 e0       	ldi	r24, 0x01	; 1
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    32fa:	9a a3       	std	Y+34, r25	; 0x22
    32fc:	89 a3       	std	Y+33, r24	; 0x21
    32fe:	3f c0       	rjmp	.+126    	; 0x337e <H_LCD_Void_LCDWriteCommand+0x1fe>
	else if (__tmp > 65535)
    3300:	6b a1       	ldd	r22, Y+35	; 0x23
    3302:	7c a1       	ldd	r23, Y+36	; 0x24
    3304:	8d a1       	ldd	r24, Y+37	; 0x25
    3306:	9e a1       	ldd	r25, Y+38	; 0x26
    3308:	20 e0       	ldi	r18, 0x00	; 0
    330a:	3f ef       	ldi	r19, 0xFF	; 255
    330c:	4f e7       	ldi	r20, 0x7F	; 127
    330e:	57 e4       	ldi	r21, 0x47	; 71
    3310:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3314:	18 16       	cp	r1, r24
    3316:	4c f5       	brge	.+82     	; 0x336a <H_LCD_Void_LCDWriteCommand+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3318:	6f a1       	ldd	r22, Y+39	; 0x27
    331a:	78 a5       	ldd	r23, Y+40	; 0x28
    331c:	89 a5       	ldd	r24, Y+41	; 0x29
    331e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3320:	20 e0       	ldi	r18, 0x00	; 0
    3322:	30 e0       	ldi	r19, 0x00	; 0
    3324:	40 e2       	ldi	r20, 0x20	; 32
    3326:	51 e4       	ldi	r21, 0x41	; 65
    3328:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    332c:	dc 01       	movw	r26, r24
    332e:	cb 01       	movw	r24, r22
    3330:	bc 01       	movw	r22, r24
    3332:	cd 01       	movw	r24, r26
    3334:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3338:	dc 01       	movw	r26, r24
    333a:	cb 01       	movw	r24, r22
    333c:	9a a3       	std	Y+34, r25	; 0x22
    333e:	89 a3       	std	Y+33, r24	; 0x21
    3340:	0f c0       	rjmp	.+30     	; 0x3360 <H_LCD_Void_LCDWriteCommand+0x1e0>
    3342:	89 e1       	ldi	r24, 0x19	; 25
    3344:	90 e0       	ldi	r25, 0x00	; 0
    3346:	98 a3       	std	Y+32, r25	; 0x20
    3348:	8f 8f       	std	Y+31, r24	; 0x1f
    334a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    334c:	98 a1       	ldd	r25, Y+32	; 0x20
    334e:	01 97       	sbiw	r24, 0x01	; 1
    3350:	f1 f7       	brne	.-4      	; 0x334e <H_LCD_Void_LCDWriteCommand+0x1ce>
    3352:	98 a3       	std	Y+32, r25	; 0x20
    3354:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3356:	89 a1       	ldd	r24, Y+33	; 0x21
    3358:	9a a1       	ldd	r25, Y+34	; 0x22
    335a:	01 97       	sbiw	r24, 0x01	; 1
    335c:	9a a3       	std	Y+34, r25	; 0x22
    335e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3360:	89 a1       	ldd	r24, Y+33	; 0x21
    3362:	9a a1       	ldd	r25, Y+34	; 0x22
    3364:	00 97       	sbiw	r24, 0x00	; 0
    3366:	69 f7       	brne	.-38     	; 0x3342 <H_LCD_Void_LCDWriteCommand+0x1c2>
    3368:	14 c0       	rjmp	.+40     	; 0x3392 <H_LCD_Void_LCDWriteCommand+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    336a:	6b a1       	ldd	r22, Y+35	; 0x23
    336c:	7c a1       	ldd	r23, Y+36	; 0x24
    336e:	8d a1       	ldd	r24, Y+37	; 0x25
    3370:	9e a1       	ldd	r25, Y+38	; 0x26
    3372:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3376:	dc 01       	movw	r26, r24
    3378:	cb 01       	movw	r24, r22
    337a:	9a a3       	std	Y+34, r25	; 0x22
    337c:	89 a3       	std	Y+33, r24	; 0x21
    337e:	89 a1       	ldd	r24, Y+33	; 0x21
    3380:	9a a1       	ldd	r25, Y+34	; 0x22
    3382:	9e 8f       	std	Y+30, r25	; 0x1e
    3384:	8d 8f       	std	Y+29, r24	; 0x1d
    3386:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3388:	9e 8d       	ldd	r25, Y+30	; 0x1e
    338a:	01 97       	sbiw	r24, 0x01	; 1
    338c:	f1 f7       	brne	.-4      	; 0x338a <H_LCD_Void_LCDWriteCommand+0x20a>
    338e:	9e 8f       	std	Y+30, r25	; 0x1e
    3390:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); ////delay for 1 millisecond to let LCD read the first part

//	///*******Set LCD_RS_PIN value to HIGH *********///
//	M_DIO_void_SetPinValue(LCD_RS_PORT, LCD_RS_PIN, LOW);
	///Set LCD_DATA_PORT equal Local_u8_Command Shifted to Right  by 3 to send Right part of the character
	LCD_DATA_PORT = ((Local_u8_Command << 4)& 0b11110000)|(LCD_DATA_PORT & 0b00001111)  ;
    3392:	a8 e3       	ldi	r26, 0x38	; 56
    3394:	b0 e0       	ldi	r27, 0x00	; 0
    3396:	89 ad       	ldd	r24, Y+57	; 0x39
    3398:	88 2f       	mov	r24, r24
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	82 95       	swap	r24
    339e:	92 95       	swap	r25
    33a0:	90 7f       	andi	r25, 0xF0	; 240
    33a2:	98 27       	eor	r25, r24
    33a4:	80 7f       	andi	r24, 0xF0	; 240
    33a6:	98 27       	eor	r25, r24
    33a8:	98 2f       	mov	r25, r24
    33aa:	e8 e3       	ldi	r30, 0x38	; 56
    33ac:	f0 e0       	ldi	r31, 0x00	; 0
    33ae:	80 81       	ld	r24, Z
    33b0:	8f 70       	andi	r24, 0x0F	; 15
    33b2:	89 2b       	or	r24, r25
    33b4:	8c 93       	st	X, r24
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);  /// Set LCD_EN_PIN value to HIGH
    33b6:	84 e0       	ldi	r24, 0x04	; 4
    33b8:	67 e0       	ldi	r22, 0x07	; 7
    33ba:	41 e0       	ldi	r20, 0x01	; 1
    33bc:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
    33c0:	80 e0       	ldi	r24, 0x00	; 0
    33c2:	90 e0       	ldi	r25, 0x00	; 0
    33c4:	a0 e8       	ldi	r26, 0x80	; 128
    33c6:	bf e3       	ldi	r27, 0x3F	; 63
    33c8:	89 8f       	std	Y+25, r24	; 0x19
    33ca:	9a 8f       	std	Y+26, r25	; 0x1a
    33cc:	ab 8f       	std	Y+27, r26	; 0x1b
    33ce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33d0:	69 8d       	ldd	r22, Y+25	; 0x19
    33d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33d8:	20 e0       	ldi	r18, 0x00	; 0
    33da:	30 e0       	ldi	r19, 0x00	; 0
    33dc:	4a e7       	ldi	r20, 0x7A	; 122
    33de:	53 e4       	ldi	r21, 0x43	; 67
    33e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e4:	dc 01       	movw	r26, r24
    33e6:	cb 01       	movw	r24, r22
    33e8:	8d 8b       	std	Y+21, r24	; 0x15
    33ea:	9e 8b       	std	Y+22, r25	; 0x16
    33ec:	af 8b       	std	Y+23, r26	; 0x17
    33ee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    33f0:	6d 89       	ldd	r22, Y+21	; 0x15
    33f2:	7e 89       	ldd	r23, Y+22	; 0x16
    33f4:	8f 89       	ldd	r24, Y+23	; 0x17
    33f6:	98 8d       	ldd	r25, Y+24	; 0x18
    33f8:	20 e0       	ldi	r18, 0x00	; 0
    33fa:	30 e0       	ldi	r19, 0x00	; 0
    33fc:	40 e8       	ldi	r20, 0x80	; 128
    33fe:	5f e3       	ldi	r21, 0x3F	; 63
    3400:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3404:	88 23       	and	r24, r24
    3406:	2c f4       	brge	.+10     	; 0x3412 <H_LCD_Void_LCDWriteCommand+0x292>
		__ticks = 1;
    3408:	81 e0       	ldi	r24, 0x01	; 1
    340a:	90 e0       	ldi	r25, 0x00	; 0
    340c:	9c 8b       	std	Y+20, r25	; 0x14
    340e:	8b 8b       	std	Y+19, r24	; 0x13
    3410:	3f c0       	rjmp	.+126    	; 0x3490 <H_LCD_Void_LCDWriteCommand+0x310>
	else if (__tmp > 65535)
    3412:	6d 89       	ldd	r22, Y+21	; 0x15
    3414:	7e 89       	ldd	r23, Y+22	; 0x16
    3416:	8f 89       	ldd	r24, Y+23	; 0x17
    3418:	98 8d       	ldd	r25, Y+24	; 0x18
    341a:	20 e0       	ldi	r18, 0x00	; 0
    341c:	3f ef       	ldi	r19, 0xFF	; 255
    341e:	4f e7       	ldi	r20, 0x7F	; 127
    3420:	57 e4       	ldi	r21, 0x47	; 71
    3422:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3426:	18 16       	cp	r1, r24
    3428:	4c f5       	brge	.+82     	; 0x347c <H_LCD_Void_LCDWriteCommand+0x2fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    342a:	69 8d       	ldd	r22, Y+25	; 0x19
    342c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    342e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3430:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3432:	20 e0       	ldi	r18, 0x00	; 0
    3434:	30 e0       	ldi	r19, 0x00	; 0
    3436:	40 e2       	ldi	r20, 0x20	; 32
    3438:	51 e4       	ldi	r21, 0x41	; 65
    343a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    343e:	dc 01       	movw	r26, r24
    3440:	cb 01       	movw	r24, r22
    3442:	bc 01       	movw	r22, r24
    3444:	cd 01       	movw	r24, r26
    3446:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    344a:	dc 01       	movw	r26, r24
    344c:	cb 01       	movw	r24, r22
    344e:	9c 8b       	std	Y+20, r25	; 0x14
    3450:	8b 8b       	std	Y+19, r24	; 0x13
    3452:	0f c0       	rjmp	.+30     	; 0x3472 <H_LCD_Void_LCDWriteCommand+0x2f2>
    3454:	89 e1       	ldi	r24, 0x19	; 25
    3456:	90 e0       	ldi	r25, 0x00	; 0
    3458:	9a 8b       	std	Y+18, r25	; 0x12
    345a:	89 8b       	std	Y+17, r24	; 0x11
    345c:	89 89       	ldd	r24, Y+17	; 0x11
    345e:	9a 89       	ldd	r25, Y+18	; 0x12
    3460:	01 97       	sbiw	r24, 0x01	; 1
    3462:	f1 f7       	brne	.-4      	; 0x3460 <H_LCD_Void_LCDWriteCommand+0x2e0>
    3464:	9a 8b       	std	Y+18, r25	; 0x12
    3466:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3468:	8b 89       	ldd	r24, Y+19	; 0x13
    346a:	9c 89       	ldd	r25, Y+20	; 0x14
    346c:	01 97       	sbiw	r24, 0x01	; 1
    346e:	9c 8b       	std	Y+20, r25	; 0x14
    3470:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3472:	8b 89       	ldd	r24, Y+19	; 0x13
    3474:	9c 89       	ldd	r25, Y+20	; 0x14
    3476:	00 97       	sbiw	r24, 0x00	; 0
    3478:	69 f7       	brne	.-38     	; 0x3454 <H_LCD_Void_LCDWriteCommand+0x2d4>
    347a:	14 c0       	rjmp	.+40     	; 0x34a4 <H_LCD_Void_LCDWriteCommand+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    347c:	6d 89       	ldd	r22, Y+21	; 0x15
    347e:	7e 89       	ldd	r23, Y+22	; 0x16
    3480:	8f 89       	ldd	r24, Y+23	; 0x17
    3482:	98 8d       	ldd	r25, Y+24	; 0x18
    3484:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3488:	dc 01       	movw	r26, r24
    348a:	cb 01       	movw	r24, r22
    348c:	9c 8b       	std	Y+20, r25	; 0x14
    348e:	8b 8b       	std	Y+19, r24	; 0x13
    3490:	8b 89       	ldd	r24, Y+19	; 0x13
    3492:	9c 89       	ldd	r25, Y+20	; 0x14
    3494:	98 8b       	std	Y+16, r25	; 0x10
    3496:	8f 87       	std	Y+15, r24	; 0x0f
    3498:	8f 85       	ldd	r24, Y+15	; 0x0f
    349a:	98 89       	ldd	r25, Y+16	; 0x10
    349c:	01 97       	sbiw	r24, 0x01	; 1
    349e:	f1 f7       	brne	.-4      	; 0x349c <H_LCD_Void_LCDWriteCommand+0x31c>
    34a0:	98 8b       	std	Y+16, r25	; 0x10
    34a2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);     /// delay for 1 millisecond
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);  /// Set LCD_EN_PIN value to LOW
    34a4:	84 e0       	ldi	r24, 0x04	; 4
    34a6:	67 e0       	ldi	r22, 0x07	; 7
    34a8:	40 e0       	ldi	r20, 0x00	; 0
    34aa:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
    34ae:	80 e0       	ldi	r24, 0x00	; 0
    34b0:	90 e0       	ldi	r25, 0x00	; 0
    34b2:	a0 ea       	ldi	r26, 0xA0	; 160
    34b4:	b0 e4       	ldi	r27, 0x40	; 64
    34b6:	8b 87       	std	Y+11, r24	; 0x0b
    34b8:	9c 87       	std	Y+12, r25	; 0x0c
    34ba:	ad 87       	std	Y+13, r26	; 0x0d
    34bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34be:	6b 85       	ldd	r22, Y+11	; 0x0b
    34c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    34c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    34c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    34c6:	20 e0       	ldi	r18, 0x00	; 0
    34c8:	30 e0       	ldi	r19, 0x00	; 0
    34ca:	4a e7       	ldi	r20, 0x7A	; 122
    34cc:	53 e4       	ldi	r21, 0x43	; 67
    34ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34d2:	dc 01       	movw	r26, r24
    34d4:	cb 01       	movw	r24, r22
    34d6:	8f 83       	std	Y+7, r24	; 0x07
    34d8:	98 87       	std	Y+8, r25	; 0x08
    34da:	a9 87       	std	Y+9, r26	; 0x09
    34dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34de:	6f 81       	ldd	r22, Y+7	; 0x07
    34e0:	78 85       	ldd	r23, Y+8	; 0x08
    34e2:	89 85       	ldd	r24, Y+9	; 0x09
    34e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    34e6:	20 e0       	ldi	r18, 0x00	; 0
    34e8:	30 e0       	ldi	r19, 0x00	; 0
    34ea:	40 e8       	ldi	r20, 0x80	; 128
    34ec:	5f e3       	ldi	r21, 0x3F	; 63
    34ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34f2:	88 23       	and	r24, r24
    34f4:	2c f4       	brge	.+10     	; 0x3500 <H_LCD_Void_LCDWriteCommand+0x380>
		__ticks = 1;
    34f6:	81 e0       	ldi	r24, 0x01	; 1
    34f8:	90 e0       	ldi	r25, 0x00	; 0
    34fa:	9e 83       	std	Y+6, r25	; 0x06
    34fc:	8d 83       	std	Y+5, r24	; 0x05
    34fe:	3f c0       	rjmp	.+126    	; 0x357e <H_LCD_Void_LCDWriteCommand+0x3fe>
	else if (__tmp > 65535)
    3500:	6f 81       	ldd	r22, Y+7	; 0x07
    3502:	78 85       	ldd	r23, Y+8	; 0x08
    3504:	89 85       	ldd	r24, Y+9	; 0x09
    3506:	9a 85       	ldd	r25, Y+10	; 0x0a
    3508:	20 e0       	ldi	r18, 0x00	; 0
    350a:	3f ef       	ldi	r19, 0xFF	; 255
    350c:	4f e7       	ldi	r20, 0x7F	; 127
    350e:	57 e4       	ldi	r21, 0x47	; 71
    3510:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3514:	18 16       	cp	r1, r24
    3516:	4c f5       	brge	.+82     	; 0x356a <H_LCD_Void_LCDWriteCommand+0x3ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3518:	6b 85       	ldd	r22, Y+11	; 0x0b
    351a:	7c 85       	ldd	r23, Y+12	; 0x0c
    351c:	8d 85       	ldd	r24, Y+13	; 0x0d
    351e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3520:	20 e0       	ldi	r18, 0x00	; 0
    3522:	30 e0       	ldi	r19, 0x00	; 0
    3524:	40 e2       	ldi	r20, 0x20	; 32
    3526:	51 e4       	ldi	r21, 0x41	; 65
    3528:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    352c:	dc 01       	movw	r26, r24
    352e:	cb 01       	movw	r24, r22
    3530:	bc 01       	movw	r22, r24
    3532:	cd 01       	movw	r24, r26
    3534:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3538:	dc 01       	movw	r26, r24
    353a:	cb 01       	movw	r24, r22
    353c:	9e 83       	std	Y+6, r25	; 0x06
    353e:	8d 83       	std	Y+5, r24	; 0x05
    3540:	0f c0       	rjmp	.+30     	; 0x3560 <H_LCD_Void_LCDWriteCommand+0x3e0>
    3542:	89 e1       	ldi	r24, 0x19	; 25
    3544:	90 e0       	ldi	r25, 0x00	; 0
    3546:	9c 83       	std	Y+4, r25	; 0x04
    3548:	8b 83       	std	Y+3, r24	; 0x03
    354a:	8b 81       	ldd	r24, Y+3	; 0x03
    354c:	9c 81       	ldd	r25, Y+4	; 0x04
    354e:	01 97       	sbiw	r24, 0x01	; 1
    3550:	f1 f7       	brne	.-4      	; 0x354e <H_LCD_Void_LCDWriteCommand+0x3ce>
    3552:	9c 83       	std	Y+4, r25	; 0x04
    3554:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3556:	8d 81       	ldd	r24, Y+5	; 0x05
    3558:	9e 81       	ldd	r25, Y+6	; 0x06
    355a:	01 97       	sbiw	r24, 0x01	; 1
    355c:	9e 83       	std	Y+6, r25	; 0x06
    355e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3560:	8d 81       	ldd	r24, Y+5	; 0x05
    3562:	9e 81       	ldd	r25, Y+6	; 0x06
    3564:	00 97       	sbiw	r24, 0x00	; 0
    3566:	69 f7       	brne	.-38     	; 0x3542 <H_LCD_Void_LCDWriteCommand+0x3c2>
    3568:	14 c0       	rjmp	.+40     	; 0x3592 <H_LCD_Void_LCDWriteCommand+0x412>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    356a:	6f 81       	ldd	r22, Y+7	; 0x07
    356c:	78 85       	ldd	r23, Y+8	; 0x08
    356e:	89 85       	ldd	r24, Y+9	; 0x09
    3570:	9a 85       	ldd	r25, Y+10	; 0x0a
    3572:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3576:	dc 01       	movw	r26, r24
    3578:	cb 01       	movw	r24, r22
    357a:	9e 83       	std	Y+6, r25	; 0x06
    357c:	8d 83       	std	Y+5, r24	; 0x05
    357e:	8d 81       	ldd	r24, Y+5	; 0x05
    3580:	9e 81       	ldd	r25, Y+6	; 0x06
    3582:	9a 83       	std	Y+2, r25	; 0x02
    3584:	89 83       	std	Y+1, r24	; 0x01
    3586:	89 81       	ldd	r24, Y+1	; 0x01
    3588:	9a 81       	ldd	r25, Y+2	; 0x02
    358a:	01 97       	sbiw	r24, 0x01	; 1
    358c:	f1 f7       	brne	.-4      	; 0x358a <H_LCD_Void_LCDWriteCommand+0x40a>
    358e:	9a 83       	std	Y+2, r25	; 0x02
    3590:	89 83       	std	Y+1, r24	; 0x01
#endif
	_delay_ms(5); /// to give time to LCD Microcontroller to process the repeated request
}
    3592:	e9 96       	adiw	r28, 0x39	; 57
    3594:	0f b6       	in	r0, 0x3f	; 63
    3596:	f8 94       	cli
    3598:	de bf       	out	0x3e, r29	; 62
    359a:	0f be       	out	0x3f, r0	; 63
    359c:	cd bf       	out	0x3d, r28	; 61
    359e:	cf 91       	pop	r28
    35a0:	df 91       	pop	r29
    35a2:	08 95       	ret

000035a4 <H_Lcd_void_LCDWriteString>:
/// ********function To Display a String on LCD   *****///
void H_Lcd_void_LCDWriteString(u8* Local_u8_PTR)
{
    35a4:	df 93       	push	r29
    35a6:	cf 93       	push	r28
    35a8:	00 d0       	rcall	.+0      	; 0x35aa <H_Lcd_void_LCDWriteString+0x6>
    35aa:	0f 92       	push	r0
    35ac:	cd b7       	in	r28, 0x3d	; 61
    35ae:	de b7       	in	r29, 0x3e	; 62
    35b0:	9b 83       	std	Y+3, r25	; 0x03
    35b2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_Counter = 0; /// loacal counter to count string character
    35b4:	19 82       	std	Y+1, r1	; 0x01
    35b6:	0e c0       	rjmp	.+28     	; 0x35d4 <H_Lcd_void_LCDWriteString+0x30>
	while (Local_u8_PTR[Local_u8_Counter] != NUL) /// while to loop until the end of the string
	{
//// call  H_LCD_Void_LCDDisplayCharacter and give it the location of the character on the string
		H_LCD_Void_LCDDisplayCharacter(Local_u8_PTR[Local_u8_Counter]);
    35b8:	89 81       	ldd	r24, Y+1	; 0x01
    35ba:	28 2f       	mov	r18, r24
    35bc:	30 e0       	ldi	r19, 0x00	; 0
    35be:	8a 81       	ldd	r24, Y+2	; 0x02
    35c0:	9b 81       	ldd	r25, Y+3	; 0x03
    35c2:	fc 01       	movw	r30, r24
    35c4:	e2 0f       	add	r30, r18
    35c6:	f3 1f       	adc	r31, r19
    35c8:	80 81       	ld	r24, Z
    35ca:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <H_LCD_Void_LCDDisplayCharacter>
		/// increment the Local_u8_Counter
		Local_u8_Counter++;
    35ce:	89 81       	ldd	r24, Y+1	; 0x01
    35d0:	8f 5f       	subi	r24, 0xFF	; 255
    35d2:	89 83       	std	Y+1, r24	; 0x01
}
/// ********function To Display a String on LCD   *****///
void H_Lcd_void_LCDWriteString(u8* Local_u8_PTR)
{
	u8 Local_u8_Counter = 0; /// loacal counter to count string character
	while (Local_u8_PTR[Local_u8_Counter] != NUL) /// while to loop until the end of the string
    35d4:	89 81       	ldd	r24, Y+1	; 0x01
    35d6:	28 2f       	mov	r18, r24
    35d8:	30 e0       	ldi	r19, 0x00	; 0
    35da:	8a 81       	ldd	r24, Y+2	; 0x02
    35dc:	9b 81       	ldd	r25, Y+3	; 0x03
    35de:	fc 01       	movw	r30, r24
    35e0:	e2 0f       	add	r30, r18
    35e2:	f3 1f       	adc	r31, r19
    35e4:	80 81       	ld	r24, Z
    35e6:	88 23       	and	r24, r24
    35e8:	39 f7       	brne	.-50     	; 0x35b8 <H_Lcd_void_LCDWriteString+0x14>
		/// increment the Local_u8_Counter
		Local_u8_Counter++;
	}


}
    35ea:	0f 90       	pop	r0
    35ec:	0f 90       	pop	r0
    35ee:	0f 90       	pop	r0
    35f0:	cf 91       	pop	r28
    35f2:	df 91       	pop	r29
    35f4:	08 95       	ret

000035f6 <H_Lcd_void_LCDWriteNum>:
/// ********function To Display a String on LCD   *****///
void H_Lcd_void_LCDWriteNum(s32 Local_s2_Number )
{
    35f6:	0f 93       	push	r16
    35f8:	1f 93       	push	r17
    35fa:	df 93       	push	r29
    35fc:	cf 93       	push	r28
    35fe:	cd b7       	in	r28, 0x3d	; 61
    3600:	de b7       	in	r29, 0x3e	; 62
    3602:	61 97       	sbiw	r28, 0x11	; 17
    3604:	0f b6       	in	r0, 0x3f	; 63
    3606:	f8 94       	cli
    3608:	de bf       	out	0x3e, r29	; 62
    360a:	0f be       	out	0x3f, r0	; 63
    360c:	cd bf       	out	0x3d, r28	; 61
    360e:	6e 87       	std	Y+14, r22	; 0x0e
    3610:	7f 87       	std	Y+15, r23	; 0x0f
    3612:	88 8b       	std	Y+16, r24	; 0x10
    3614:	99 8b       	std	Y+17, r25	; 0x11
    u8 Local_u8_arr[12]={0};   /// loacal array to store the number of column of the lcd
    3616:	8c e0       	ldi	r24, 0x0C	; 12
    3618:	fe 01       	movw	r30, r28
    361a:	32 96       	adiw	r30, 0x02	; 2
    361c:	df 01       	movw	r26, r30
    361e:	98 2f       	mov	r25, r24
    3620:	1d 92       	st	X+, r1
    3622:	9a 95       	dec	r25
    3624:	e9 f7       	brne	.-6      	; 0x3620 <H_Lcd_void_LCDWriteNum+0x2a>
    s8 Local_s8_Counter =0;    /// local counter for for loop
    3626:	19 82       	std	Y+1, r1	; 0x01
    if (Local_s2_Number < 0 )   /// check if the number is less than 0 to add sighn (-)
    3628:	8e 85       	ldd	r24, Y+14	; 0x0e
    362a:	9f 85       	ldd	r25, Y+15	; 0x0f
    362c:	a8 89       	ldd	r26, Y+16	; 0x10
    362e:	b9 89       	ldd	r27, Y+17	; 0x11
    3630:	bb 23       	and	r27, r27
    3632:	0c f0       	brlt	.+2      	; 0x3636 <H_Lcd_void_LCDWriteNum+0x40>
    3634:	42 c0       	rjmp	.+132    	; 0x36ba <H_Lcd_void_LCDWriteNum+0xc4>
    {
     H_LCD_Void_LCDDisplayCharacter('-');
    3636:	8d e2       	ldi	r24, 0x2D	; 45
    3638:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <H_LCD_Void_LCDDisplayCharacter>
     Local_s2_Number = Local_s2_Number * -1 ;
    363c:	8e 85       	ldd	r24, Y+14	; 0x0e
    363e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3640:	a8 89       	ldd	r26, Y+16	; 0x10
    3642:	b9 89       	ldd	r27, Y+17	; 0x11
    3644:	b0 95       	com	r27
    3646:	a0 95       	com	r26
    3648:	90 95       	com	r25
    364a:	81 95       	neg	r24
    364c:	9f 4f       	sbci	r25, 0xFF	; 255
    364e:	af 4f       	sbci	r26, 0xFF	; 255
    3650:	bf 4f       	sbci	r27, 0xFF	; 255
    3652:	8e 87       	std	Y+14, r24	; 0x0e
    3654:	9f 87       	std	Y+15, r25	; 0x0f
    3656:	a8 8b       	std	Y+16, r26	; 0x10
    3658:	b9 8b       	std	Y+17, r27	; 0x11
    365a:	2f c0       	rjmp	.+94     	; 0x36ba <H_Lcd_void_LCDWriteNum+0xc4>
    }
    while(Local_s2_Number !=0)
    {
    	Local_u8_arr [Local_s8_Counter] = Local_s2_Number %10;;
    365c:	89 81       	ldd	r24, Y+1	; 0x01
    365e:	08 2f       	mov	r16, r24
    3660:	11 27       	eor	r17, r17
    3662:	07 fd       	sbrc	r16, 7
    3664:	10 95       	com	r17
    3666:	8e 85       	ldd	r24, Y+14	; 0x0e
    3668:	9f 85       	ldd	r25, Y+15	; 0x0f
    366a:	a8 89       	ldd	r26, Y+16	; 0x10
    366c:	b9 89       	ldd	r27, Y+17	; 0x11
    366e:	2a e0       	ldi	r18, 0x0A	; 10
    3670:	30 e0       	ldi	r19, 0x00	; 0
    3672:	40 e0       	ldi	r20, 0x00	; 0
    3674:	50 e0       	ldi	r21, 0x00	; 0
    3676:	bc 01       	movw	r22, r24
    3678:	cd 01       	movw	r24, r26
    367a:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <__divmodsi4>
    367e:	dc 01       	movw	r26, r24
    3680:	cb 01       	movw	r24, r22
    3682:	28 2f       	mov	r18, r24
    3684:	ce 01       	movw	r24, r28
    3686:	02 96       	adiw	r24, 0x02	; 2
    3688:	fc 01       	movw	r30, r24
    368a:	e0 0f       	add	r30, r16
    368c:	f1 1f       	adc	r31, r17
    368e:	20 83       	st	Z, r18
    	Local_s2_Number /=10;
    3690:	8e 85       	ldd	r24, Y+14	; 0x0e
    3692:	9f 85       	ldd	r25, Y+15	; 0x0f
    3694:	a8 89       	ldd	r26, Y+16	; 0x10
    3696:	b9 89       	ldd	r27, Y+17	; 0x11
    3698:	2a e0       	ldi	r18, 0x0A	; 10
    369a:	30 e0       	ldi	r19, 0x00	; 0
    369c:	40 e0       	ldi	r20, 0x00	; 0
    369e:	50 e0       	ldi	r21, 0x00	; 0
    36a0:	bc 01       	movw	r22, r24
    36a2:	cd 01       	movw	r24, r26
    36a4:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <__divmodsi4>
    36a8:	da 01       	movw	r26, r20
    36aa:	c9 01       	movw	r24, r18
    36ac:	8e 87       	std	Y+14, r24	; 0x0e
    36ae:	9f 87       	std	Y+15, r25	; 0x0f
    36b0:	a8 8b       	std	Y+16, r26	; 0x10
    36b2:	b9 8b       	std	Y+17, r27	; 0x11
    	Local_s8_Counter ++;
    36b4:	89 81       	ldd	r24, Y+1	; 0x01
    36b6:	8f 5f       	subi	r24, 0xFF	; 255
    36b8:	89 83       	std	Y+1, r24	; 0x01
    if (Local_s2_Number < 0 )   /// check if the number is less than 0 to add sighn (-)
    {
     H_LCD_Void_LCDDisplayCharacter('-');
     Local_s2_Number = Local_s2_Number * -1 ;
    }
    while(Local_s2_Number !=0)
    36ba:	8e 85       	ldd	r24, Y+14	; 0x0e
    36bc:	9f 85       	ldd	r25, Y+15	; 0x0f
    36be:	a8 89       	ldd	r26, Y+16	; 0x10
    36c0:	b9 89       	ldd	r27, Y+17	; 0x11
    36c2:	00 97       	sbiw	r24, 0x00	; 0
    36c4:	a1 05       	cpc	r26, r1
    36c6:	b1 05       	cpc	r27, r1
    36c8:	49 f6       	brne	.-110    	; 0x365c <H_Lcd_void_LCDWriteNum+0x66>
    {
    	Local_u8_arr [Local_s8_Counter] = Local_s2_Number %10;;
    	Local_s2_Number /=10;
    	Local_s8_Counter ++;
    }
    Local_s8_Counter--;
    36ca:	89 81       	ldd	r24, Y+1	; 0x01
    36cc:	81 50       	subi	r24, 0x01	; 1
    36ce:	89 83       	std	Y+1, r24	; 0x01
   do
    {
    	H_LCD_Void_LCDDisplayCharacter(Local_u8_arr [Local_s8_Counter] + 48);
    36d0:	89 81       	ldd	r24, Y+1	; 0x01
    36d2:	28 2f       	mov	r18, r24
    36d4:	33 27       	eor	r19, r19
    36d6:	27 fd       	sbrc	r18, 7
    36d8:	30 95       	com	r19
    36da:	ce 01       	movw	r24, r28
    36dc:	02 96       	adiw	r24, 0x02	; 2
    36de:	fc 01       	movw	r30, r24
    36e0:	e2 0f       	add	r30, r18
    36e2:	f3 1f       	adc	r31, r19
    36e4:	80 81       	ld	r24, Z
    36e6:	80 5d       	subi	r24, 0xD0	; 208
    36e8:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <H_LCD_Void_LCDDisplayCharacter>
    	Local_s8_Counter--;
    36ec:	89 81       	ldd	r24, Y+1	; 0x01
    36ee:	81 50       	subi	r24, 0x01	; 1
    36f0:	89 83       	std	Y+1, r24	; 0x01
    } while(Local_s8_Counter >= 0);
    36f2:	89 81       	ldd	r24, Y+1	; 0x01
    36f4:	88 23       	and	r24, r24
    36f6:	64 f7       	brge	.-40     	; 0x36d0 <H_Lcd_void_LCDWriteNum+0xda>

}
    36f8:	61 96       	adiw	r28, 0x11	; 17
    36fa:	0f b6       	in	r0, 0x3f	; 63
    36fc:	f8 94       	cli
    36fe:	de bf       	out	0x3e, r29	; 62
    3700:	0f be       	out	0x3f, r0	; 63
    3702:	cd bf       	out	0x3d, r28	; 61
    3704:	cf 91       	pop	r28
    3706:	df 91       	pop	r29
    3708:	1f 91       	pop	r17
    370a:	0f 91       	pop	r16
    370c:	08 95       	ret

0000370e <H_Lcd_void_LCDGoToXY>:
/// ********function To Select Row and Column	 on LCD   *****///
void H_Lcd_void_LCDGoToXY(u8 Local_u8_Row,u8 Local_u8_Column)
{
    370e:	df 93       	push	r29
    3710:	cf 93       	push	r28
    3712:	00 d0       	rcall	.+0      	; 0x3714 <H_Lcd_void_LCDGoToXY+0x6>
    3714:	00 d0       	rcall	.+0      	; 0x3716 <H_Lcd_void_LCDGoToXY+0x8>
    3716:	cd b7       	in	r28, 0x3d	; 61
    3718:	de b7       	in	r29, 0x3e	; 62
    371a:	8b 83       	std	Y+3, r24	; 0x03
    371c:	6c 83       	std	Y+4, r22	; 0x04
 if(Local_u8_Row >= 0 && Local_u8_Row <= 1 && Local_u8_Column >= 0 && Local_u8_Column <= 15)
    371e:	8b 81       	ldd	r24, Y+3	; 0x03
    3720:	82 30       	cpi	r24, 0x02	; 2
    3722:	a8 f4       	brcc	.+42     	; 0x374e <H_Lcd_void_LCDGoToXY+0x40>
    3724:	8c 81       	ldd	r24, Y+4	; 0x04
    3726:	80 31       	cpi	r24, 0x10	; 16
    3728:	90 f4       	brcc	.+36     	; 0x374e <H_Lcd_void_LCDGoToXY+0x40>
		{

			u8 Arr[2]={SET_ROW0_COL0, SET_ROW1_COL0};
    372a:	80 e8       	ldi	r24, 0x80	; 128
    372c:	89 83       	std	Y+1, r24	; 0x01
    372e:	80 ec       	ldi	r24, 0xC0	; 192
    3730:	8a 83       	std	Y+2, r24	; 0x02
			H_LCD_Void_LCDWriteCommand(Arr[Local_u8_Row]+ Local_u8_Column);
    3732:	8b 81       	ldd	r24, Y+3	; 0x03
    3734:	28 2f       	mov	r18, r24
    3736:	30 e0       	ldi	r19, 0x00	; 0
    3738:	ce 01       	movw	r24, r28
    373a:	01 96       	adiw	r24, 0x01	; 1
    373c:	fc 01       	movw	r30, r24
    373e:	e2 0f       	add	r30, r18
    3740:	f3 1f       	adc	r31, r19
    3742:	90 81       	ld	r25, Z
    3744:	8c 81       	ldd	r24, Y+4	; 0x04
    3746:	89 0f       	add	r24, r25
    3748:	0e 94 c0 18 	call	0x3180	; 0x3180 <H_LCD_Void_LCDWriteCommand>
    374c:	04 c0       	rjmp	.+8      	; 0x3756 <H_Lcd_void_LCDGoToXY+0x48>
		}
 else
 {
	 H_Lcd_void_LCDWriteString("wrong input!!");
    374e:	80 e6       	ldi	r24, 0x60	; 96
    3750:	90 e0       	ldi	r25, 0x00	; 0
    3752:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <H_Lcd_void_LCDWriteString>
 }

}
    3756:	0f 90       	pop	r0
    3758:	0f 90       	pop	r0
    375a:	0f 90       	pop	r0
    375c:	0f 90       	pop	r0
    375e:	cf 91       	pop	r28
    3760:	df 91       	pop	r29
    3762:	08 95       	ret

00003764 <H_Lcd_void_LCDClockDisplay>:
/// ********function To Display a clock format on LCD  *****///
void H_Lcd_void_LCDClockDisplay(u8 Local_u8_Hours,u8 Local_u8_Minutes,u8 Local_u8_Seconds)
{
    3764:	df 93       	push	r29
    3766:	cf 93       	push	r28
    3768:	cd b7       	in	r28, 0x3d	; 61
    376a:	de b7       	in	r29, 0x3e	; 62
    376c:	29 97       	sbiw	r28, 0x09	; 9
    376e:	0f b6       	in	r0, 0x3f	; 63
    3770:	f8 94       	cli
    3772:	de bf       	out	0x3e, r29	; 62
    3774:	0f be       	out	0x3f, r0	; 63
    3776:	cd bf       	out	0x3d, r28	; 61
    3778:	89 83       	std	Y+1, r24	; 0x01
    377a:	6a 83       	std	Y+2, r22	; 0x02
    377c:	4b 83       	std	Y+3, r20	; 0x03
	H_Lcd_void_LCDWriteString("Clock");
    377e:	8e e6       	ldi	r24, 0x6E	; 110
    3780:	90 e0       	ldi	r25, 0x00	; 0
    3782:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <H_Lcd_void_LCDWriteString>
	if((Local_u8_Hours > 9) | (Local_u8_Minutes >9) | (Local_u8_Seconds > 9))
    3786:	19 86       	std	Y+9, r1	; 0x09
    3788:	89 81       	ldd	r24, Y+1	; 0x01
    378a:	8a 30       	cpi	r24, 0x0A	; 10
    378c:	10 f0       	brcs	.+4      	; 0x3792 <H_Lcd_void_LCDClockDisplay+0x2e>
    378e:	21 e0       	ldi	r18, 0x01	; 1
    3790:	29 87       	std	Y+9, r18	; 0x09
    3792:	18 86       	std	Y+8, r1	; 0x08
    3794:	8a 81       	ldd	r24, Y+2	; 0x02
    3796:	8a 30       	cpi	r24, 0x0A	; 10
    3798:	10 f0       	brcs	.+4      	; 0x379e <H_Lcd_void_LCDClockDisplay+0x3a>
    379a:	31 e0       	ldi	r19, 0x01	; 1
    379c:	38 87       	std	Y+8, r19	; 0x08
    379e:	89 85       	ldd	r24, Y+9	; 0x09
    37a0:	98 85       	ldd	r25, Y+8	; 0x08
    37a2:	89 2b       	or	r24, r25
    37a4:	28 2f       	mov	r18, r24
    37a6:	30 e0       	ldi	r19, 0x00	; 0
    37a8:	3f 83       	std	Y+7, r19	; 0x07
    37aa:	2e 83       	std	Y+6, r18	; 0x06
    37ac:	1d 82       	std	Y+5, r1	; 0x05
    37ae:	1c 82       	std	Y+4, r1	; 0x04
    37b0:	8b 81       	ldd	r24, Y+3	; 0x03
    37b2:	8a 30       	cpi	r24, 0x0A	; 10
    37b4:	20 f0       	brcs	.+8      	; 0x37be <H_Lcd_void_LCDClockDisplay+0x5a>
    37b6:	81 e0       	ldi	r24, 0x01	; 1
    37b8:	90 e0       	ldi	r25, 0x00	; 0
    37ba:	9d 83       	std	Y+5, r25	; 0x05
    37bc:	8c 83       	std	Y+4, r24	; 0x04
    37be:	8e 81       	ldd	r24, Y+6	; 0x06
    37c0:	9f 81       	ldd	r25, Y+7	; 0x07
    37c2:	2c 81       	ldd	r18, Y+4	; 0x04
    37c4:	3d 81       	ldd	r19, Y+5	; 0x05
    37c6:	82 2b       	or	r24, r18
    37c8:	93 2b       	or	r25, r19
    37ca:	00 97       	sbiw	r24, 0x00	; 0
    37cc:	d1 f1       	breq	.+116    	; 0x3842 <H_Lcd_void_LCDClockDisplay+0xde>
	{
		H_Lcd_void_LCDGoToXY(0, 7);
    37ce:	80 e0       	ldi	r24, 0x00	; 0
    37d0:	67 e0       	ldi	r22, 0x07	; 7
    37d2:	0e 94 87 1b 	call	0x370e	; 0x370e <H_Lcd_void_LCDGoToXY>
	    H_Lcd_void_LCDWriteString("H :M :S");
    37d6:	84 e7       	ldi	r24, 0x74	; 116
    37d8:	90 e0       	ldi	r25, 0x00	; 0
    37da:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <H_Lcd_void_LCDWriteString>
		H_Lcd_void_LCDGoToXY(1, 7);
    37de:	81 e0       	ldi	r24, 0x01	; 1
    37e0:	67 e0       	ldi	r22, 0x07	; 7
    37e2:	0e 94 87 1b 	call	0x370e	; 0x370e <H_Lcd_void_LCDGoToXY>
		H_Lcd_void_LCDWriteNum(Local_u8_Hours);
    37e6:	89 81       	ldd	r24, Y+1	; 0x01
    37e8:	88 2f       	mov	r24, r24
    37ea:	90 e0       	ldi	r25, 0x00	; 0
    37ec:	a0 e0       	ldi	r26, 0x00	; 0
    37ee:	b0 e0       	ldi	r27, 0x00	; 0
    37f0:	bc 01       	movw	r22, r24
    37f2:	cd 01       	movw	r24, r26
    37f4:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <H_Lcd_void_LCDWriteNum>
		if(Local_u8_Hours <= 9)
    37f8:	89 81       	ldd	r24, Y+1	; 0x01
    37fa:	8a 30       	cpi	r24, 0x0A	; 10
    37fc:	18 f4       	brcc	.+6      	; 0x3804 <H_Lcd_void_LCDClockDisplay+0xa0>
			{
				H_LCD_Void_LCDDisplayCharacter(' ');
    37fe:	80 e2       	ldi	r24, 0x20	; 32
    3800:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <H_LCD_Void_LCDDisplayCharacter>
			}
		H_LCD_Void_LCDDisplayCharacter(':');
    3804:	8a e3       	ldi	r24, 0x3A	; 58
    3806:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <H_LCD_Void_LCDDisplayCharacter>
		H_Lcd_void_LCDWriteNum(Local_u8_Minutes);
    380a:	8a 81       	ldd	r24, Y+2	; 0x02
    380c:	88 2f       	mov	r24, r24
    380e:	90 e0       	ldi	r25, 0x00	; 0
    3810:	a0 e0       	ldi	r26, 0x00	; 0
    3812:	b0 e0       	ldi	r27, 0x00	; 0
    3814:	bc 01       	movw	r22, r24
    3816:	cd 01       	movw	r24, r26
    3818:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <H_Lcd_void_LCDWriteNum>
		if(Local_u8_Minutes <= 9)
    381c:	8a 81       	ldd	r24, Y+2	; 0x02
    381e:	8a 30       	cpi	r24, 0x0A	; 10
    3820:	18 f4       	brcc	.+6      	; 0x3828 <H_Lcd_void_LCDClockDisplay+0xc4>
			{
				H_LCD_Void_LCDDisplayCharacter(' ');
    3822:	80 e2       	ldi	r24, 0x20	; 32
    3824:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <H_LCD_Void_LCDDisplayCharacter>
			}
		H_LCD_Void_LCDDisplayCharacter(':');
    3828:	8a e3       	ldi	r24, 0x3A	; 58
    382a:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <H_LCD_Void_LCDDisplayCharacter>
		H_Lcd_void_LCDWriteNum(Local_u8_Seconds);
    382e:	8b 81       	ldd	r24, Y+3	; 0x03
    3830:	88 2f       	mov	r24, r24
    3832:	90 e0       	ldi	r25, 0x00	; 0
    3834:	a0 e0       	ldi	r26, 0x00	; 0
    3836:	b0 e0       	ldi	r27, 0x00	; 0
    3838:	bc 01       	movw	r22, r24
    383a:	cd 01       	movw	r24, r26
    383c:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <H_Lcd_void_LCDWriteNum>
    3840:	2d c0       	rjmp	.+90     	; 0x389c <H_Lcd_void_LCDClockDisplay+0x138>

	}
	else
	{
		H_Lcd_void_LCDGoToXY(0, 7);
    3842:	80 e0       	ldi	r24, 0x00	; 0
    3844:	67 e0       	ldi	r22, 0x07	; 7
    3846:	0e 94 87 1b 	call	0x370e	; 0x370e <H_Lcd_void_LCDGoToXY>
		H_Lcd_void_LCDWriteString("H:M:S");
    384a:	8c e7       	ldi	r24, 0x7C	; 124
    384c:	90 e0       	ldi	r25, 0x00	; 0
    384e:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <H_Lcd_void_LCDWriteString>
		H_Lcd_void_LCDGoToXY(1, 7);
    3852:	81 e0       	ldi	r24, 0x01	; 1
    3854:	67 e0       	ldi	r22, 0x07	; 7
    3856:	0e 94 87 1b 	call	0x370e	; 0x370e <H_Lcd_void_LCDGoToXY>
		H_Lcd_void_LCDWriteNum(Local_u8_Hours);
    385a:	89 81       	ldd	r24, Y+1	; 0x01
    385c:	88 2f       	mov	r24, r24
    385e:	90 e0       	ldi	r25, 0x00	; 0
    3860:	a0 e0       	ldi	r26, 0x00	; 0
    3862:	b0 e0       	ldi	r27, 0x00	; 0
    3864:	bc 01       	movw	r22, r24
    3866:	cd 01       	movw	r24, r26
    3868:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <H_Lcd_void_LCDWriteNum>
		H_LCD_Void_LCDDisplayCharacter(':');
    386c:	8a e3       	ldi	r24, 0x3A	; 58
    386e:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <H_LCD_Void_LCDDisplayCharacter>
		H_Lcd_void_LCDWriteNum(Local_u8_Minutes);
    3872:	8a 81       	ldd	r24, Y+2	; 0x02
    3874:	88 2f       	mov	r24, r24
    3876:	90 e0       	ldi	r25, 0x00	; 0
    3878:	a0 e0       	ldi	r26, 0x00	; 0
    387a:	b0 e0       	ldi	r27, 0x00	; 0
    387c:	bc 01       	movw	r22, r24
    387e:	cd 01       	movw	r24, r26
    3880:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <H_Lcd_void_LCDWriteNum>
		H_LCD_Void_LCDDisplayCharacter(':');
    3884:	8a e3       	ldi	r24, 0x3A	; 58
    3886:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <H_LCD_Void_LCDDisplayCharacter>
		H_Lcd_void_LCDWriteNum(Local_u8_Seconds);
    388a:	8b 81       	ldd	r24, Y+3	; 0x03
    388c:	88 2f       	mov	r24, r24
    388e:	90 e0       	ldi	r25, 0x00	; 0
    3890:	a0 e0       	ldi	r26, 0x00	; 0
    3892:	b0 e0       	ldi	r27, 0x00	; 0
    3894:	bc 01       	movw	r22, r24
    3896:	cd 01       	movw	r24, r26
    3898:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <H_Lcd_void_LCDWriteNum>
	}


}
    389c:	29 96       	adiw	r28, 0x09	; 9
    389e:	0f b6       	in	r0, 0x3f	; 63
    38a0:	f8 94       	cli
    38a2:	de bf       	out	0x3e, r29	; 62
    38a4:	0f be       	out	0x3f, r0	; 63
    38a6:	cd bf       	out	0x3d, r28	; 61
    38a8:	cf 91       	pop	r28
    38aa:	df 91       	pop	r29
    38ac:	08 95       	ret

000038ae <H_Lcd_void_LCDClear>:
/// ********function To screen LCD screen *****///
void H_Lcd_void_LCDClear(void)
{
    38ae:	df 93       	push	r29
    38b0:	cf 93       	push	r28
    38b2:	cd b7       	in	r28, 0x3d	; 61
    38b4:	de b7       	in	r29, 0x3e	; 62
	H_LCD_Void_LCDWriteCommand(Clear_screen);
    38b6:	81 e0       	ldi	r24, 0x01	; 1
    38b8:	0e 94 c0 18 	call	0x3180	; 0x3180 <H_LCD_Void_LCDWriteCommand>
}
    38bc:	cf 91       	pop	r28
    38be:	df 91       	pop	r29
    38c0:	08 95       	ret

000038c2 <H_KEYPAD_void_KeyPadInt>:
#include "KeyPad_Int.h"

///*****************Functions**********//

void H_KEYPAD_void_KeyPadInt(void)
{
    38c2:	df 93       	push	r29
    38c4:	cf 93       	push	r28
    38c6:	cd b7       	in	r28, 0x3d	; 61
    38c8:	de b7       	in	r29, 0x3e	; 62

	///***************** _ Set Row Pins Direction as input**********//
	M_DIO_void_SetPinDirection(ROWS_PORT, Row1_PIN, OUTPUT);  ///Set_Row_1_Pin_Direction
    38ca:	82 e0       	ldi	r24, 0x02	; 2
    38cc:	60 e0       	ldi	r22, 0x00	; 0
    38ce:	41 e0       	ldi	r20, 0x01	; 1
    38d0:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <M_DIO_void_SetPinDirection>
	M_DIO_void_SetPinDirection(ROWS_PORT, Row2_PIN, OUTPUT);  ///Set_Row_2_Pin_Direction
    38d4:	82 e0       	ldi	r24, 0x02	; 2
    38d6:	61 e0       	ldi	r22, 0x01	; 1
    38d8:	41 e0       	ldi	r20, 0x01	; 1
    38da:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <M_DIO_void_SetPinDirection>
	M_DIO_void_SetPinDirection(ROWS_PORT, Row3_PIN, OUTPUT);  ///Set_Row_3_Pin_Direction
    38de:	82 e0       	ldi	r24, 0x02	; 2
    38e0:	62 e0       	ldi	r22, 0x02	; 2
    38e2:	41 e0       	ldi	r20, 0x01	; 1
    38e4:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <M_DIO_void_SetPinDirection>
	M_DIO_void_SetPinDirection(ROWS_PORT, Row4_PIN, OUTPUT);  ///Set_Row_4_Pin_Direction
    38e8:	82 e0       	ldi	r24, 0x02	; 2
    38ea:	63 e0       	ldi	r22, 0x03	; 3
    38ec:	41 e0       	ldi	r20, 0x01	; 1
    38ee:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <M_DIO_void_SetPinDirection>

	///***************** _ Set Columns Pins Direction as input**********//
	M_DIO_void_SetPinDirection(COLUMNS_PORT, Col1_PIN, INPUT);  ///Set_Column_1_Pin_Value
    38f2:	84 e0       	ldi	r24, 0x04	; 4
    38f4:	62 e0       	ldi	r22, 0x02	; 2
    38f6:	40 e0       	ldi	r20, 0x00	; 0
    38f8:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <M_DIO_void_SetPinDirection>
	M_DIO_void_SetPinDirection(COLUMNS_PORT, Col2_PIN, INPUT);  ///Set_Column_2_Pin_Value
    38fc:	84 e0       	ldi	r24, 0x04	; 4
    38fe:	63 e0       	ldi	r22, 0x03	; 3
    3900:	40 e0       	ldi	r20, 0x00	; 0
    3902:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <M_DIO_void_SetPinDirection>
	M_DIO_void_SetPinDirection(COLUMNS_PORT, Col3_PIN, INPUT);  ///Set_Column_3_Pin_Value
    3906:	84 e0       	ldi	r24, 0x04	; 4
    3908:	64 e0       	ldi	r22, 0x04	; 4
    390a:	40 e0       	ldi	r20, 0x00	; 0
    390c:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <M_DIO_void_SetPinDirection>
	M_DIO_void_SetPinDirection(COLUMNS_PORT, Col4_PIN, INPUT);  ///Set_Column_4_Pin_Value
    3910:	84 e0       	ldi	r24, 0x04	; 4
    3912:	65 e0       	ldi	r22, 0x05	; 5
    3914:	40 e0       	ldi	r20, 0x00	; 0
    3916:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <M_DIO_void_SetPinDirection>

	///***************** _ Set Row Pins Value to HIGH **********//
	M_DIO_void_SetPinValue(ROWS_PORT, Row1_PIN, HIGH);  ///Set_Row_1_Pin_Direction
    391a:	82 e0       	ldi	r24, 0x02	; 2
    391c:	60 e0       	ldi	r22, 0x00	; 0
    391e:	41 e0       	ldi	r20, 0x01	; 1
    3920:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
	M_DIO_void_SetPinValue(ROWS_PORT, Row2_PIN, HIGH);  ///Set_Row_2_Pin_Direction
    3924:	82 e0       	ldi	r24, 0x02	; 2
    3926:	61 e0       	ldi	r22, 0x01	; 1
    3928:	41 e0       	ldi	r20, 0x01	; 1
    392a:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
	M_DIO_void_SetPinValue(ROWS_PORT, Row3_PIN, HIGH);  ///Set_Row_3_Pin_Direction
    392e:	82 e0       	ldi	r24, 0x02	; 2
    3930:	62 e0       	ldi	r22, 0x02	; 2
    3932:	41 e0       	ldi	r20, 0x01	; 1
    3934:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
	M_DIO_void_SetPinValue(ROWS_PORT, Row4_PIN, HIGH);  ///Set_Row_4_Pin_Direction
    3938:	82 e0       	ldi	r24, 0x02	; 2
    393a:	63 e0       	ldi	r22, 0x03	; 3
    393c:	41 e0       	ldi	r20, 0x01	; 1
    393e:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>



}
    3942:	cf 91       	pop	r28
    3944:	df 91       	pop	r29
    3946:	08 95       	ret

00003948 <H_KEYPAD_void_KeyPadRead>:
u8 H_KEYPAD_void_KeyPadRead(void)
{
    3948:	df 93       	push	r29
    394a:	cf 93       	push	r28
    394c:	cd b7       	in	r28, 0x3d	; 61
    394e:	de b7       	in	r29, 0x3e	; 62
    3950:	a6 97       	sbiw	r28, 0x26	; 38
    3952:	0f b6       	in	r0, 0x3f	; 63
    3954:	f8 94       	cli
    3956:	de bf       	out	0x3e, r29	; 62
    3958:	0f be       	out	0x3f, r0	; 63
    395a:	cd bf       	out	0x3d, r28	; 61
#if KEYPAD_MODEDL == MODEL_A

	u8 Local_u8_Arr [4][4]= {{'1','2','3','A'},
			                 {'4','5','6','B'},
							 {'7','8','9','C'},
							 {'*','0','#','D'}};
    395c:	ce 01       	movw	r24, r28
    395e:	42 96       	adiw	r24, 0x12	; 18
    3960:	9b a3       	std	Y+35, r25	; 0x23
    3962:	8a a3       	std	Y+34, r24	; 0x22
    3964:	ea e8       	ldi	r30, 0x8A	; 138
    3966:	f0 e0       	ldi	r31, 0x00	; 0
    3968:	fd a3       	std	Y+37, r31	; 0x25
    396a:	ec a3       	std	Y+36, r30	; 0x24
    396c:	f0 e1       	ldi	r31, 0x10	; 16
    396e:	fe a3       	std	Y+38, r31	; 0x26
    3970:	ec a1       	ldd	r30, Y+36	; 0x24
    3972:	fd a1       	ldd	r31, Y+37	; 0x25
    3974:	00 80       	ld	r0, Z
    3976:	8c a1       	ldd	r24, Y+36	; 0x24
    3978:	9d a1       	ldd	r25, Y+37	; 0x25
    397a:	01 96       	adiw	r24, 0x01	; 1
    397c:	9d a3       	std	Y+37, r25	; 0x25
    397e:	8c a3       	std	Y+36, r24	; 0x24
    3980:	ea a1       	ldd	r30, Y+34	; 0x22
    3982:	fb a1       	ldd	r31, Y+35	; 0x23
    3984:	00 82       	st	Z, r0
    3986:	8a a1       	ldd	r24, Y+34	; 0x22
    3988:	9b a1       	ldd	r25, Y+35	; 0x23
    398a:	01 96       	adiw	r24, 0x01	; 1
    398c:	9b a3       	std	Y+35, r25	; 0x23
    398e:	8a a3       	std	Y+34, r24	; 0x22
    3990:	9e a1       	ldd	r25, Y+38	; 0x26
    3992:	91 50       	subi	r25, 0x01	; 1
    3994:	9e a3       	std	Y+38, r25	; 0x26
    3996:	ee a1       	ldd	r30, Y+38	; 0x26
    3998:	ee 23       	and	r30, r30
    399a:	51 f7       	brne	.-44     	; 0x3970 <H_KEYPAD_void_KeyPadRead+0x28>
	u8 Local_u8_Arr [4][4]= {{'1','2','3','A'},
			                 {'4','5','6','B'},
							 {'7','8','9','C'},
							 {'*','0','#','D'}};
#endif
	u8 Local_u8_Col =0;            /// local columns counter
    399c:	19 8a       	std	Y+17, r1	; 0x11
	u8 Local_u8_Row =0;            /// local Rows counter
    399e:	18 8a       	std	Y+16, r1	; 0x10
    u8 Local_u8_Read = RELEASED;  /// local variable to read the button status
    39a0:	81 e0       	ldi	r24, 0x01	; 1
    39a2:	8f 87       	std	Y+15, r24	; 0x0f

///NOTE: To use this code you have to connect columns & Rows sequential pins in the same port***//
	/////for loop to read the value of the four Rows ////////
	for (Local_u8_Row = Row1_PIN ; Local_u8_Row <= Row4_PIN ; Local_u8_Row++ ){
    39a4:	18 8a       	std	Y+16, r1	; 0x10
    39a6:	ad c0       	rjmp	.+346    	; 0x3b02 <H_KEYPAD_void_KeyPadRead+0x1ba>
		///****set Local Row value to low***********/////
		M_DIO_void_SetPinValue(ROWS_PORT, Local_u8_Row, LOW);
    39a8:	82 e0       	ldi	r24, 0x02	; 2
    39aa:	68 89       	ldd	r22, Y+16	; 0x10
    39ac:	40 e0       	ldi	r20, 0x00	; 0
    39ae:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
	/////for loop to read the value of the four columns ////////
	for(Local_u8_Col = Col1_PIN ; Local_u8_Col <= Col4_PIN ; Local_u8_Col ++ )
    39b2:	82 e0       	ldi	r24, 0x02	; 2
    39b4:	89 8b       	std	Y+17, r24	; 0x11
    39b6:	99 c0       	rjmp	.+306    	; 0x3aea <H_KEYPAD_void_KeyPadRead+0x1a2>
		{

		   ///**************Read_Local Column Pin value**********
		   /// ************** check if button is pressed********
		   if (M_DIO_U8_PinRead(COLUMNS_PORT, Local_u8_Col) == PRESSED)
    39b8:	84 e0       	ldi	r24, 0x04	; 4
    39ba:	69 89       	ldd	r22, Y+17	; 0x11
    39bc:	0e 94 ee 09 	call	0x13dc	; 0x13dc <M_DIO_U8_PinRead>
    39c0:	88 23       	and	r24, r24
    39c2:	09 f0       	breq	.+2      	; 0x39c6 <H_KEYPAD_void_KeyPadRead+0x7e>
    39c4:	8f c0       	rjmp	.+286    	; 0x3ae4 <H_KEYPAD_void_KeyPadRead+0x19c>
    39c6:	80 e0       	ldi	r24, 0x00	; 0
    39c8:	90 e0       	ldi	r25, 0x00	; 0
    39ca:	a0 ef       	ldi	r26, 0xF0	; 240
    39cc:	b2 e4       	ldi	r27, 0x42	; 66
    39ce:	8b 87       	std	Y+11, r24	; 0x0b
    39d0:	9c 87       	std	Y+12, r25	; 0x0c
    39d2:	ad 87       	std	Y+13, r26	; 0x0d
    39d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    39d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    39da:	8d 85       	ldd	r24, Y+13	; 0x0d
    39dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    39de:	20 e0       	ldi	r18, 0x00	; 0
    39e0:	30 e0       	ldi	r19, 0x00	; 0
    39e2:	4a e7       	ldi	r20, 0x7A	; 122
    39e4:	53 e4       	ldi	r21, 0x43	; 67
    39e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39ea:	dc 01       	movw	r26, r24
    39ec:	cb 01       	movw	r24, r22
    39ee:	8f 83       	std	Y+7, r24	; 0x07
    39f0:	98 87       	std	Y+8, r25	; 0x08
    39f2:	a9 87       	std	Y+9, r26	; 0x09
    39f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39f6:	6f 81       	ldd	r22, Y+7	; 0x07
    39f8:	78 85       	ldd	r23, Y+8	; 0x08
    39fa:	89 85       	ldd	r24, Y+9	; 0x09
    39fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    39fe:	20 e0       	ldi	r18, 0x00	; 0
    3a00:	30 e0       	ldi	r19, 0x00	; 0
    3a02:	40 e8       	ldi	r20, 0x80	; 128
    3a04:	5f e3       	ldi	r21, 0x3F	; 63
    3a06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a0a:	88 23       	and	r24, r24
    3a0c:	2c f4       	brge	.+10     	; 0x3a18 <H_KEYPAD_void_KeyPadRead+0xd0>
		__ticks = 1;
    3a0e:	81 e0       	ldi	r24, 0x01	; 1
    3a10:	90 e0       	ldi	r25, 0x00	; 0
    3a12:	9e 83       	std	Y+6, r25	; 0x06
    3a14:	8d 83       	std	Y+5, r24	; 0x05
    3a16:	3f c0       	rjmp	.+126    	; 0x3a96 <H_KEYPAD_void_KeyPadRead+0x14e>
	else if (__tmp > 65535)
    3a18:	6f 81       	ldd	r22, Y+7	; 0x07
    3a1a:	78 85       	ldd	r23, Y+8	; 0x08
    3a1c:	89 85       	ldd	r24, Y+9	; 0x09
    3a1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a20:	20 e0       	ldi	r18, 0x00	; 0
    3a22:	3f ef       	ldi	r19, 0xFF	; 255
    3a24:	4f e7       	ldi	r20, 0x7F	; 127
    3a26:	57 e4       	ldi	r21, 0x47	; 71
    3a28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a2c:	18 16       	cp	r1, r24
    3a2e:	4c f5       	brge	.+82     	; 0x3a82 <H_KEYPAD_void_KeyPadRead+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a30:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a32:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a34:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a36:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a38:	20 e0       	ldi	r18, 0x00	; 0
    3a3a:	30 e0       	ldi	r19, 0x00	; 0
    3a3c:	40 e2       	ldi	r20, 0x20	; 32
    3a3e:	51 e4       	ldi	r21, 0x41	; 65
    3a40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a44:	dc 01       	movw	r26, r24
    3a46:	cb 01       	movw	r24, r22
    3a48:	bc 01       	movw	r22, r24
    3a4a:	cd 01       	movw	r24, r26
    3a4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a50:	dc 01       	movw	r26, r24
    3a52:	cb 01       	movw	r24, r22
    3a54:	9e 83       	std	Y+6, r25	; 0x06
    3a56:	8d 83       	std	Y+5, r24	; 0x05
    3a58:	0f c0       	rjmp	.+30     	; 0x3a78 <H_KEYPAD_void_KeyPadRead+0x130>
    3a5a:	89 e1       	ldi	r24, 0x19	; 25
    3a5c:	90 e0       	ldi	r25, 0x00	; 0
    3a5e:	9c 83       	std	Y+4, r25	; 0x04
    3a60:	8b 83       	std	Y+3, r24	; 0x03
    3a62:	8b 81       	ldd	r24, Y+3	; 0x03
    3a64:	9c 81       	ldd	r25, Y+4	; 0x04
    3a66:	01 97       	sbiw	r24, 0x01	; 1
    3a68:	f1 f7       	brne	.-4      	; 0x3a66 <H_KEYPAD_void_KeyPadRead+0x11e>
    3a6a:	9c 83       	std	Y+4, r25	; 0x04
    3a6c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a6e:	8d 81       	ldd	r24, Y+5	; 0x05
    3a70:	9e 81       	ldd	r25, Y+6	; 0x06
    3a72:	01 97       	sbiw	r24, 0x01	; 1
    3a74:	9e 83       	std	Y+6, r25	; 0x06
    3a76:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a78:	8d 81       	ldd	r24, Y+5	; 0x05
    3a7a:	9e 81       	ldd	r25, Y+6	; 0x06
    3a7c:	00 97       	sbiw	r24, 0x00	; 0
    3a7e:	69 f7       	brne	.-38     	; 0x3a5a <H_KEYPAD_void_KeyPadRead+0x112>
    3a80:	14 c0       	rjmp	.+40     	; 0x3aaa <H_KEYPAD_void_KeyPadRead+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a82:	6f 81       	ldd	r22, Y+7	; 0x07
    3a84:	78 85       	ldd	r23, Y+8	; 0x08
    3a86:	89 85       	ldd	r24, Y+9	; 0x09
    3a88:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a8e:	dc 01       	movw	r26, r24
    3a90:	cb 01       	movw	r24, r22
    3a92:	9e 83       	std	Y+6, r25	; 0x06
    3a94:	8d 83       	std	Y+5, r24	; 0x05
    3a96:	8d 81       	ldd	r24, Y+5	; 0x05
    3a98:	9e 81       	ldd	r25, Y+6	; 0x06
    3a9a:	9a 83       	std	Y+2, r25	; 0x02
    3a9c:	89 83       	std	Y+1, r24	; 0x01
    3a9e:	89 81       	ldd	r24, Y+1	; 0x01
    3aa0:	9a 81       	ldd	r25, Y+2	; 0x02
    3aa2:	01 97       	sbiw	r24, 0x01	; 1
    3aa4:	f1 f7       	brne	.-4      	; 0x3aa2 <H_KEYPAD_void_KeyPadRead+0x15a>
    3aa6:	9a 83       	std	Y+2, r25	; 0x02
    3aa8:	89 83       	std	Y+1, r24	; 0x01
		   {   ////*******delay for DEBOUNCING
			   _delay_ms(KEYPAD_DEBOUNCING_TIME);
			   /// ************** check again if button is pressed********
			    if (M_DIO_U8_PinRead(COLUMNS_PORT, Local_u8_Col) == PRESSED)
    3aaa:	84 e0       	ldi	r24, 0x04	; 4
    3aac:	69 89       	ldd	r22, Y+17	; 0x11
    3aae:	0e 94 ee 09 	call	0x13dc	; 0x13dc <M_DIO_U8_PinRead>
    3ab2:	88 23       	and	r24, r24
    3ab4:	b9 f4       	brne	.+46     	; 0x3ae4 <H_KEYPAD_void_KeyPadRead+0x19c>
		     	{
	            ///********if button is pressed set Local_u8_Read  ********
				  Local_u8_Read =Local_u8_Arr [Local_u8_Row][Local_u8_Col - 2] ;
    3ab6:	88 89       	ldd	r24, Y+16	; 0x10
    3ab8:	28 2f       	mov	r18, r24
    3aba:	30 e0       	ldi	r19, 0x00	; 0
    3abc:	89 89       	ldd	r24, Y+17	; 0x11
    3abe:	88 2f       	mov	r24, r24
    3ac0:	90 e0       	ldi	r25, 0x00	; 0
    3ac2:	ac 01       	movw	r20, r24
    3ac4:	42 50       	subi	r20, 0x02	; 2
    3ac6:	50 40       	sbci	r21, 0x00	; 0
    3ac8:	22 0f       	add	r18, r18
    3aca:	33 1f       	adc	r19, r19
    3acc:	22 0f       	add	r18, r18
    3ace:	33 1f       	adc	r19, r19
    3ad0:	ce 01       	movw	r24, r28
    3ad2:	01 96       	adiw	r24, 0x01	; 1
    3ad4:	82 0f       	add	r24, r18
    3ad6:	93 1f       	adc	r25, r19
    3ad8:	84 0f       	add	r24, r20
    3ada:	95 1f       	adc	r25, r21
    3adc:	fc 01       	movw	r30, r24
    3ade:	71 96       	adiw	r30, 0x11	; 17
    3ae0:	80 81       	ld	r24, Z
    3ae2:	8f 87       	std	Y+15, r24	; 0x0f
	/////for loop to read the value of the four Rows ////////
	for (Local_u8_Row = Row1_PIN ; Local_u8_Row <= Row4_PIN ; Local_u8_Row++ ){
		///****set Local Row value to low***********/////
		M_DIO_void_SetPinValue(ROWS_PORT, Local_u8_Row, LOW);
	/////for loop to read the value of the four columns ////////
	for(Local_u8_Col = Col1_PIN ; Local_u8_Col <= Col4_PIN ; Local_u8_Col ++ )
    3ae4:	89 89       	ldd	r24, Y+17	; 0x11
    3ae6:	8f 5f       	subi	r24, 0xFF	; 255
    3ae8:	89 8b       	std	Y+17, r24	; 0x11
    3aea:	89 89       	ldd	r24, Y+17	; 0x11
    3aec:	86 30       	cpi	r24, 0x06	; 6
    3aee:	08 f4       	brcc	.+2      	; 0x3af2 <H_KEYPAD_void_KeyPadRead+0x1aa>
    3af0:	63 cf       	rjmp	.-314    	; 0x39b8 <H_KEYPAD_void_KeyPadRead+0x70>

			    }
		   }
		}
	            ///****set Local_u8_Row value to high ***********/////
			M_DIO_void_SetPinValue(ROWS_PORT, Local_u8_Row, HIGH);
    3af2:	82 e0       	ldi	r24, 0x02	; 2
    3af4:	68 89       	ldd	r22, Y+16	; 0x10
    3af6:	41 e0       	ldi	r20, 0x01	; 1
    3af8:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
	u8 Local_u8_Row =0;            /// local Rows counter
    u8 Local_u8_Read = RELEASED;  /// local variable to read the button status

///NOTE: To use this code you have to connect columns & Rows sequential pins in the same port***//
	/////for loop to read the value of the four Rows ////////
	for (Local_u8_Row = Row1_PIN ; Local_u8_Row <= Row4_PIN ; Local_u8_Row++ ){
    3afc:	88 89       	ldd	r24, Y+16	; 0x10
    3afe:	8f 5f       	subi	r24, 0xFF	; 255
    3b00:	88 8b       	std	Y+16, r24	; 0x10
    3b02:	88 89       	ldd	r24, Y+16	; 0x10
    3b04:	84 30       	cpi	r24, 0x04	; 4
    3b06:	08 f4       	brcc	.+2      	; 0x3b0a <H_KEYPAD_void_KeyPadRead+0x1c2>
    3b08:	4f cf       	rjmp	.-354    	; 0x39a8 <H_KEYPAD_void_KeyPadRead+0x60>
		   }
		}
	            ///****set Local_u8_Row value to high ***********/////
			M_DIO_void_SetPinValue(ROWS_PORT, Local_u8_Row, HIGH);
	}
    return Local_u8_Read ;
    3b0a:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    3b0c:	a6 96       	adiw	r28, 0x26	; 38
    3b0e:	0f b6       	in	r0, 0x3f	; 63
    3b10:	f8 94       	cli
    3b12:	de bf       	out	0x3e, r29	; 62
    3b14:	0f be       	out	0x3f, r0	; 63
    3b16:	cd bf       	out	0x3d, r28	; 61
    3b18:	cf 91       	pop	r28
    3b1a:	df 91       	pop	r29
    3b1c:	08 95       	ret

00003b1e <H_BUZ_Void_BUZint>:

///***************** Functions **********//

///  H_BUZ_Void_BUZint function to initialize  Buzzer
void H_BUZ_Void_BUZint(void)
{
    3b1e:	df 93       	push	r29
    3b20:	cf 93       	push	r28
    3b22:	cd b7       	in	r28, 0x3d	; 61
    3b24:	de b7       	in	r29, 0x3e	; 62
   M_DIO_void_SetPinDirection(BUZZER_PORT, BUZZER_PIN, OUTPUT);
    3b26:	83 e0       	ldi	r24, 0x03	; 3
    3b28:	65 e0       	ldi	r22, 0x05	; 5
    3b2a:	41 e0       	ldi	r20, 0x01	; 1
    3b2c:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <M_DIO_void_SetPinDirection>
}
    3b30:	cf 91       	pop	r28
    3b32:	df 91       	pop	r29
    3b34:	08 95       	ret

00003b36 <H_BUZ_Void_BUZSetON>:
void H_BUZ_Void_BUZSetON(void)
{
    3b36:	df 93       	push	r29
    3b38:	cf 93       	push	r28
    3b3a:	cd b7       	in	r28, 0x3d	; 61
    3b3c:	de b7       	in	r29, 0x3e	; 62
	M_DIO_void_SetPinValue(BUZZER_PORT, BUZZER_PIN, HIGH);
    3b3e:	83 e0       	ldi	r24, 0x03	; 3
    3b40:	65 e0       	ldi	r22, 0x05	; 5
    3b42:	41 e0       	ldi	r20, 0x01	; 1
    3b44:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
}
    3b48:	cf 91       	pop	r28
    3b4a:	df 91       	pop	r29
    3b4c:	08 95       	ret

00003b4e <H_BUZ_Void_BUZSetOFF>:
void H_BUZ_Void_BUZSetOFF(void)
{
    3b4e:	df 93       	push	r29
    3b50:	cf 93       	push	r28
    3b52:	cd b7       	in	r28, 0x3d	; 61
    3b54:	de b7       	in	r29, 0x3e	; 62
	M_DIO_void_SetPinValue(BUZZER_PORT, BUZZER_PIN, LOW);
    3b56:	83 e0       	ldi	r24, 0x03	; 3
    3b58:	65 e0       	ldi	r22, 0x05	; 5
    3b5a:	40 e0       	ldi	r20, 0x00	; 0
    3b5c:	0e 94 66 08 	call	0x10cc	; 0x10cc <M_DIO_void_SetPinValue>
}
    3b60:	cf 91       	pop	r28
    3b62:	df 91       	pop	r29
    3b64:	08 95       	ret

00003b66 <main>:
#include "main.h"      ///*** this is a header file to contain all includes of Application



int main ()
{
    3b66:	df 93       	push	r29
    3b68:	cf 93       	push	r28
    3b6a:	cd b7       	in	r28, 0x3d	; 61
    3b6c:	de b7       	in	r29, 0x3e	; 62
    3b6e:	6d 97       	sbiw	r28, 0x1d	; 29
    3b70:	0f b6       	in	r0, 0x3f	; 63
    3b72:	f8 94       	cli
    3b74:	de bf       	out	0x3e, r29	; 62
    3b76:	0f be       	out	0x3f, r0	; 63
    3b78:	cd bf       	out	0x3d, r28	; 61
	H_LCD_Void_LCDInt();
    3b7a:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <H_LCD_Void_LCDInt>
	M_ADC_void_AdcInt();
    3b7e:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <M_ADC_void_AdcInt>
	H_TEMPSENSOR_void_TempSensorInt();
    3b82:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <H_TEMPSENSOR_void_TempSensorInt>

   u8 x= 0;
    3b86:	1d 8e       	std	Y+29, r1	; 0x1d

    while (1)
       {
    	 x=  H_TEMPSENSOR_void_TempSensorRead();
    3b88:	0e 94 08 0b 	call	0x1610	; 0x1610 <H_TEMPSENSOR_void_TempSensorRead>
    3b8c:	8d 8f       	std	Y+29, r24	; 0x1d
    3b8e:	80 e0       	ldi	r24, 0x00	; 0
    3b90:	90 e0       	ldi	r25, 0x00	; 0
    3b92:	aa e7       	ldi	r26, 0x7A	; 122
    3b94:	b4 e4       	ldi	r27, 0x44	; 68
    3b96:	89 8f       	std	Y+25, r24	; 0x19
    3b98:	9a 8f       	std	Y+26, r25	; 0x1a
    3b9a:	ab 8f       	std	Y+27, r26	; 0x1b
    3b9c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b9e:	69 8d       	ldd	r22, Y+25	; 0x19
    3ba0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ba2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ba4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ba6:	20 e0       	ldi	r18, 0x00	; 0
    3ba8:	30 e0       	ldi	r19, 0x00	; 0
    3baa:	4a e7       	ldi	r20, 0x7A	; 122
    3bac:	53 e4       	ldi	r21, 0x43	; 67
    3bae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bb2:	dc 01       	movw	r26, r24
    3bb4:	cb 01       	movw	r24, r22
    3bb6:	8d 8b       	std	Y+21, r24	; 0x15
    3bb8:	9e 8b       	std	Y+22, r25	; 0x16
    3bba:	af 8b       	std	Y+23, r26	; 0x17
    3bbc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3bbe:	6d 89       	ldd	r22, Y+21	; 0x15
    3bc0:	7e 89       	ldd	r23, Y+22	; 0x16
    3bc2:	8f 89       	ldd	r24, Y+23	; 0x17
    3bc4:	98 8d       	ldd	r25, Y+24	; 0x18
    3bc6:	20 e0       	ldi	r18, 0x00	; 0
    3bc8:	30 e0       	ldi	r19, 0x00	; 0
    3bca:	40 e8       	ldi	r20, 0x80	; 128
    3bcc:	5f e3       	ldi	r21, 0x3F	; 63
    3bce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3bd2:	88 23       	and	r24, r24
    3bd4:	2c f4       	brge	.+10     	; 0x3be0 <main+0x7a>
		__ticks = 1;
    3bd6:	81 e0       	ldi	r24, 0x01	; 1
    3bd8:	90 e0       	ldi	r25, 0x00	; 0
    3bda:	9c 8b       	std	Y+20, r25	; 0x14
    3bdc:	8b 8b       	std	Y+19, r24	; 0x13
    3bde:	3f c0       	rjmp	.+126    	; 0x3c5e <main+0xf8>
	else if (__tmp > 65535)
    3be0:	6d 89       	ldd	r22, Y+21	; 0x15
    3be2:	7e 89       	ldd	r23, Y+22	; 0x16
    3be4:	8f 89       	ldd	r24, Y+23	; 0x17
    3be6:	98 8d       	ldd	r25, Y+24	; 0x18
    3be8:	20 e0       	ldi	r18, 0x00	; 0
    3bea:	3f ef       	ldi	r19, 0xFF	; 255
    3bec:	4f e7       	ldi	r20, 0x7F	; 127
    3bee:	57 e4       	ldi	r21, 0x47	; 71
    3bf0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3bf4:	18 16       	cp	r1, r24
    3bf6:	4c f5       	brge	.+82     	; 0x3c4a <main+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bf8:	69 8d       	ldd	r22, Y+25	; 0x19
    3bfa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3bfc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3bfe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c00:	20 e0       	ldi	r18, 0x00	; 0
    3c02:	30 e0       	ldi	r19, 0x00	; 0
    3c04:	40 e2       	ldi	r20, 0x20	; 32
    3c06:	51 e4       	ldi	r21, 0x41	; 65
    3c08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c0c:	dc 01       	movw	r26, r24
    3c0e:	cb 01       	movw	r24, r22
    3c10:	bc 01       	movw	r22, r24
    3c12:	cd 01       	movw	r24, r26
    3c14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c18:	dc 01       	movw	r26, r24
    3c1a:	cb 01       	movw	r24, r22
    3c1c:	9c 8b       	std	Y+20, r25	; 0x14
    3c1e:	8b 8b       	std	Y+19, r24	; 0x13
    3c20:	0f c0       	rjmp	.+30     	; 0x3c40 <main+0xda>
    3c22:	89 e1       	ldi	r24, 0x19	; 25
    3c24:	90 e0       	ldi	r25, 0x00	; 0
    3c26:	9a 8b       	std	Y+18, r25	; 0x12
    3c28:	89 8b       	std	Y+17, r24	; 0x11
    3c2a:	89 89       	ldd	r24, Y+17	; 0x11
    3c2c:	9a 89       	ldd	r25, Y+18	; 0x12
    3c2e:	01 97       	sbiw	r24, 0x01	; 1
    3c30:	f1 f7       	brne	.-4      	; 0x3c2e <main+0xc8>
    3c32:	9a 8b       	std	Y+18, r25	; 0x12
    3c34:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c36:	8b 89       	ldd	r24, Y+19	; 0x13
    3c38:	9c 89       	ldd	r25, Y+20	; 0x14
    3c3a:	01 97       	sbiw	r24, 0x01	; 1
    3c3c:	9c 8b       	std	Y+20, r25	; 0x14
    3c3e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c40:	8b 89       	ldd	r24, Y+19	; 0x13
    3c42:	9c 89       	ldd	r25, Y+20	; 0x14
    3c44:	00 97       	sbiw	r24, 0x00	; 0
    3c46:	69 f7       	brne	.-38     	; 0x3c22 <main+0xbc>
    3c48:	14 c0       	rjmp	.+40     	; 0x3c72 <main+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c4a:	6d 89       	ldd	r22, Y+21	; 0x15
    3c4c:	7e 89       	ldd	r23, Y+22	; 0x16
    3c4e:	8f 89       	ldd	r24, Y+23	; 0x17
    3c50:	98 8d       	ldd	r25, Y+24	; 0x18
    3c52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c56:	dc 01       	movw	r26, r24
    3c58:	cb 01       	movw	r24, r22
    3c5a:	9c 8b       	std	Y+20, r25	; 0x14
    3c5c:	8b 8b       	std	Y+19, r24	; 0x13
    3c5e:	8b 89       	ldd	r24, Y+19	; 0x13
    3c60:	9c 89       	ldd	r25, Y+20	; 0x14
    3c62:	98 8b       	std	Y+16, r25	; 0x10
    3c64:	8f 87       	std	Y+15, r24	; 0x0f
    3c66:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c68:	98 89       	ldd	r25, Y+16	; 0x10
    3c6a:	01 97       	sbiw	r24, 0x01	; 1
    3c6c:	f1 f7       	brne	.-4      	; 0x3c6a <main+0x104>
    3c6e:	98 8b       	std	Y+16, r25	; 0x10
    3c70:	8f 87       	std	Y+15, r24	; 0x0f

          _delay_ms(1000);
         H_Lcd_void_LCDWriteNum(x);
    3c72:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c74:	88 2f       	mov	r24, r24
    3c76:	90 e0       	ldi	r25, 0x00	; 0
    3c78:	a0 e0       	ldi	r26, 0x00	; 0
    3c7a:	b0 e0       	ldi	r27, 0x00	; 0
    3c7c:	bc 01       	movw	r22, r24
    3c7e:	cd 01       	movw	r24, r26
    3c80:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <H_Lcd_void_LCDWriteNum>
    3c84:	80 e0       	ldi	r24, 0x00	; 0
    3c86:	90 e0       	ldi	r25, 0x00	; 0
    3c88:	aa e7       	ldi	r26, 0x7A	; 122
    3c8a:	b4 e4       	ldi	r27, 0x44	; 68
    3c8c:	8b 87       	std	Y+11, r24	; 0x0b
    3c8e:	9c 87       	std	Y+12, r25	; 0x0c
    3c90:	ad 87       	std	Y+13, r26	; 0x0d
    3c92:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c94:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c96:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c98:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c9c:	20 e0       	ldi	r18, 0x00	; 0
    3c9e:	30 e0       	ldi	r19, 0x00	; 0
    3ca0:	4a e7       	ldi	r20, 0x7A	; 122
    3ca2:	53 e4       	ldi	r21, 0x43	; 67
    3ca4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ca8:	dc 01       	movw	r26, r24
    3caa:	cb 01       	movw	r24, r22
    3cac:	8f 83       	std	Y+7, r24	; 0x07
    3cae:	98 87       	std	Y+8, r25	; 0x08
    3cb0:	a9 87       	std	Y+9, r26	; 0x09
    3cb2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3cb4:	6f 81       	ldd	r22, Y+7	; 0x07
    3cb6:	78 85       	ldd	r23, Y+8	; 0x08
    3cb8:	89 85       	ldd	r24, Y+9	; 0x09
    3cba:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cbc:	20 e0       	ldi	r18, 0x00	; 0
    3cbe:	30 e0       	ldi	r19, 0x00	; 0
    3cc0:	40 e8       	ldi	r20, 0x80	; 128
    3cc2:	5f e3       	ldi	r21, 0x3F	; 63
    3cc4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3cc8:	88 23       	and	r24, r24
    3cca:	2c f4       	brge	.+10     	; 0x3cd6 <main+0x170>
		__ticks = 1;
    3ccc:	81 e0       	ldi	r24, 0x01	; 1
    3cce:	90 e0       	ldi	r25, 0x00	; 0
    3cd0:	9e 83       	std	Y+6, r25	; 0x06
    3cd2:	8d 83       	std	Y+5, r24	; 0x05
    3cd4:	3f c0       	rjmp	.+126    	; 0x3d54 <main+0x1ee>
	else if (__tmp > 65535)
    3cd6:	6f 81       	ldd	r22, Y+7	; 0x07
    3cd8:	78 85       	ldd	r23, Y+8	; 0x08
    3cda:	89 85       	ldd	r24, Y+9	; 0x09
    3cdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cde:	20 e0       	ldi	r18, 0x00	; 0
    3ce0:	3f ef       	ldi	r19, 0xFF	; 255
    3ce2:	4f e7       	ldi	r20, 0x7F	; 127
    3ce4:	57 e4       	ldi	r21, 0x47	; 71
    3ce6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3cea:	18 16       	cp	r1, r24
    3cec:	4c f5       	brge	.+82     	; 0x3d40 <main+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cee:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cf0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cf2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cf4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cf6:	20 e0       	ldi	r18, 0x00	; 0
    3cf8:	30 e0       	ldi	r19, 0x00	; 0
    3cfa:	40 e2       	ldi	r20, 0x20	; 32
    3cfc:	51 e4       	ldi	r21, 0x41	; 65
    3cfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d02:	dc 01       	movw	r26, r24
    3d04:	cb 01       	movw	r24, r22
    3d06:	bc 01       	movw	r22, r24
    3d08:	cd 01       	movw	r24, r26
    3d0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d0e:	dc 01       	movw	r26, r24
    3d10:	cb 01       	movw	r24, r22
    3d12:	9e 83       	std	Y+6, r25	; 0x06
    3d14:	8d 83       	std	Y+5, r24	; 0x05
    3d16:	0f c0       	rjmp	.+30     	; 0x3d36 <main+0x1d0>
    3d18:	89 e1       	ldi	r24, 0x19	; 25
    3d1a:	90 e0       	ldi	r25, 0x00	; 0
    3d1c:	9c 83       	std	Y+4, r25	; 0x04
    3d1e:	8b 83       	std	Y+3, r24	; 0x03
    3d20:	8b 81       	ldd	r24, Y+3	; 0x03
    3d22:	9c 81       	ldd	r25, Y+4	; 0x04
    3d24:	01 97       	sbiw	r24, 0x01	; 1
    3d26:	f1 f7       	brne	.-4      	; 0x3d24 <main+0x1be>
    3d28:	9c 83       	std	Y+4, r25	; 0x04
    3d2a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d2c:	8d 81       	ldd	r24, Y+5	; 0x05
    3d2e:	9e 81       	ldd	r25, Y+6	; 0x06
    3d30:	01 97       	sbiw	r24, 0x01	; 1
    3d32:	9e 83       	std	Y+6, r25	; 0x06
    3d34:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d36:	8d 81       	ldd	r24, Y+5	; 0x05
    3d38:	9e 81       	ldd	r25, Y+6	; 0x06
    3d3a:	00 97       	sbiw	r24, 0x00	; 0
    3d3c:	69 f7       	brne	.-38     	; 0x3d18 <main+0x1b2>
    3d3e:	14 c0       	rjmp	.+40     	; 0x3d68 <main+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d40:	6f 81       	ldd	r22, Y+7	; 0x07
    3d42:	78 85       	ldd	r23, Y+8	; 0x08
    3d44:	89 85       	ldd	r24, Y+9	; 0x09
    3d46:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d4c:	dc 01       	movw	r26, r24
    3d4e:	cb 01       	movw	r24, r22
    3d50:	9e 83       	std	Y+6, r25	; 0x06
    3d52:	8d 83       	std	Y+5, r24	; 0x05
    3d54:	8d 81       	ldd	r24, Y+5	; 0x05
    3d56:	9e 81       	ldd	r25, Y+6	; 0x06
    3d58:	9a 83       	std	Y+2, r25	; 0x02
    3d5a:	89 83       	std	Y+1, r24	; 0x01
    3d5c:	89 81       	ldd	r24, Y+1	; 0x01
    3d5e:	9a 81       	ldd	r25, Y+2	; 0x02
    3d60:	01 97       	sbiw	r24, 0x01	; 1
    3d62:	f1 f7       	brne	.-4      	; 0x3d60 <main+0x1fa>
    3d64:	9a 83       	std	Y+2, r25	; 0x02
    3d66:	89 83       	std	Y+1, r24	; 0x01
          _delay_ms(1000);
         H_Lcd_void_LCDClear();
    3d68:	0e 94 57 1c 	call	0x38ae	; 0x38ae <H_Lcd_void_LCDClear>
    3d6c:	0d cf       	rjmp	.-486    	; 0x3b88 <main+0x22>

00003d6e <A_TIMER0_void_Timer0Exc>:


}

void A_TIMER0_void_Timer0Exc(void)
{
    3d6e:	df 93       	push	r29
    3d70:	cf 93       	push	r28
    3d72:	cd b7       	in	r28, 0x3d	; 61
    3d74:	de b7       	in	r29, 0x3e	; 62
   H_LED_Void_LedOn(BLUE_LED);
    3d76:	82 e0       	ldi	r24, 0x02	; 2
    3d78:	0e 94 07 13 	call	0x260e	; 0x260e <H_LED_Void_LedOn>
   H_LED_Void_LedTogg(BLUE_LED);
    3d7c:	82 e0       	ldi	r24, 0x02	; 2
    3d7e:	0e 94 8f 13 	call	0x271e	; 0x271e <H_LED_Void_LedTogg>
}
    3d82:	cf 91       	pop	r28
    3d84:	df 91       	pop	r29
    3d86:	08 95       	ret

00003d88 <__mulsi3>:
    3d88:	62 9f       	mul	r22, r18
    3d8a:	d0 01       	movw	r26, r0
    3d8c:	73 9f       	mul	r23, r19
    3d8e:	f0 01       	movw	r30, r0
    3d90:	82 9f       	mul	r24, r18
    3d92:	e0 0d       	add	r30, r0
    3d94:	f1 1d       	adc	r31, r1
    3d96:	64 9f       	mul	r22, r20
    3d98:	e0 0d       	add	r30, r0
    3d9a:	f1 1d       	adc	r31, r1
    3d9c:	92 9f       	mul	r25, r18
    3d9e:	f0 0d       	add	r31, r0
    3da0:	83 9f       	mul	r24, r19
    3da2:	f0 0d       	add	r31, r0
    3da4:	74 9f       	mul	r23, r20
    3da6:	f0 0d       	add	r31, r0
    3da8:	65 9f       	mul	r22, r21
    3daa:	f0 0d       	add	r31, r0
    3dac:	99 27       	eor	r25, r25
    3dae:	72 9f       	mul	r23, r18
    3db0:	b0 0d       	add	r27, r0
    3db2:	e1 1d       	adc	r30, r1
    3db4:	f9 1f       	adc	r31, r25
    3db6:	63 9f       	mul	r22, r19
    3db8:	b0 0d       	add	r27, r0
    3dba:	e1 1d       	adc	r30, r1
    3dbc:	f9 1f       	adc	r31, r25
    3dbe:	bd 01       	movw	r22, r26
    3dc0:	cf 01       	movw	r24, r30
    3dc2:	11 24       	eor	r1, r1
    3dc4:	08 95       	ret

00003dc6 <__udivmodqi4>:
    3dc6:	99 1b       	sub	r25, r25
    3dc8:	79 e0       	ldi	r23, 0x09	; 9
    3dca:	04 c0       	rjmp	.+8      	; 0x3dd4 <__udivmodqi4_ep>

00003dcc <__udivmodqi4_loop>:
    3dcc:	99 1f       	adc	r25, r25
    3dce:	96 17       	cp	r25, r22
    3dd0:	08 f0       	brcs	.+2      	; 0x3dd4 <__udivmodqi4_ep>
    3dd2:	96 1b       	sub	r25, r22

00003dd4 <__udivmodqi4_ep>:
    3dd4:	88 1f       	adc	r24, r24
    3dd6:	7a 95       	dec	r23
    3dd8:	c9 f7       	brne	.-14     	; 0x3dcc <__udivmodqi4_loop>
    3dda:	80 95       	com	r24
    3ddc:	08 95       	ret

00003dde <__udivmodsi4>:
    3dde:	a1 e2       	ldi	r26, 0x21	; 33
    3de0:	1a 2e       	mov	r1, r26
    3de2:	aa 1b       	sub	r26, r26
    3de4:	bb 1b       	sub	r27, r27
    3de6:	fd 01       	movw	r30, r26
    3de8:	0d c0       	rjmp	.+26     	; 0x3e04 <__udivmodsi4_ep>

00003dea <__udivmodsi4_loop>:
    3dea:	aa 1f       	adc	r26, r26
    3dec:	bb 1f       	adc	r27, r27
    3dee:	ee 1f       	adc	r30, r30
    3df0:	ff 1f       	adc	r31, r31
    3df2:	a2 17       	cp	r26, r18
    3df4:	b3 07       	cpc	r27, r19
    3df6:	e4 07       	cpc	r30, r20
    3df8:	f5 07       	cpc	r31, r21
    3dfa:	20 f0       	brcs	.+8      	; 0x3e04 <__udivmodsi4_ep>
    3dfc:	a2 1b       	sub	r26, r18
    3dfe:	b3 0b       	sbc	r27, r19
    3e00:	e4 0b       	sbc	r30, r20
    3e02:	f5 0b       	sbc	r31, r21

00003e04 <__udivmodsi4_ep>:
    3e04:	66 1f       	adc	r22, r22
    3e06:	77 1f       	adc	r23, r23
    3e08:	88 1f       	adc	r24, r24
    3e0a:	99 1f       	adc	r25, r25
    3e0c:	1a 94       	dec	r1
    3e0e:	69 f7       	brne	.-38     	; 0x3dea <__udivmodsi4_loop>
    3e10:	60 95       	com	r22
    3e12:	70 95       	com	r23
    3e14:	80 95       	com	r24
    3e16:	90 95       	com	r25
    3e18:	9b 01       	movw	r18, r22
    3e1a:	ac 01       	movw	r20, r24
    3e1c:	bd 01       	movw	r22, r26
    3e1e:	cf 01       	movw	r24, r30
    3e20:	08 95       	ret

00003e22 <__divmodsi4>:
    3e22:	97 fb       	bst	r25, 7
    3e24:	09 2e       	mov	r0, r25
    3e26:	05 26       	eor	r0, r21
    3e28:	0e d0       	rcall	.+28     	; 0x3e46 <__divmodsi4_neg1>
    3e2a:	57 fd       	sbrc	r21, 7
    3e2c:	04 d0       	rcall	.+8      	; 0x3e36 <__divmodsi4_neg2>
    3e2e:	d7 df       	rcall	.-82     	; 0x3dde <__udivmodsi4>
    3e30:	0a d0       	rcall	.+20     	; 0x3e46 <__divmodsi4_neg1>
    3e32:	00 1c       	adc	r0, r0
    3e34:	38 f4       	brcc	.+14     	; 0x3e44 <__divmodsi4_exit>

00003e36 <__divmodsi4_neg2>:
    3e36:	50 95       	com	r21
    3e38:	40 95       	com	r20
    3e3a:	30 95       	com	r19
    3e3c:	21 95       	neg	r18
    3e3e:	3f 4f       	sbci	r19, 0xFF	; 255
    3e40:	4f 4f       	sbci	r20, 0xFF	; 255
    3e42:	5f 4f       	sbci	r21, 0xFF	; 255

00003e44 <__divmodsi4_exit>:
    3e44:	08 95       	ret

00003e46 <__divmodsi4_neg1>:
    3e46:	f6 f7       	brtc	.-4      	; 0x3e44 <__divmodsi4_exit>
    3e48:	90 95       	com	r25
    3e4a:	80 95       	com	r24
    3e4c:	70 95       	com	r23
    3e4e:	61 95       	neg	r22
    3e50:	7f 4f       	sbci	r23, 0xFF	; 255
    3e52:	8f 4f       	sbci	r24, 0xFF	; 255
    3e54:	9f 4f       	sbci	r25, 0xFF	; 255
    3e56:	08 95       	ret

00003e58 <__prologue_saves__>:
    3e58:	2f 92       	push	r2
    3e5a:	3f 92       	push	r3
    3e5c:	4f 92       	push	r4
    3e5e:	5f 92       	push	r5
    3e60:	6f 92       	push	r6
    3e62:	7f 92       	push	r7
    3e64:	8f 92       	push	r8
    3e66:	9f 92       	push	r9
    3e68:	af 92       	push	r10
    3e6a:	bf 92       	push	r11
    3e6c:	cf 92       	push	r12
    3e6e:	df 92       	push	r13
    3e70:	ef 92       	push	r14
    3e72:	ff 92       	push	r15
    3e74:	0f 93       	push	r16
    3e76:	1f 93       	push	r17
    3e78:	cf 93       	push	r28
    3e7a:	df 93       	push	r29
    3e7c:	cd b7       	in	r28, 0x3d	; 61
    3e7e:	de b7       	in	r29, 0x3e	; 62
    3e80:	ca 1b       	sub	r28, r26
    3e82:	db 0b       	sbc	r29, r27
    3e84:	0f b6       	in	r0, 0x3f	; 63
    3e86:	f8 94       	cli
    3e88:	de bf       	out	0x3e, r29	; 62
    3e8a:	0f be       	out	0x3f, r0	; 63
    3e8c:	cd bf       	out	0x3d, r28	; 61
    3e8e:	09 94       	ijmp

00003e90 <__epilogue_restores__>:
    3e90:	2a 88       	ldd	r2, Y+18	; 0x12
    3e92:	39 88       	ldd	r3, Y+17	; 0x11
    3e94:	48 88       	ldd	r4, Y+16	; 0x10
    3e96:	5f 84       	ldd	r5, Y+15	; 0x0f
    3e98:	6e 84       	ldd	r6, Y+14	; 0x0e
    3e9a:	7d 84       	ldd	r7, Y+13	; 0x0d
    3e9c:	8c 84       	ldd	r8, Y+12	; 0x0c
    3e9e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3ea0:	aa 84       	ldd	r10, Y+10	; 0x0a
    3ea2:	b9 84       	ldd	r11, Y+9	; 0x09
    3ea4:	c8 84       	ldd	r12, Y+8	; 0x08
    3ea6:	df 80       	ldd	r13, Y+7	; 0x07
    3ea8:	ee 80       	ldd	r14, Y+6	; 0x06
    3eaa:	fd 80       	ldd	r15, Y+5	; 0x05
    3eac:	0c 81       	ldd	r16, Y+4	; 0x04
    3eae:	1b 81       	ldd	r17, Y+3	; 0x03
    3eb0:	aa 81       	ldd	r26, Y+2	; 0x02
    3eb2:	b9 81       	ldd	r27, Y+1	; 0x01
    3eb4:	ce 0f       	add	r28, r30
    3eb6:	d1 1d       	adc	r29, r1
    3eb8:	0f b6       	in	r0, 0x3f	; 63
    3eba:	f8 94       	cli
    3ebc:	de bf       	out	0x3e, r29	; 62
    3ebe:	0f be       	out	0x3f, r0	; 63
    3ec0:	cd bf       	out	0x3d, r28	; 61
    3ec2:	ed 01       	movw	r28, r26
    3ec4:	08 95       	ret

00003ec6 <_exit>:
    3ec6:	f8 94       	cli

00003ec8 <__stop_program>:
    3ec8:	ff cf       	rjmp	.-2      	; 0x3ec8 <__stop_program>
